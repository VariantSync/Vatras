open import Framework.Definitions
module Lang.ADT where

open import Data.Bool using (Bool; if_then_else_)
open import Framework.VariabilityLanguage

data ADT (F : ùîΩ) : ùîº where
  leaf   : ‚àÄ {A} ‚Üí Variant A ‚Üí ADT F A
  _‚ü®_,_‚ü© : ‚àÄ {A} ‚Üí (D : F) ‚Üí (l : ADT F A) ‚Üí (r : ADT F A) ‚Üí ADT F A

Configuration : (F : ùîΩ) ‚Üí Set
Configuration F = F ‚Üí Bool

‚ü¶_‚üß : {F : ùîΩ} ‚Üí ùîº-Semantics (Configuration F) (ADT F)
‚ü¶ leaf v      ‚üß _ = v
‚ü¶ D ‚ü® l , r ‚ü© ‚üß c = if c D
                    then ‚ü¶ l ‚üß c
                    else ‚ü¶ r ‚üß c

ADTL : (F : ùîΩ) ‚Üí VariabilityLanguage
ADTL F = ‚ü™ ADT F , Configuration F , ‚ü¶_‚üß ‚ü´


open import Data.String as String using (String; _++_; intersperse)
open import Data.Product using (_,_)
open import Show.Lines

pretty : {A : ùî∏} ‚Üí {F : ùîΩ} ‚Üí (Variant A ‚Üí String) ‚Üí (F ‚Üí String) ‚Üí ADT F A ‚Üí Lines
pretty pretty-variant show-F (leaf v) = > pretty-variant v
pretty pretty-variant show-F (D ‚ü® l , r ‚ü©) = do
  > show-F D ++ "‚ü®"
  indent 2 do
    appendToLastLine "," (pretty pretty-variant show-F l)
    pretty pretty-variant show-F r
  > "‚ü©"
