open import Vatras.Framework.Definitions
module Vatras.Test.Experiments.FST-Experiments where

open import Data.Bool using (true; false)
open import Data.List using (List; _‚à∑_; []; map; [_])
open import Data.Product using (proj‚ÇÅ; proj‚ÇÇ; _,_; _√ó_)
open import Function using (id; _‚àò_)

open import Relation.Binary using (DecidableEquality)
open import Relation.Nullary.Decidable using (yes; no; does; _because_; _√ó-dec_)

open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_; refl)

open import Vatras.Util.Named
open import Vatras.Test.Example
open import Vatras.Test.Experiment
open import Vatras.Show.Lines hiding (map)
open import Vatras.Util.ShowHelpers
open import Data.String using (String; _<+>_; _++_) renaming (_‚âü_ to _‚âüÀ¢_)

open import Vatras.Framework.Variants using (show-rose)

import Vatras.Lang.FST as FST
open FST using (Configuration)

module _ (F : ùîΩ) (A : ùî∏) where
-- (_‚âü_ : DecidableEquality A)
  open FST.Impose F A
  module FSTShow = FST.Impose.Show F A

  exp :
      (F ‚Üí String)
    ‚Üí (atoms A ‚Üí String)
    ‚Üí List (Configuration F)
    ‚Üí Experiment SPL
  getName (exp _ _ _) = "Configuration FST example"
  get (exp show-N show-A configs) (example-name ‚âî forest) =
    let open FSTShow show-N show-A
    in
    do
    > "Expression e has features"
    indent 2 do
      lines (map show-Feature (features forest))

    foreach [ c ‚àà configs ] do
      let cstr = show-fun show-N show-bool c (names forest)
      linebreak
      > "‚ü¶ e ‚üß" <+> cstr <+> "="
      indent 2 do
        > show-rose show-A (‚ü¶ forest ‚üß c)

pick-all : ‚àÄ {N} ‚Üí Configuration N
pick-all _ = true

pick-only : ‚àÄ {N} ‚Üí DecidableEquality N ‚Üí N ‚Üí Configuration N
pick-only _==_ n n' = does (n == n')

module Java where
  ASTNode = String

  class = "class" <+>_
  method = "method" <+>_
  return : String ‚Üí ASTNode
  return e = "return" <+> e ++ ";"

  _‚âü-ast_ : DecidableEquality ASTNode
  _‚âü-ast_ = _‚âüÀ¢_

  open FST String using (_Ôºé_; branches)
  open FST.Impose String (ASTNode , _‚âü-ast_)

  module Calculator where
    fname-Add = "Add"
    fname-Sub = "Sub"
    fname-Log = "Log"

    cls = class "Calculator"

    add = method "add(int,int)"
    add-ret = return "x + y"

    sub = method "sub(int,int)"
    sub-ret = return "x - y"

    log = "log(x + \", \" + y);"

    ---- Features

    open import Data.Unit using (tt)
    open import Data.List.Relation.Unary.AllPairs using ([]; _‚à∑_)
    open import Data.List.Relation.Unary.All using ([]; _‚à∑_)

    feature-Add : Feature
    feature-Add = fname-Add :: (cls Ôºé add Ôºé add-ret Ôºé []) ‚äö (([] ‚à∑ []) , ((([] ‚à∑ []) , ((([] ‚à∑ []) , (([] , []) ‚à∑ [])) ‚à∑ [])) ‚à∑ []))

    feature-Sub : Feature
    feature-Sub = fname-Sub :: (cls Ôºé sub Ôºé sub-ret Ôºé []) ‚äö (([] ‚à∑ []) , ((([] ‚à∑ [] , ((([] ‚à∑ []) , ((([] , [])) ‚à∑ []))) ‚à∑ [])) ‚à∑ []))

    feature-Log : Feature
    feature-Log = fname-Log :: (cls Ôºé
      branches (
        (add Ôºé log Ôºé [])
      ‚à∑ (sub Ôºé log Ôºé [])
      ‚à∑ [])) ‚äö (([] ‚à∑ []) , ((((((Œª where ()) ‚à∑ []) ‚à∑ ([] ‚à∑ [])) , (((([] ‚à∑ []) , ((([] , [])) ‚à∑ []))) ‚à∑ (((([] ‚à∑ []) , ((([] , [])) ‚à∑ []))) ‚à∑ [])))) ‚à∑ []))

    ---- Example SPLs

    ex-Add-Sub : Example SPL
    ex-Add-Sub = "add-sub" ‚âî "package" ‚óÄ (feature-Add ‚à∑ feature-Sub ‚à∑ [])

    ex-Sub-Add : Example SPL
    ex-Sub-Add = "sub-add" ‚âî "package" ‚óÄ (feature-Sub ‚à∑ feature-Add ‚à∑ [])

    ex-Add-Sub-Log : Example SPL
    ex-Add-Sub-Log = "add-sub" ‚âî "package" ‚óÄ (feature-Add ‚à∑ feature-Sub ‚à∑ feature-Log ‚à∑ [])

    ex-all : List (Example SPL)
    ex-all = ex-Add-Sub ‚à∑ ex-Sub-Add ‚à∑ ex-Add-Sub-Log ‚à∑ []

    ---- Experiments

    toy-calculator-experiment =
      let eq = _‚âü-ast_ in
      exp String (ASTNode , eq) id id (pick-all ‚à∑ pick-only eq fname-Add ‚à∑ [])
