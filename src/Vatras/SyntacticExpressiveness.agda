module Vatras.SyntacticExpressiveness where

open import Data.Empty using (‚ä•-elim)
open import Data.Nat as ‚Ñï using (‚Ñï; _‚â§_; _>_; _<_; _*_)
import Data.Nat.Properties as ‚Ñï
open import Data.Product using (_√ó_; _,_; Œ£-syntax; proj‚ÇÅ; proj‚ÇÇ)
open import Relation.Nullary.Negation using (¬¨_)
import Relation.Binary.PropositionalEquality as Eq
open import Relation.Binary.Structures using (IsEquivalence; IsPreorder; IsPartialOrder; IsStrictPartialOrder)
open import Size using (‚àû)

open import Vatras.Data.EqIndexedSet using (‚âÖ-refl; ‚âÖ-sym; ‚âÖ-trans; ‚âÖ‚Üí‚âÖ[]; ‚äÜ-index)
open import Vatras.Framework.Definitions using (ùî∏)
open import Vatras.Framework.Variants using (Rose)
open import Vatras.Framework.Relation.Expression (Rose ‚àû) using (_,_‚ä¢_‚â£_)
open import Vatras.Framework.VariabilityLanguage using (VariabilityLanguage; Expression)
open import Vatras.Framework.Compiler using (LanguageCompiler)

record SizedLang : Set‚ÇÇ where
  field
    Lang : VariabilityLanguage (Rose ‚àû)
    size : {A : ùî∏} ‚Üí Expression Lang A ‚Üí ‚Ñï
open SizedLang

_‚â§Size_ : SizedLang ‚Üí SizedLang ‚Üí Set‚ÇÅ
L‚ÇÅ ‚â§Size L‚ÇÇ =
  Œ£[ n ‚àà ‚Ñï ]
  ‚àÄ (A : ùî∏) ‚Üí
  ‚àÄ (e‚ÇÇ : Expression (Lang L‚ÇÇ) A) ‚Üí
  Œ£[ e‚ÇÅ ‚àà Expression (Lang L‚ÇÅ) A ]
      Lang L‚ÇÅ , Lang L‚ÇÇ ‚ä¢ e‚ÇÅ ‚â£ e‚ÇÇ
    √ó size L‚ÇÅ e‚ÇÅ ‚â§ n * size L‚ÇÇ e‚ÇÇ

_=Size_ : SizedLang ‚Üí SizedLang ‚Üí Set‚ÇÅ
L‚ÇÅ =Size L‚ÇÇ = L‚ÇÅ ‚â§Size L‚ÇÇ √ó L‚ÇÇ ‚â§Size L‚ÇÅ

_‚â±Size_ : SizedLang ‚Üí SizedLang ‚Üí Set‚ÇÅ
L‚ÇÅ ‚â±Size L‚ÇÇ =
  ‚àÄ (n : ‚Ñï) ‚Üí
  Œ£[ A ‚àà ùî∏ ]
  Œ£[ e‚ÇÅ ‚àà Expression (Lang L‚ÇÅ) A ]
  ‚àÄ (e‚ÇÇ : Expression (Lang L‚ÇÇ) A )
  ‚Üí Lang L‚ÇÅ , Lang L‚ÇÇ ‚ä¢ e‚ÇÅ ‚â£ e‚ÇÇ
  ‚Üí size L‚ÇÇ e‚ÇÇ > n * size L‚ÇÅ e‚ÇÅ

_<Size_ : SizedLang ‚Üí SizedLang ‚Üí Set‚ÇÅ
L‚ÇÅ <Size L‚ÇÇ = L‚ÇÅ ‚â§Size L‚ÇÇ √ó L‚ÇÅ ‚â±Size L‚ÇÇ


‚â§Size-refl : {L : SizedLang} ‚Üí L ‚â§Size L
‚â§Size-refl {L} = 1 , Œª A e ‚Üí e , ‚âÖ-refl , ‚Ñï.‚â§-reflexive (Eq.sym (‚Ñï.*-identityÀ° (size L e)))

‚â§Size-reflexive : {L‚ÇÅ L‚ÇÇ : SizedLang} ‚Üí L‚ÇÅ =Size L‚ÇÇ ‚Üí L‚ÇÅ ‚â§Size L‚ÇÇ
‚â§Size-reflexive (L‚ÇÅ‚â§L‚ÇÇ , L‚ÇÇ‚â§L‚ÇÅ) = L‚ÇÅ‚â§L‚ÇÇ

‚â§Size-transitive : {L‚ÇÅ L‚ÇÇ L‚ÇÉ : SizedLang} ‚Üí L‚ÇÅ ‚â§Size L‚ÇÇ ‚Üí L‚ÇÇ ‚â§Size L‚ÇÉ ‚Üí L‚ÇÅ ‚â§Size L‚ÇÉ
‚â§Size-transitive {L‚ÇÅ} {L‚ÇÇ} {L‚ÇÉ} (n‚ÇÅ , L‚ÇÇ‚ÜíL‚ÇÅ) (n‚ÇÇ , L‚ÇÉ‚ÜíL‚ÇÇ) .proj‚ÇÅ = n‚ÇÅ * n‚ÇÇ
‚â§Size-transitive {L‚ÇÅ} {L‚ÇÇ} {L‚ÇÉ} (n‚ÇÅ , L‚ÇÇ‚ÜíL‚ÇÅ) (n‚ÇÇ , L‚ÇÉ‚ÜíL‚ÇÇ) .proj‚ÇÇ A e‚ÇÉ with L‚ÇÉ‚ÜíL‚ÇÇ A e‚ÇÉ
‚â§Size-transitive {L‚ÇÅ} {L‚ÇÇ} {L‚ÇÉ} (n‚ÇÅ , L‚ÇÇ‚ÜíL‚ÇÅ) (n‚ÇÇ , L‚ÇÉ‚ÜíL‚ÇÇ) .proj‚ÇÇ A e‚ÇÉ | e‚ÇÇ , e‚ÇÇ‚âÖe‚ÇÉ , e‚ÇÅ‚â§e‚ÇÇ with L‚ÇÇ‚ÜíL‚ÇÅ A e‚ÇÇ
‚â§Size-transitive {L‚ÇÅ} {L‚ÇÇ} {L‚ÇÉ} (n‚ÇÅ , L‚ÇÇ‚ÜíL‚ÇÅ) (n‚ÇÇ , L‚ÇÉ‚ÜíL‚ÇÇ) .proj‚ÇÇ A e‚ÇÉ | e‚ÇÇ , e‚ÇÇ‚âÖe‚ÇÉ , e‚ÇÇ‚â§e‚ÇÉ | e‚ÇÅ , e‚ÇÅ‚âÖe‚ÇÇ , e‚ÇÅ‚â§e‚ÇÇ = e‚ÇÅ , ‚âÖ-trans e‚ÇÅ‚âÖe‚ÇÇ e‚ÇÇ‚âÖe‚ÇÉ ,
    (begin
      size L‚ÇÅ e‚ÇÅ
    ‚â§‚ü® e‚ÇÅ‚â§e‚ÇÇ ‚ü©
      n‚ÇÅ * size L‚ÇÇ e‚ÇÇ
    ‚â§‚ü® ‚Ñï.*-mono ≥-‚â§ n‚ÇÅ e‚ÇÇ‚â§e‚ÇÉ ‚ü©
      n‚ÇÅ * (n‚ÇÇ * size L‚ÇÉ e‚ÇÉ)
    ‚â°‚ü® ‚Ñï.*-assoc n‚ÇÅ n‚ÇÇ (size L‚ÇÉ e‚ÇÉ) ‚ü®
      n‚ÇÅ * n‚ÇÇ * size L‚ÇÉ e‚ÇÉ
    ‚àé)
  where
  open ‚Ñï.‚â§-Reasoning

‚â§Size-antisymmetric : {L‚ÇÅ L‚ÇÇ : SizedLang} ‚Üí L‚ÇÅ ‚â§Size L‚ÇÇ ‚Üí L‚ÇÇ ‚â§Size L‚ÇÅ ‚Üí L‚ÇÅ =Size L‚ÇÇ
‚â§Size-antisymmetric L‚ÇÅ‚â§L‚ÇÇ L‚ÇÇ‚â§L‚ÇÅ = L‚ÇÅ‚â§L‚ÇÇ , L‚ÇÇ‚â§L‚ÇÅ


=Size-reflexive : {L : SizedLang} ‚Üí L =Size L
=Size-reflexive = ‚â§Size-refl , ‚â§Size-refl

=Size-symmetric : {L‚ÇÅ L‚ÇÇ : SizedLang} ‚Üí L‚ÇÅ =Size L‚ÇÇ ‚Üí L‚ÇÇ =Size L‚ÇÅ
=Size-symmetric (L‚ÇÅ‚â§L‚ÇÇ , L‚ÇÇ‚â§L‚ÇÅ) = L‚ÇÇ‚â§L‚ÇÅ , L‚ÇÅ‚â§L‚ÇÇ

=Size-transitive : {L‚ÇÅ L‚ÇÇ L‚ÇÉ : SizedLang} ‚Üí L‚ÇÅ =Size L‚ÇÇ ‚Üí L‚ÇÇ =Size L‚ÇÉ ‚Üí L‚ÇÅ =Size L‚ÇÉ
=Size-transitive (L‚ÇÅ‚â§L‚ÇÇ , L‚ÇÇ‚â§L‚ÇÅ) (L‚ÇÇ‚â§L‚ÇÉ , L‚ÇÉ‚â§L‚ÇÇ) = ‚â§Size-transitive L‚ÇÅ‚â§L‚ÇÇ L‚ÇÇ‚â§L‚ÇÉ , ‚â§Size-transitive L‚ÇÉ‚â§L‚ÇÇ L‚ÇÇ‚â§L‚ÇÅ

<Size-transitive : {L‚ÇÅ L‚ÇÇ L‚ÇÉ : SizedLang} ‚Üí L‚ÇÅ <Size L‚ÇÇ ‚Üí L‚ÇÇ <Size L‚ÇÉ ‚Üí L‚ÇÅ <Size L‚ÇÉ
<Size-transitive {L‚ÇÅ} {L‚ÇÇ} {L‚ÇÉ} (L‚ÇÅ‚â§L‚ÇÇ , L‚ÇÅ‚â±L‚ÇÇ) (L‚ÇÇ‚â§L‚ÇÉ@(m , L‚ÇÉ‚ÜíL‚ÇÇ) , L‚ÇÇ‚â±L‚ÇÉ) .proj‚ÇÅ = ‚â§Size-transitive L‚ÇÅ‚â§L‚ÇÇ L‚ÇÇ‚â§L‚ÇÉ
<Size-transitive {L‚ÇÅ} {L‚ÇÇ} {L‚ÇÉ} (L‚ÇÅ‚â§L‚ÇÇ , L‚ÇÅ‚â±L‚ÇÇ) (L‚ÇÇ‚â§L‚ÇÉ@(m , L‚ÇÉ‚ÜíL‚ÇÇ) , L‚ÇÇ‚â±L‚ÇÉ) .proj‚ÇÇ n with L‚ÇÅ‚â±L‚ÇÇ (m * n)
<Size-transitive {L‚ÇÅ} {L‚ÇÇ} {L‚ÇÉ} (L‚ÇÅ‚â§L‚ÇÇ , L‚ÇÅ‚â±L‚ÇÇ) (L‚ÇÇ‚â§L‚ÇÉ@(m , L‚ÇÉ‚ÜíL‚ÇÇ) , L‚ÇÇ‚â±L‚ÇÉ) .proj‚ÇÇ n | A , e‚ÇÅ , e‚ÇÅ< = A , e‚ÇÅ , go
  where
  go : (e‚ÇÉ : Expression (Lang L‚ÇÉ) A) ‚Üí Lang L‚ÇÅ , Lang L‚ÇÉ ‚ä¢ e‚ÇÅ ‚â£ e‚ÇÉ ‚Üí size L‚ÇÉ e‚ÇÉ > n * size L‚ÇÅ e‚ÇÅ
  go e‚ÇÉ e‚ÇÅ‚âÖe‚ÇÉ with L‚ÇÉ‚ÜíL‚ÇÇ A e‚ÇÉ
  go e‚ÇÉ e‚ÇÅ‚âÖe‚ÇÉ | e‚ÇÇ , e‚ÇÇ‚âÖe‚ÇÉ , e‚ÇÇ‚â§e‚ÇÉ =
    begin-strict
      n * size L‚ÇÅ e‚ÇÅ
    <‚ü® ‚Ñï.*-cancelÀ°-< m (n * size L‚ÇÅ e‚ÇÅ) (size L‚ÇÉ e‚ÇÉ)
      (begin
        ‚Ñï.suc (m * (n * size L‚ÇÅ e‚ÇÅ))
      ‚â°‚ü® Eq.cong ‚Ñï.suc (‚Ñï.*-assoc m n (size L‚ÇÅ e‚ÇÅ)) ‚ü®
        ‚Ñï.suc (m * n * size L‚ÇÅ e‚ÇÅ)
      ‚â§‚ü® ‚Ñï.‚â§-trans (e‚ÇÅ< e‚ÇÇ (‚âÖ-trans e‚ÇÅ‚âÖe‚ÇÉ (‚âÖ-sym e‚ÇÇ‚âÖe‚ÇÉ))) e‚ÇÇ‚â§e‚ÇÉ ‚ü©
        m * size L‚ÇÉ e‚ÇÉ
      ‚àé)
    ‚ü©
      size L‚ÇÉ e‚ÇÉ
    ‚àé
    where
    open ‚Ñï.‚â§-Reasoning

<Size-irreflexive : {L‚ÇÅ L‚ÇÇ : SizedLang} ‚Üí L‚ÇÅ =Size L‚ÇÇ ‚Üí ¬¨ (L‚ÇÅ <Size L‚ÇÇ)
<Size-irreflexive {L‚ÇÅ} {L‚ÇÇ} (L‚ÇÅ‚â§L‚ÇÇ , (n , L‚ÇÅ‚ÜíL‚ÇÇ)) (L‚ÇÅ‚â§L‚ÇÇ' , L‚ÇÅ‚â±L‚ÇÇ) with L‚ÇÅ‚â±L‚ÇÇ n
<Size-irreflexive {L‚ÇÅ} {L‚ÇÇ} (L‚ÇÅ‚â§L‚ÇÇ , (n , L‚ÇÅ‚ÜíL‚ÇÇ)) (L‚ÇÅ‚â§L‚ÇÇ' , L‚ÇÅ‚â±L‚ÇÇ) | A , e‚ÇÅ , e‚ÇÇ< with L‚ÇÅ‚ÜíL‚ÇÇ A e‚ÇÅ
<Size-irreflexive {L‚ÇÅ} {L‚ÇÇ} (L‚ÇÅ‚â§L‚ÇÇ , (n , L‚ÇÅ‚ÜíL‚ÇÇ)) (L‚ÇÅ‚â§L‚ÇÇ' , L‚ÇÅ‚â±L‚ÇÇ) | A , e‚ÇÅ , e‚ÇÅ< | e‚ÇÇ , e‚ÇÇ‚âÖe‚ÇÅ , e‚ÇÇ‚â§e‚ÇÅ = ‚Ñï.n‚âÆn (size L‚ÇÇ e‚ÇÇ) (‚Ñï.‚â§-trans (‚Ñï.s‚â§s e‚ÇÇ‚â§e‚ÇÅ) (e‚ÇÅ< e‚ÇÇ (‚âÖ-sym e‚ÇÇ‚âÖe‚ÇÅ)))

<Size-Respects ≥ : {L‚ÇÅ L‚ÇÇ L‚ÇÉ : SizedLang} ‚Üí L‚ÇÇ =Size L‚ÇÉ ‚Üí L‚ÇÅ <Size L‚ÇÇ ‚Üí L‚ÇÅ <Size L‚ÇÉ
<Size-Respects ≥ {L‚ÇÅ} {L‚ÇÇ} {L‚ÇÉ} (L‚ÇÇ‚â§L‚ÇÉ@(m , L‚ÇÉ‚ÜíL‚ÇÇ) , L‚ÇÉ‚â§L‚ÇÇ) (L‚ÇÅ‚â§L‚ÇÇ , L‚ÇÅ‚â±L‚ÇÇ) .proj‚ÇÅ = ‚â§Size-transitive L‚ÇÅ‚â§L‚ÇÇ L‚ÇÇ‚â§L‚ÇÉ
<Size-Respects ≥ {L‚ÇÅ} {L‚ÇÇ} {L‚ÇÉ} (L‚ÇÇ‚â§L‚ÇÉ@(m , L‚ÇÉ‚ÜíL‚ÇÇ) , L‚ÇÉ‚â§L‚ÇÇ) (L‚ÇÅ‚â§L‚ÇÇ , L‚ÇÅ‚â±L‚ÇÇ) .proj‚ÇÇ n with L‚ÇÅ‚â±L‚ÇÇ (m * n)
<Size-Respects ≥ {L‚ÇÅ} {L‚ÇÇ} {L‚ÇÉ} (L‚ÇÇ‚â§L‚ÇÉ@(m , L‚ÇÉ‚ÜíL‚ÇÇ) , L‚ÇÉ‚â§L‚ÇÇ) (L‚ÇÅ‚â§L‚ÇÇ , L‚ÇÅ‚â±L‚ÇÇ) .proj‚ÇÇ n | A , e‚ÇÅ , e‚ÇÅ< = A , e‚ÇÅ , go
  where
  go : (e‚ÇÉ : Expression (Lang L‚ÇÉ) A) ‚Üí Lang L‚ÇÅ , Lang L‚ÇÉ ‚ä¢ e‚ÇÅ ‚â£ e‚ÇÉ ‚Üí size L‚ÇÉ e‚ÇÉ > n * size L‚ÇÅ e‚ÇÅ
  go e‚ÇÉ e‚ÇÅ‚âÖe‚ÇÉ with L‚ÇÉ‚ÜíL‚ÇÇ A e‚ÇÉ
  go e‚ÇÉ e‚ÇÅ‚âÖe‚ÇÉ | e‚ÇÇ , e‚ÇÇ‚âÖe‚ÇÉ , e‚ÇÇ‚â§e‚ÇÉ = ‚Ñï.*-cancelÀ°-< m (n * size L‚ÇÅ e‚ÇÅ) (size L‚ÇÉ e‚ÇÉ)
    (begin
      ‚Ñï.suc (m * (n * size L‚ÇÅ e‚ÇÅ))
    ‚â°‚ü® Eq.cong ‚Ñï.suc (‚Ñï.*-assoc m n (size L‚ÇÅ e‚ÇÅ)) ‚ü®
      ‚Ñï.suc (m * n * size L‚ÇÅ e‚ÇÅ)
    ‚â§‚ü® ‚Ñï.‚â§-trans (e‚ÇÅ< e‚ÇÇ (‚âÖ-trans e‚ÇÅ‚âÖe‚ÇÉ (‚âÖ-sym e‚ÇÇ‚âÖe‚ÇÉ))) e‚ÇÇ‚â§e‚ÇÉ ‚ü©
      m * size L‚ÇÉ e‚ÇÉ
    ‚àé)
    where
    open ‚Ñï.‚â§-Reasoning

<Size-RespectsÀ° : {L‚ÇÅ L‚ÇÇ L‚ÇÉ : SizedLang} ‚Üí L‚ÇÇ =Size L‚ÇÉ ‚Üí L‚ÇÇ <Size L‚ÇÅ ‚Üí L‚ÇÉ <Size L‚ÇÅ
<Size-RespectsÀ° {L‚ÇÅ} {L‚ÇÇ} {L‚ÇÉ} (L‚ÇÇ‚â§L‚ÇÉ , L‚ÇÉ‚â§L‚ÇÇ@(m , L‚ÇÇ‚ÜíL‚ÇÉ)) (L‚ÇÇ‚â§L‚ÇÅ , L‚ÇÇ‚â±L‚ÇÅ) .proj‚ÇÅ = ‚â§Size-transitive L‚ÇÉ‚â§L‚ÇÇ L‚ÇÇ‚â§L‚ÇÅ
<Size-RespectsÀ° {L‚ÇÅ} {L‚ÇÇ} {L‚ÇÉ} (L‚ÇÇ‚â§L‚ÇÉ , L‚ÇÉ‚â§L‚ÇÇ@(m , L‚ÇÇ‚ÜíL‚ÇÉ)) (L‚ÇÇ‚â§L‚ÇÅ , L‚ÇÇ‚â±L‚ÇÅ) .proj‚ÇÇ n with L‚ÇÇ‚â±L‚ÇÅ (m * n)
<Size-RespectsÀ° {L‚ÇÅ} {L‚ÇÇ} {L‚ÇÉ} (L‚ÇÇ‚â§L‚ÇÉ , L‚ÇÉ‚â§L‚ÇÇ@(m , L‚ÇÇ‚ÜíL‚ÇÉ)) (L‚ÇÇ‚â§L‚ÇÅ , L‚ÇÇ‚â±L‚ÇÅ) .proj‚ÇÇ n | A , e‚ÇÇ , e‚ÇÇ< with L‚ÇÇ‚ÜíL‚ÇÉ A e‚ÇÇ
<Size-RespectsÀ° {L‚ÇÅ} {L‚ÇÇ} {L‚ÇÉ} (L‚ÇÇ‚â§L‚ÇÉ , L‚ÇÉ‚â§L‚ÇÇ@(m , L‚ÇÇ‚ÜíL‚ÇÉ)) (L‚ÇÇ‚â§L‚ÇÅ , L‚ÇÇ‚â±L‚ÇÅ) .proj‚ÇÇ n | A , e‚ÇÇ , e‚ÇÇ< | e‚ÇÉ , e‚ÇÉ‚âÖe‚ÇÇ , e‚ÇÉ‚â§e‚ÇÇ = A , e‚ÇÉ , go
  where
  go : (e‚ÇÅ : Expression (Lang L‚ÇÅ) A) ‚Üí Lang L‚ÇÉ , Lang L‚ÇÅ ‚ä¢ e‚ÇÉ ‚â£ e‚ÇÅ ‚Üí size L‚ÇÅ e‚ÇÅ > n * size L‚ÇÉ e‚ÇÉ
  go e‚ÇÅ e‚ÇÉ‚âÖe‚ÇÅ =
    begin-strict
      n * size L‚ÇÉ e‚ÇÉ
    ‚â§‚ü® ‚Ñï.*-mono ≥-‚â§ n e‚ÇÉ‚â§e‚ÇÇ ‚ü©
      n * (m * size L‚ÇÇ e‚ÇÇ)
    ‚â°‚ü® ‚Ñï.*-assoc n m (size L‚ÇÇ e‚ÇÇ) ‚ü®
      n * m * size L‚ÇÇ e‚ÇÇ
    ‚â°‚ü® Eq.cong (_* size L‚ÇÇ e‚ÇÇ) (‚Ñï.*-comm n m) ‚ü©
      m * n * size L‚ÇÇ e‚ÇÇ
    <‚ü® e‚ÇÇ< e‚ÇÅ (‚âÖ-trans (‚âÖ-sym e‚ÇÉ‚âÖe‚ÇÇ) e‚ÇÉ‚âÖe‚ÇÅ) ‚ü©
      size L‚ÇÅ e‚ÇÅ
    ‚àé
    where
    open ‚Ñï.‚â§-Reasoning


=Size-IsEquivalence : IsEquivalence _=Size_
=Size-IsEquivalence = record
  { refl = =Size-reflexive
  ; sym = =Size-symmetric
  ; trans = =Size-transitive
  }

‚â§Size-IsPreOrder : IsPreorder _=Size_ _‚â§Size_
‚â§Size-IsPreOrder = record
  { isEquivalence = =Size-IsEquivalence
  ; reflexive = ‚â§Size-reflexive
  ; trans = ‚â§Size-transitive
  }

‚â§Size-IsPartialOrder : IsPartialOrder _=Size_ _‚â§Size_
‚â§Size-IsPartialOrder = record
  { isPreorder = ‚â§Size-IsPreOrder
  ; antisym = ‚â§Size-antisymmetric
  }

<Size-IsStrictPartialOrder : IsStrictPartialOrder _=Size_ _<Size_
<Size-IsStrictPartialOrder = record
  { isEquivalence = =Size-IsEquivalence
  ; trans = <Size-transitive
  ; irrefl = <Size-irreflexive
  ; <-resp-‚âà = <Size-Respects ≥ , <Size-RespectsÀ°
  }


<Size‚Üí‚â§Size : {L‚ÇÅ L‚ÇÇ : SizedLang} ‚Üí L‚ÇÅ <Size L‚ÇÇ ‚Üí L‚ÇÅ ‚â§Size L‚ÇÇ
<Size‚Üí‚â§Size (L‚ÇÅ‚â§L‚ÇÇ , L‚ÇÅ‚â±L‚ÇÇ) = L‚ÇÅ‚â§L‚ÇÇ

‚â±‚Üí¬¨‚â§ : {L‚ÇÅ L‚ÇÇ : SizedLang} ‚Üí L‚ÇÅ ‚â±Size L‚ÇÇ ‚Üí ¬¨ (L‚ÇÇ ‚â§Size L‚ÇÅ)
‚â±‚Üí¬¨‚â§ {L‚ÇÅ} {L‚ÇÇ} L‚ÇÅ‚â±L‚ÇÇ (n , L‚ÇÅ‚ÜíL‚ÇÇ) with L‚ÇÅ‚â±L‚ÇÇ n
‚â±‚Üí¬¨‚â§ {L‚ÇÅ} {L‚ÇÇ} L‚ÇÅ‚â±L‚ÇÇ (n , L‚ÇÅ‚ÜíL‚ÇÇ) | A , e‚ÇÅ , e‚ÇÅ< with L‚ÇÅ‚ÜíL‚ÇÇ A e‚ÇÅ
‚â±‚Üí¬¨‚â§ {L‚ÇÅ} {L‚ÇÇ} L‚ÇÅ‚â±L‚ÇÇ (n , L‚ÇÅ‚ÜíL‚ÇÇ) | A , e‚ÇÅ , e‚ÇÅ< | e‚ÇÇ , e‚ÇÇ‚âÖe‚ÇÅ , e‚ÇÇ‚â§e‚ÇÅ = ‚Ñï.n‚âÆn (size L‚ÇÇ e‚ÇÇ) (‚Ñï.‚â§-trans (‚Ñï.s‚â§s e‚ÇÇ‚â§e‚ÇÅ) (e‚ÇÅ< e‚ÇÇ (‚âÖ-sym e‚ÇÇ‚âÖe‚ÇÅ)))

‚â±‚Üí¬¨= : {L‚ÇÅ L‚ÇÇ : SizedLang} ‚Üí L‚ÇÅ ‚â±Size L‚ÇÇ ‚Üí ¬¨ (L‚ÇÅ =Size L‚ÇÇ)
‚â±‚Üí¬¨= L‚ÇÅ‚â†L‚ÇÇ (L‚ÇÅ‚â§L‚ÇÇ , L‚ÇÇ‚â§L‚ÇÅ) = ‚â±‚Üí¬¨‚â§ L‚ÇÅ‚â†L‚ÇÇ L‚ÇÇ‚â§L‚ÇÅ

‚â§‚Üí¬¨‚â± : {L‚ÇÅ L‚ÇÇ : SizedLang} ‚Üí L‚ÇÅ ‚â§Size L‚ÇÇ ‚Üí ¬¨ (L‚ÇÇ ‚â±Size L‚ÇÅ)
‚â§‚Üí¬¨‚â± {L‚ÇÅ} {L‚ÇÇ} (n , L‚ÇÇ‚ÜíL‚ÇÅ) L‚ÇÇ‚â±L‚ÇÅ with L‚ÇÇ‚â±L‚ÇÅ n
‚â§‚Üí¬¨‚â± {L‚ÇÅ} {L‚ÇÇ} (n , L‚ÇÇ‚ÜíL‚ÇÅ) L‚ÇÇ‚â±L‚ÇÅ | A , e‚ÇÇ , e‚ÇÇ< with L‚ÇÇ‚ÜíL‚ÇÅ A e‚ÇÇ
‚â§‚Üí¬¨‚â± {L‚ÇÅ} {L‚ÇÇ} (n , L‚ÇÇ‚ÜíL‚ÇÅ) L‚ÇÇ‚â±L‚ÇÅ | A , e‚ÇÇ , e‚ÇÇ< | e‚ÇÅ , e‚ÇÇ‚âÖe‚ÇÅ , e‚ÇÅ‚â§e‚ÇÇ = ‚Ñï.n‚âÆn (n * size L‚ÇÇ e‚ÇÇ) (‚Ñï.‚â§-trans (e‚ÇÇ< e‚ÇÅ (‚âÖ-sym e‚ÇÇ‚âÖe‚ÇÅ)) e‚ÇÅ‚â§e‚ÇÇ)

‚â§‚ÜíCompiler : {L‚ÇÅ L‚ÇÇ : SizedLang} ‚Üí L‚ÇÅ ‚â§Size L‚ÇÇ ‚Üí LanguageCompiler (Lang L‚ÇÇ) (Lang L‚ÇÅ)
‚â§‚ÜíCompiler (n , e‚ÇÇ‚Üíe‚ÇÅ) = record
  { compile = Œª {A} e‚ÇÇ ‚Üí proj‚ÇÅ (e‚ÇÇ‚Üíe‚ÇÅ A e‚ÇÇ)
  ; config-compiler = Œª {A} e‚ÇÇ ‚Üí record
    { to = ‚äÜ-index (proj‚ÇÇ (proj‚ÇÅ (proj‚ÇÇ (e‚ÇÇ‚Üíe‚ÇÅ A e‚ÇÇ))))
    ; from = ‚äÜ-index (proj‚ÇÅ (proj‚ÇÅ (proj‚ÇÇ (e‚ÇÇ‚Üíe‚ÇÅ A e‚ÇÇ))))
    }
  ; preserves = Œª {A} e‚ÇÇ ‚Üí ‚âÖ‚Üí‚âÖ[] (‚âÖ-sym (proj‚ÇÅ (proj‚ÇÇ (e‚ÇÇ‚Üíe‚ÇÅ A e‚ÇÇ))))
  }

¬¨Compiler‚Üí¬¨‚â§ : {L‚ÇÅ L‚ÇÇ : SizedLang} ‚Üí ¬¨ LanguageCompiler (Lang L‚ÇÅ) (Lang L‚ÇÇ) ‚Üí ¬¨ L‚ÇÇ ‚â§Size L‚ÇÅ
¬¨Compiler‚Üí¬¨‚â§ ¬¨Compiler L‚ÇÇ‚â§L‚ÇÅ = ¬¨Compiler (‚â§‚ÜíCompiler L‚ÇÇ‚â§L‚ÇÅ)

¬¨Compiler‚Üí‚â§ : {L‚ÇÅ L‚ÇÇ : SizedLang} ‚Üí {A : ùî∏} ‚Üí (e‚ÇÇ : Expression (Lang L‚ÇÇ) A) ‚Üí (‚àÄ (e‚ÇÅ : Expression (Lang L‚ÇÅ) A) ‚Üí ¬¨ Lang L‚ÇÅ , Lang L‚ÇÇ ‚ä¢ e‚ÇÅ ‚â£ e‚ÇÇ) ‚Üí L‚ÇÇ ‚â±Size L‚ÇÅ
¬¨Compiler‚Üí‚â§ {A = A} e‚ÇÇ e‚ÇÅ‚âáe‚ÇÇ n = A , e‚ÇÇ , Œª e‚ÇÅ e‚ÇÇ‚âÖe‚ÇÅ ‚Üí ‚ä•-elim (e‚ÇÅ‚âáe‚ÇÇ e‚ÇÅ (‚âÖ-sym e‚ÇÇ‚âÖe‚ÇÅ))
