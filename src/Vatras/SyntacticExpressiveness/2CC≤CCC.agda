open import Vatras.Framework.Definitions using (ùîΩ; ùî∏; atoms)
open import Vatras.Util.Nat.AtLeast as ‚Ñï‚â• using (‚Ñï‚â•; sucs)
open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_; refl; _‚â¢_)
open import Data.Nat as ‚Ñï using (‚Ñï; zero; suc; pred; _‚â§_; z‚â§n; s‚â§s; _<_; _>_; _+_; _‚à∏_; _*_; _<?_; _‚â§·µá_; _^_; _‚äî_)
module Vatras.SyntacticExpressiveness.2CC‚â§CCC (F : ùîΩ) where

open import Data.Bool as Bool using (true; false; if_then_else_)
import Data.Bool.Properties as Bool
open import Data.Empty using (‚ä•-elim)
import Data.Nat.Properties as ‚Ñï
open import Data.List as List using (List; []; _‚à∑_)
import Data.List.Membership.Propositional.Properties as List
import Data.List.Properties as List
open import Data.List.NonEmpty as List‚Å∫ using (_‚à∑_)
import Data.List.NonEmpty.Properties as List‚Å∫
open import Data.Product using (_√ó_; _,_)
open import Data.Unit using (tt)
open import Function using (_‚àò_; const)
open import Function.Bundles using (Equivalence)
open import Relation.Nullary.Decidable using (yes; no)
open import Size using (‚àû)

open import Vatras.Data.EqIndexedSet using (_‚âÖ_; _‚âÖ[_][_]_; ‚âÖ[]-sym; ‚âÖ[]‚Üí‚âÖ; _‚äÜ[_]_)
open import Vatras.Framework.Relation.Function using (to; from)
open import Vatras.Framework.Variants using (Rose)
import Vatras.Util.List as List
open import Vatras.Lang.All
open import Vatras.Framework.Compiler using (LanguageCompiler)
open import Vatras.SyntacticExpressiveness.Sizes using (sizeRose; Sized2CC; size2CC; SizedCCC; sizeCCC)

>‚áí¬¨‚â§·µá : ‚àÄ {m n : ‚Ñï} ‚Üí m > n ‚Üí Bool.T (Bool.not (m ‚â§·µá n))
>‚áí¬¨‚â§·µá (s‚â§s z‚â§n) = tt
>‚áí¬¨‚â§·µá (s‚â§s (s‚â§s m>n)) = >‚áí¬¨‚â§·µá (s‚â§s m>n)

conf : CCC.Configuration F ‚Üí 2CC.Configuration (F √ó ‚Ñï)
conf config (f , n) = config f ‚â§·µá n

fnoc-rec : ‚Ñï ‚Üí ‚Ñï ‚Üí 2CC.Configuration (F √ó ‚Ñï) ‚Üí CCC.Configuration F
fnoc-rec zero n config f = n
fnoc-rec (suc limit) n config f with config (f , n)
fnoc-rec (suc limit) n config f | true = n
fnoc-rec (suc limit) n config f | false = fnoc-rec limit (suc n) config f

fnoc : ‚Ñï ‚Üí 2CC.Configuration (F √ó ‚Ñï) ‚Üí CCC.Configuration F
fnoc limit config f = fnoc-rec limit zero config f

fnoc-rec-false :
  ‚àÄ (config : 2CC.Configuration (F √ó ‚Ñï)) (D : F)
  ‚Üí (limit n k : ‚Ñï)
  ‚Üí k < fnoc-rec limit n config D
  ‚Üí (‚àÄ (k' : ‚Ñï) ‚Üí k' < n ‚Üí config (D , k') ‚â° false)
  ‚Üí config (D , k) ‚â° false
fnoc-rec-false config D zero n k k<fnoc config‚â°false = config‚â°false k k<fnoc
fnoc-rec-false config D (suc limit) n k k<fnoc config‚â°false with config (D , n) in config-n
fnoc-rec-false config D (suc limit) n k k<fnoc config‚â°false | true = config‚â°false k k<fnoc
fnoc-rec-false config D (suc limit) n k k<fnoc config‚â°false | false with n ‚Ñï.‚âü k
fnoc-rec-false config D (suc limit) n .n k<fnoc config‚â°false | false | yes refl = config-n
fnoc-rec-false config D (suc limit) n k k<fnoc config‚â°false | false | no n‚â¢k' = fnoc-rec-false config D limit (suc n) k k<fnoc lemma
  where
  lemma : ‚àÄ (k' : ‚Ñï) ‚Üí k' < suc n ‚Üí config (D , k') ‚â° false
  lemma k' k'<n with k' ‚Ñï.‚âü n
  lemma k' k'<n | yes refl = config-n
  lemma k' (s‚â§s k'<n) | no k'‚â¢n = config‚â°false k' (‚Ñï.‚â§‚àß‚â¢‚áí< k'<n k'‚â¢n)

fnoc-rec-true :
  ‚àÄ (config : 2CC.Configuration (F √ó ‚Ñï))
  ‚Üí (D : F)
  ‚Üí (limit n : ‚Ñï)
  ‚Üí fnoc-rec limit n config D < limit + n
  ‚Üí config (D , fnoc-rec limit n config D) ‚â° true
fnoc-rec-true config D zero n fnoc<limit+n = ‚ä•-elim (‚Ñï.n‚âÆn n fnoc<limit+n)
fnoc-rec-true config D (suc limit) n fnoc<limit+n with config (D , n) in config-n
fnoc-rec-true config D (suc limit) n fnoc<limit+n | true = config-n
fnoc-rec-true config D (suc limit) n fnoc<limit+n | false = fnoc-rec-true config D limit (suc n) (‚Ñï.‚â§-trans fnoc<limit+n (‚Ñï.‚â§-reflexive (Eq.sym (‚Ñï.+-suc limit n))))

module _ {A : ùî∏} where
  1‚â§sizeCCC : ‚àÄ {i} ‚Üí (e : CCC.CCC F i A) ‚Üí 1 ‚â§ sizeCCC F A e
  1‚â§sizeCCC (a CCC.CCC.-< cs >-) = s‚â§s z‚â§n
  1‚â§sizeCCC (D CCC.CCC.‚ü® cs ‚ü©) = s‚â§s z‚â§n

  max-dimension : ‚àÄ {i} ‚Üí CCC.CCC F i A ‚Üí ‚Ñï
  max-dimension (a CCC.CCC.-< cs >-) = List.max (List.map max-dimension cs)
  max-dimension (D CCC.CCC.‚ü® cs ‚ü©) = List‚Å∫.length cs ‚äî List.max (List.map max-dimension (List‚Å∫.toList cs))

  choice-list : F ‚Üí ‚Ñï ‚Üí 2CC.2CC (F √ó ‚Ñï) ‚àû A ‚Üí List (2CC.2CC (F √ó ‚Ñï) ‚àû A) ‚Üí 2CC.2CC (F √ó ‚Ñï) ‚àû A
  choice-list D n c‚ÇÅ [] = c‚ÇÅ
  choice-list D n c‚ÇÅ (c‚ÇÇ ‚à∑ []) = (D , n) 2CC.2CC.‚ü® c‚ÇÅ , c‚ÇÇ ‚ü©
  choice-list D n c‚ÇÅ (c‚ÇÇ ‚à∑ c‚ÇÉ ‚à∑ cs) = (D , n) 2CC.2CC.‚ü® c‚ÇÅ , choice-list D (suc n) c‚ÇÇ (c‚ÇÉ ‚à∑ cs) ‚ü©

  choice-list-size :
    ‚àÄ (D : F) (n : ‚Ñï)
    ‚Üí (c : 2CC.2CC (F √ó ‚Ñï) ‚àû A)
    ‚Üí (cs : List (2CC.2CC (F √ó ‚Ñï) ‚àû A))
    ‚Üí size2CC (F √ó ‚Ñï) A (choice-list D n c cs) ‚â° List.length cs + List.sum (List.map (size2CC (F √ó ‚Ñï) A) (c ‚à∑ cs))
  choice-list-size D n c‚ÇÅ [] = Eq.sym (‚Ñï.+-identity ≥ (size2CC (F √ó ‚Ñï) A c‚ÇÅ))
  choice-list-size D n c‚ÇÅ (c‚ÇÇ ‚à∑ []) =
    begin
      size2CC (F √ó ‚Ñï) A (choice-list D n c‚ÇÅ (c‚ÇÇ ‚à∑ []))
    ‚â°‚ü®‚ü©
      size2CC (F √ó ‚Ñï) A ((D , n) 2CC.2CC.‚ü® c‚ÇÅ , c‚ÇÇ ‚ü©)
    ‚â°‚ü®‚ü©
      suc (size2CC (F √ó ‚Ñï) A c‚ÇÅ + size2CC (F √ó ‚Ñï) A c‚ÇÇ)
    ‚â°‚ü® Eq.cong (Œª x ‚Üí suc (size2CC (F √ó ‚Ñï) A c‚ÇÅ + x)) (‚Ñï.+-identity ≥ (size2CC (F √ó ‚Ñï) A c‚ÇÇ)) ‚ü®
      suc (size2CC (F √ó ‚Ñï) A c‚ÇÅ + (size2CC (F √ó ‚Ñï) A c‚ÇÇ + 0))
    ‚â°‚ü®‚ü©
      List.length (c‚ÇÇ ‚à∑ []) + List.sum (List.map (size2CC (F √ó ‚Ñï) A) (c‚ÇÅ ‚à∑ c‚ÇÇ ‚à∑ []))
    ‚àé
    where
    open Eq.‚â°-Reasoning
  choice-list-size D n c‚ÇÅ (c‚ÇÇ ‚à∑ c‚ÇÉ ‚à∑ cs) =
    begin
      size2CC (F √ó ‚Ñï) A (choice-list D n c‚ÇÅ (c‚ÇÇ ‚à∑ c‚ÇÉ ‚à∑ cs))
    ‚â°‚ü®‚ü©
      size2CC (F √ó ‚Ñï) A ((D , n) 2CC.2CC.‚ü® c‚ÇÅ , choice-list D (suc n) c‚ÇÇ (c‚ÇÉ ‚à∑ cs) ‚ü©)
    ‚â°‚ü®‚ü©
      suc (size2CC (F √ó ‚Ñï) A c‚ÇÅ + size2CC (F √ó ‚Ñï) A (choice-list D (suc n) c‚ÇÇ (c‚ÇÉ ‚à∑ cs)))
    ‚â°‚ü® Eq.cong (Œª x ‚Üí suc (size2CC (F √ó ‚Ñï) A c‚ÇÅ + x)) (choice-list-size D (suc n) c‚ÇÇ (c‚ÇÉ ‚à∑ cs)) ‚ü©
      suc (size2CC (F √ó ‚Ñï) A c‚ÇÅ + (List.length (c‚ÇÉ ‚à∑ cs) + List.sum (List.map (size2CC (F √ó ‚Ñï) A) (c‚ÇÇ ‚à∑ c‚ÇÉ ‚à∑ cs))))
    ‚â°‚ü® Eq.cong suc (‚Ñï.+-assoc (size2CC (F √ó ‚Ñï) A c‚ÇÅ) (List.length (c‚ÇÉ ‚à∑ cs)) (List.sum (List.map (size2CC (F √ó ‚Ñï) A) (c‚ÇÇ ‚à∑ c‚ÇÉ ‚à∑ cs)))) ‚ü®
      suc (size2CC (F √ó ‚Ñï) A c‚ÇÅ + List.length (c‚ÇÉ ‚à∑ cs) + List.sum (List.map (size2CC (F √ó ‚Ñï) A) (c‚ÇÇ ‚à∑ c‚ÇÉ ‚à∑ cs)))
    ‚â°‚ü® Eq.cong (Œª x ‚Üí suc (x + List.sum (List.map (size2CC (F √ó ‚Ñï) A) (c‚ÇÇ ‚à∑ c‚ÇÉ ‚à∑ cs)))) (‚Ñï.+-comm (size2CC (F √ó ‚Ñï) A c‚ÇÅ) (List.length (c‚ÇÉ ‚à∑ cs))) ‚ü©
      suc (List.length (c‚ÇÉ ‚à∑ cs) + size2CC (F √ó ‚Ñï) A c‚ÇÅ + List.sum (List.map (size2CC (F √ó ‚Ñï) A) (c‚ÇÇ ‚à∑ c‚ÇÉ ‚à∑ cs)))
    ‚â°‚ü® Eq.cong suc (‚Ñï.+-assoc (List.length (c‚ÇÉ ‚à∑ cs)) (size2CC (F √ó ‚Ñï) A c‚ÇÅ) (List.sum (List.map (size2CC (F √ó ‚Ñï) A) (c‚ÇÇ ‚à∑ c‚ÇÉ ‚à∑ cs)))) ‚ü©
      suc (List.length (c‚ÇÉ ‚à∑ cs) + (size2CC (F √ó ‚Ñï) A c‚ÇÅ + List.sum (List.map (size2CC (F √ó ‚Ñï) A) (c‚ÇÇ ‚à∑ c‚ÇÉ ‚à∑ cs))))
    ‚â°‚ü®‚ü©
      List.length (c‚ÇÇ ‚à∑ c‚ÇÉ ‚à∑ cs) + List.sum (List.map (size2CC (F √ó ‚Ñï) A) (c‚ÇÅ ‚à∑ c‚ÇÇ ‚à∑ c‚ÇÉ ‚à∑ cs))
    ‚àé
    where
    open Eq.‚â°-Reasoning

  translate : ‚àÄ {i}
    ‚Üí CCC.CCC F i A
    ‚Üí 2CC.2CC (F √ó ‚Ñï) ‚àû A
  translate (a CCC.CCC.-< cs >-) = a 2CC.2CC.-< List.map translate cs >-
  translate (D CCC.CCC.‚ü® c ‚à∑ cs ‚ü©) = choice-list D zero (translate c) (List.map translate cs)

  translate-size : ‚àÄ {i}
    ‚Üí (ccc : CCC.CCC F i A)
    ‚Üí size2CC (F √ó ‚Ñï) A (translate ccc) < 2 * sizeCCC F A ccc
  translate-size (a CCC.CCC.-< cs >-) =
    begin-strict
      size2CC (F √ó ‚Ñï) A (translate (a CCC.CCC.-< cs >-))
    ‚â°‚ü®‚ü©
      size2CC (F √ó ‚Ñï) A (a 2CC.2CC.-< List.map translate cs >-)
    ‚â°‚ü®‚ü©
      suc (List.sum (List.map (size2CC (F √ó ‚Ñï) A) (List.map translate cs)))
    ‚â°‚ü® Eq.cong (Œª x ‚Üí suc (List.sum x)) (List.map-‚àò cs) ‚ü®
      suc (List.sum (List.map (size2CC (F √ó ‚Ñï) A ‚àò translate) cs))
    ‚â§‚ü® s‚â§s (List.sum-map-‚â§ (size2CC (F √ó ‚Ñï) A ‚àò translate) (Œª c ‚Üí 2 * sizeCCC F A c) cs (‚Ñï.<‚áí‚â§ ‚àò translate-size)) ‚ü©
      suc (List.sum (List.map (Œª c ‚Üí 2 * sizeCCC F A c) cs))
    ‚â°‚ü® Eq.cong (Œª x ‚Üí suc (List.sum x)) (List.map-‚àò cs) ‚ü©
      suc (List.sum (List.map (2 *_) (List.map (sizeCCC F A) cs)))
    ‚â°‚ü® Eq.cong suc (List.sum-* 2 (List.map (sizeCCC F A) cs)) ‚ü©
      suc (2 * (List.sum (List.map (sizeCCC F A) cs)))
    ‚â°‚ü®‚ü©
      1 + 2 * (List.sum (List.map (sizeCCC F A) cs))
    <‚ü® ‚Ñï.+-monoÀ°-< (2 * (List.sum (List.map (sizeCCC F A) cs))) {x = 1} {y = 2} (‚Ñï.n<1+n 1) ‚ü©
      2 + 2 * (List.sum (List.map (sizeCCC F A) cs))
    ‚â°‚ü® ‚Ñï.*-suc 2 (List.sum (List.map (sizeCCC F A) cs)) ‚ü®
      2 * (suc (List.sum (List.map (sizeCCC F A) cs)))
    ‚â°‚ü®‚ü©
      2 * sizeCCC F A (a CCC.CCC.-< cs >-)
    ‚àé
    where
    open ‚Ñï.‚â§-Reasoning
  translate-size (D CCC.CCC.‚ü® c ‚à∑ cs ‚ü©) =
    begin-strict
      size2CC (F √ó ‚Ñï) A (translate (D CCC.CCC.‚ü® c ‚à∑ cs ‚ü©))
    ‚â°‚ü®‚ü©
      size2CC (F √ó ‚Ñï) A (choice-list D zero (translate c) (List.map translate cs))
    ‚â°‚ü® choice-list-size D zero (translate c) (List.map translate cs) ‚ü©
      List.length (List.map translate cs) + List.sum (List.map (size2CC (F √ó ‚Ñï) A) (List.map translate (c ‚à∑ cs)))
    ‚â°‚ü® Eq.cong (Œª x ‚Üí List.length (List.map translate cs) + List.sum x) (List.map-‚àò (c ‚à∑ cs)) ‚ü®
      List.length (List.map translate cs) + List.sum (List.map (size2CC (F √ó ‚Ñï) A ‚àò translate) (c ‚à∑ cs))
    ‚â§‚ü® ‚Ñï.+-mono ≥-‚â§ (List.length (List.map translate cs)) (List.sum-map-< (size2CC (F √ó ‚Ñï) A ‚àò translate) (Œª c ‚Üí 2 * sizeCCC F A c) (c ‚à∑ cs) translate-size) ‚ü©
      List.length (List.map translate cs) + (List.sum (List.map (Œª c ‚Üí 2 * sizeCCC F A c) (c ‚à∑ cs)) ‚à∏ List.length (c ‚à∑ cs))
    ‚â°‚ü® Eq.cong (Œª x ‚Üí List.length (List.map translate cs) + (List.sum x ‚à∏ List.length (c ‚à∑ cs))) (List.map-‚àò {g = 2 *_} {f = sizeCCC F A} (c ‚à∑ cs)) ‚ü©
      List.length (List.map translate cs) + (List.sum (List.map (2 *_) (List.map (sizeCCC F A) (c ‚à∑ cs))) ‚à∏ List.length (c ‚à∑ cs))
    ‚â°‚ü® Eq.cong (Œª x ‚Üí List.length (List.map translate cs) + (x ‚à∏ List.length (c ‚à∑ cs))) (List.sum-* 2 (List.map (sizeCCC F A) (c ‚à∑ cs))) ‚ü©
      List.length (List.map translate cs) + (2 * List.sum (List.map (sizeCCC F A) (c ‚à∑ cs)) ‚à∏ List.length (c ‚à∑ cs))
    ‚â°‚ü® Eq.cong (_+ (2 * List.sum (List.map (sizeCCC F A) (c ‚à∑ cs)) ‚à∏ List.length (c ‚à∑ cs))) (List.length-map translate cs) ‚ü©
      List.length cs + (2 * List.sum (List.map (sizeCCC F A) (c ‚à∑ cs)) ‚à∏ List.length (c ‚à∑ cs))
    ‚â°‚ü® ‚Ñï.+-‚à∏-assoc (List.length cs) (
      begin
        List.length (c ‚à∑ cs)
      ‚â°‚ü® ‚Ñï.*-identity ≥ (List.length (c ‚à∑ cs)) ‚ü®
        List.length (c ‚à∑ cs) * 1
      ‚â°‚ü® List.sum-replicate (List.length (c ‚à∑ cs)) 1 ‚ü®
        List.sum (List.replicate (List.length (c ‚à∑ cs)) 1)
      ‚â°‚ü® Eq.cong List.sum (List.map-const 1 (c ‚à∑ cs)) ‚ü®
        List.sum (List.map (const 1) (c ‚à∑ cs))
      ‚â§‚ü® List.sum-map-‚â§ (const 1) (sizeCCC F A) (c ‚à∑ cs) 1‚â§sizeCCC ‚ü©
        List.sum (List.map (sizeCCC F A) (c ‚à∑ cs))
      ‚â§‚ü® ‚Ñï.m‚â§n*m (List.sum (List.map (sizeCCC F A) (c ‚à∑ cs))) 2 ‚ü©
        2 * List.sum (List.map (sizeCCC F A) (c ‚à∑ cs))
      ‚àé)
    ‚ü®
      (List.length cs + 2 * List.sum (List.map (sizeCCC F A) (c ‚à∑ cs))) ‚à∏ List.length (c ‚à∑ cs)
    ‚â§‚ü® ‚Ñï.‚à∏-mono ≥-‚â§ (List.length cs + 2 * List.sum (List.map (sizeCCC F A) (c ‚à∑ cs))) (‚Ñï.n‚â§1+n (List.length cs)) ‚ü©
      (List.length cs + 2 * List.sum (List.map (sizeCCC F A) (c ‚à∑ cs))) ‚à∏ List.length cs
    ‚â°‚ü® ‚Ñï.m+n‚à∏m‚â°n (List.length cs) (2 * List.sum (List.map (sizeCCC F A) (c ‚à∑ cs))) ‚ü©
      2 * List.sum (List.map (sizeCCC F A) (c ‚à∑ cs))
    <‚ü® ‚Ñï.*-mono ≥-< 2 (‚Ñï.n<1+n (List.sum (List.map (sizeCCC F A) (c ‚à∑ cs)))) ‚ü©
      2 * suc (List.sum (List.map (sizeCCC F A) (c ‚à∑ cs)))
    ‚â°‚ü®‚ü©
      2 * sizeCCC F A (D CCC.CCC.‚ü® c ‚à∑ cs ‚ü©)
    ‚àé
    where
    open ‚Ñï.‚â§-Reasoning

  translate-preserves-‚äÜ : ‚àÄ {i}
    ‚Üí (e : CCC.CCC F i A)
    ‚Üí (limit : ‚Ñï)
    ‚Üí max-dimension e ‚â§ limit
    ‚Üí 2CC.‚ü¶ translate e ‚üß ‚äÜ[ fnoc limit ] CCC.‚ü¶ e ‚üß
  translate-preserves-‚äÜ e@(a CCC.CCC.-< cs >-) limit max-dim‚â§limit config =
    begin
      2CC.‚ü¶ translate (a CCC.CCC.-< cs >-) ‚üß config
    ‚â°‚ü®‚ü©
      2CC.‚ü¶ a 2CC.2CC.-< List.map translate cs >- ‚üß config
    ‚â°‚ü®‚ü©
      a Rose.-< List.map (Œª c ‚Üí 2CC.‚ü¶ c ‚üß config) (List.map translate cs) >-
    ‚â°‚ü® Eq.cong (a Rose.-<_>-) (List.map-‚àò cs) ‚ü®
      a Rose.-< List.map (Œª c ‚Üí 2CC.‚ü¶ translate c ‚üß config) cs >-
    ‚â°‚ü® Eq.cong (a Rose.-<_>-) (List.map-cong-with‚àà cs (Œª c' c'‚ààcs ‚Üí translate-preserves-‚äÜ c' limit (‚Ñï.‚â§-trans (List.max-‚â§ (max-dimension c') (List.map max-dimension cs) (List.‚àà-map‚Å∫ max-dimension c'‚ààcs)) max-dim‚â§limit) config)) ‚ü©
      a Rose.-< List.map (Œª c ‚Üí CCC.‚ü¶ c ‚üß (fnoc limit config)) cs >-
    ‚â°‚ü®‚ü©
      CCC.‚ü¶ a CCC.CCC.-< cs >- ‚üß (fnoc limit config)
    ‚àé
    where
    open Eq.‚â°-Reasoning
  translate-preserves-‚äÜ (D CCC.CCC.‚ü® c ‚à∑ cs ‚ü©) limit max-dim‚â§limit config =
    begin
      2CC.‚ü¶ translate (D CCC.CCC.‚ü® c ‚à∑ cs ‚ü©) ‚üß config
    ‚â°‚ü®‚ü©
      2CC.‚ü¶ choice-list D zero (translate c) (List.map translate cs) ‚üß config
    ‚â°‚ü® lemma (fnoc limit config D) zero c cs (‚Ñï.‚â§-trans (‚Ñï.m‚â§m‚äîn (List‚Å∫.length (c ‚à∑ cs)) (List.max (List.map max-dimension (c ‚à∑ cs)))) max-dim‚â§limit) (Œª k' k'<fnoc ‚Üí fnoc-rec-false config D limit zero k' k'<fnoc (Œª k' k'<0 ‚Üí ‚ä•-elim (‚Ñï.n‚âÆ0 k'<0))) (Œª fnoc<limit ‚Üí fnoc-rec-true config D limit zero (‚Ñï.‚â§-trans fnoc<limit (‚Ñï.‚â§-reflexive (Eq.sym (‚Ñï.+-identity ≥ limit))))) ‚ü©
      2CC.‚ü¶ List.find-or-last (fnoc limit config D) (List‚Å∫.map translate (c ‚à∑ cs)) ‚üß config
    ‚â°‚ü® List.map-find-or-last (Œª c ‚Üí 2CC.‚ü¶ c ‚üß config) (fnoc limit config D) (List‚Å∫.map translate (c ‚à∑ cs)) ‚ü©
      List.find-or-last (fnoc limit config D) (List‚Å∫.map (Œª c ‚Üí 2CC.‚ü¶ c ‚üß config) (List‚Å∫.map translate (c ‚à∑ cs)))
    ‚â°‚ü® Eq.cong (Œª x ‚Üí List.find-or-last (fnoc limit config D) x) (List‚Å∫.map-‚àò (c ‚à∑ cs)) ‚ü®
      List.find-or-last (fnoc limit config D) (List‚Å∫.map (Œª c ‚Üí 2CC.‚ü¶ translate c ‚üß config) (c ‚à∑ cs))
    ‚â°‚ü® Eq.cong (Œª x ‚Üí List.find-or-last (fnoc limit config D) x) (Eq.cong‚ÇÇ _‚à∑_ (translate-preserves-‚äÜ c limit (‚Ñï.‚â§-trans (‚Ñï.m‚â§m‚äîn (max-dimension c) (List.max (List.map max-dimension cs))) (‚Ñï.‚â§-trans (‚Ñï.m‚â§n‚äîm (List‚Å∫.length (c ‚à∑ cs)) (List.max (List.map max-dimension (c ‚à∑ cs)))) max-dim‚â§limit)) config) (List.map-cong-with‚àà cs Œª c' c'‚ààcs ‚Üí translate-preserves-‚äÜ c' limit (‚Ñï.‚â§-trans (List.max-‚â§ (max-dimension c') (List.map max-dimension cs) (List.‚àà-map‚Å∫ max-dimension c'‚ààcs)) (‚Ñï.‚â§-trans (‚Ñï.m‚â§n‚äîm (max-dimension c) (List.max (List.map max-dimension cs))) (‚Ñï.‚â§-trans (‚Ñï.m‚â§n‚äîm (List‚Å∫.length (c ‚à∑ cs)) (List.max (max-dimension c ‚à∑ List.map max-dimension cs))) max-dim‚â§limit))) config)) ‚ü©
      List.find-or-last (fnoc limit config D) (CCC.‚ü¶ c ‚üß (fnoc limit config) ‚à∑ List.map (Œª c ‚Üí CCC.‚ü¶ c ‚üß (fnoc limit config)) cs)
    ‚â°‚ü®‚ü©
      List.find-or-last (fnoc limit config D) (List‚Å∫.map (Œª c ‚Üí CCC.‚ü¶ c ‚üß (fnoc limit config)) (c ‚à∑ cs))
    ‚â°‚ü® List.map-find-or-last (Œª c ‚Üí CCC.‚ü¶ c ‚üß (fnoc limit config)) (fnoc limit config D) (c ‚à∑ cs) ‚ü®
      CCC.‚ü¶ List.find-or-last (fnoc limit config D) (c ‚à∑ cs) ‚üß (fnoc limit config)
    ‚â°‚ü®‚ü©
      CCC.‚ü¶ D CCC.CCC.‚ü® c ‚à∑ cs ‚ü© ‚üß (fnoc limit config)
    ‚àé
    where
    open Eq.‚â°-Reasoning

    lemma : ‚àÄ {i}
      ‚Üí (m k : ‚Ñï)
      ‚Üí (c : CCC.CCC F i A)
      ‚Üí (cs : List (CCC.CCC F i A))
      ‚Üí k + List.length cs < limit
      ‚Üí (‚àÄ k' ‚Üí k' < k + m ‚Üí config (D , k') ‚â° false)
      ‚Üí (k + m < limit ‚Üí config (D , k + m) ‚â° true)
      ‚Üí 2CC.‚ü¶ choice-list D k (translate c) (List.map translate cs) ‚üß config ‚â° 2CC.‚ü¶ List.find-or-last m (List‚Å∫.map translate (c ‚à∑ cs)) ‚üß config
    lemma zero k c‚ÇÅ [] k+cs<limit config‚â°false config‚â°true = refl
    lemma zero k c‚ÇÅ (c‚ÇÇ ‚à∑ []) k+cs<limit config‚â°false config‚â°true =
      begin
        2CC.‚ü¶ choice-list D k (translate c‚ÇÅ) (List.map translate (c‚ÇÇ ‚à∑ [])) ‚üß config
      ‚â°‚ü®‚ü©
        2CC.‚ü¶ (D , k) 2CC.2CC.‚ü® translate c‚ÇÅ , translate c‚ÇÇ ‚ü© ‚üß config
      ‚â°‚ü®‚ü©
        (if config (D , k) then 2CC.‚ü¶ translate c‚ÇÅ ‚üß config else 2CC.‚ü¶ translate c‚ÇÇ ‚üß config)
      ‚â°‚ü® Eq.cong (Œª x ‚Üí if x then 2CC.‚ü¶ translate c‚ÇÅ ‚üß config else 2CC.‚ü¶ translate c‚ÇÇ ‚üß config) (Eq.subst (Œª x ‚Üí config (D , x) ‚â° true) (‚Ñï.+-identity ≥ k) (config‚â°true (‚Ñï.‚â§-<-trans (‚Ñï.+-mono ≥-‚â§ k z‚â§n) k+cs<limit))) ‚ü©
        (if true then 2CC.‚ü¶ translate c‚ÇÅ ‚üß config else 2CC.‚ü¶ translate c‚ÇÇ ‚üß config)
      ‚â°‚ü®‚ü©
        2CC.‚ü¶ translate c‚ÇÅ ‚üß config
      ‚â°‚ü®‚ü©
        2CC.‚ü¶ List.find-or-last zero (List‚Å∫.map translate (c‚ÇÅ ‚à∑ c‚ÇÇ ‚à∑ [])) ‚üß config
      ‚àé
    lemma zero k c‚ÇÅ (c‚ÇÇ ‚à∑ c‚ÇÉ ‚à∑ cs) k+cs<limit config‚â°false config‚â°true =
      begin
        2CC.‚ü¶ choice-list D k (translate c‚ÇÅ) (List.map translate (c‚ÇÇ ‚à∑ c‚ÇÉ ‚à∑ cs)) ‚üß config
      ‚â°‚ü®‚ü©
        2CC.‚ü¶ (D , k) 2CC.2CC.‚ü® translate c‚ÇÅ , choice-list D (suc k) (translate c‚ÇÇ) (List.map translate (c‚ÇÉ ‚à∑ cs)) ‚ü© ‚üß config
      ‚â°‚ü®‚ü©
        (if config (D , k) then 2CC.‚ü¶ translate c‚ÇÅ ‚üß config else 2CC.‚ü¶ choice-list D (suc k) (translate c‚ÇÇ) (List.map translate (c‚ÇÉ ‚à∑ cs)) ‚üß config)
      ‚â°‚ü® Eq.cong (Œª x ‚Üí if x then 2CC.‚ü¶ translate c‚ÇÅ ‚üß config else 2CC.‚ü¶ choice-list D (suc k) (translate c‚ÇÇ) (List.map translate (c‚ÇÉ ‚à∑ cs)) ‚üß config) (Eq.subst (Œª x ‚Üí config (D , x) ‚â° true) (‚Ñï.+-identity ≥ k) (config‚â°true (‚Ñï.‚â§-<-trans (‚Ñï.+-mono ≥-‚â§ k z‚â§n) k+cs<limit))) ‚ü©
        (if true then 2CC.‚ü¶ translate c‚ÇÅ ‚üß config else 2CC.‚ü¶ choice-list D (suc k) (translate c‚ÇÇ) (List.map translate (c‚ÇÉ ‚à∑ cs)) ‚üß config)
      ‚â°‚ü®‚ü©
        2CC.‚ü¶ translate c‚ÇÅ ‚üß config
      ‚â°‚ü®‚ü©
        2CC.‚ü¶ List.find-or-last zero (List‚Å∫.map translate (c‚ÇÅ ‚à∑ c‚ÇÇ ‚à∑ c‚ÇÉ ‚à∑ cs)) ‚üß config
      ‚àé
    lemma (suc m) k c‚ÇÅ [] k+cs<limit config‚â°false config‚â°true = refl
    lemma (suc m) k c‚ÇÅ (c‚ÇÇ ‚à∑ []) k+cs<limit config‚â°false config‚â°true =
      begin
        2CC.‚ü¶ choice-list D k (translate c‚ÇÅ) (List.map translate (c‚ÇÇ ‚à∑ [])) ‚üß config
      ‚â°‚ü®‚ü©
        2CC.‚ü¶ (D , k) 2CC.2CC.‚ü® translate c‚ÇÅ , translate c‚ÇÇ ‚ü© ‚üß config
      ‚â°‚ü®‚ü©
        (if config (D , k) then 2CC.‚ü¶ translate c‚ÇÅ ‚üß config else 2CC.‚ü¶ translate c‚ÇÇ ‚üß config)
      ‚â°‚ü® Eq.cong (Œª x ‚Üí if x then 2CC.‚ü¶ translate c‚ÇÅ ‚üß config else 2CC.‚ü¶ translate c‚ÇÇ ‚üß config) (config‚â°false k (‚Ñï.m<m+n k (s‚â§s z‚â§n))) ‚ü©
        (if false then 2CC.‚ü¶ translate c‚ÇÅ ‚üß config else 2CC.‚ü¶ translate c‚ÇÇ ‚üß config)
      ‚â°‚ü®‚ü©
        2CC.‚ü¶ translate c‚ÇÇ ‚üß config
      ‚â°‚ü®‚ü©
        2CC.‚ü¶ List.find-or-last (suc m) (List‚Å∫.map translate (c‚ÇÅ ‚à∑ c‚ÇÇ ‚à∑ [])) ‚üß config
      ‚àé
    lemma (suc m) k c‚ÇÅ (c‚ÇÇ ‚à∑ c‚ÇÉ ‚à∑ cs) k+cs<limit config‚â°false config‚â°true =
      begin
        2CC.‚ü¶ choice-list D k (translate c‚ÇÅ) (List.map translate (c‚ÇÇ ‚à∑ c‚ÇÉ ‚à∑ cs)) ‚üß config
      ‚â°‚ü®‚ü©
        2CC.‚ü¶ (D , k) 2CC.2CC.‚ü® translate c‚ÇÅ , choice-list D (suc k) (translate c‚ÇÇ) (List.map translate (c‚ÇÉ ‚à∑ cs)) ‚ü© ‚üß config
      ‚â°‚ü®‚ü©
        (if config (D , k) then 2CC.‚ü¶ translate c‚ÇÅ ‚üß config else 2CC.‚ü¶ choice-list D (suc k) (translate c‚ÇÇ) (List.map translate (c‚ÇÉ ‚à∑ cs)) ‚üß config)
      ‚â°‚ü® Eq.cong (Œª x ‚Üí if x then 2CC.‚ü¶ translate c‚ÇÅ ‚üß config else 2CC.‚ü¶ choice-list D (suc k) (translate c‚ÇÇ) (List.map translate (c‚ÇÉ ‚à∑ cs)) ‚üß config) (config‚â°false k (‚Ñï.m<m+n k (s‚â§s z‚â§n))) ‚ü©
        (if false then 2CC.‚ü¶ translate c‚ÇÅ ‚üß config else 2CC.‚ü¶ choice-list D (suc k) (translate c‚ÇÇ) (List.map translate (c‚ÇÉ ‚à∑ cs)) ‚üß config)
      ‚â°‚ü®‚ü©
        2CC.‚ü¶ choice-list D (suc k) (translate c‚ÇÇ) (List.map translate (c‚ÇÉ ‚à∑ cs)) ‚üß config
      ‚â°‚ü® lemma m (suc k) c‚ÇÇ (c‚ÇÉ ‚à∑ cs) (‚Ñï.‚â§-trans (s‚â§s (‚Ñï.‚â§-reflexive (Eq.sym (‚Ñï.+-suc k (List.length (c‚ÇÉ ‚à∑ cs)))))) k+cs<limit) (Œª k' k'<k+m ‚Üí config‚â°false k' (Eq.subst (k' <_) (Eq.sym (‚Ñï.+-suc k m)) k'<k+m)) (Œª k+m<limit ‚Üí Eq.subst (Œª x ‚Üí config (D , x) ‚â° true) (‚Ñï.+-suc k m) (config‚â°true (‚Ñï.‚â§-trans (s‚â§s (‚Ñï.‚â§-reflexive (‚Ñï.+-suc k m))) k+m<limit))) ‚ü©
        2CC.‚ü¶ List.find-or-last m (List‚Å∫.map translate (c‚ÇÇ ‚à∑ c‚ÇÉ ‚à∑ cs)) ‚üß config
      ‚â°‚ü®‚ü©
        2CC.‚ü¶ List.find-or-last (suc m) (List‚Å∫.map translate (c‚ÇÅ ‚à∑ c‚ÇÇ ‚à∑ c‚ÇÉ ‚à∑ cs)) ‚üß config
      ‚àé

  translate-preserves-‚äá : ‚àÄ {i}
    ‚Üí (e : CCC.CCC F i A)
    ‚Üí CCC.‚ü¶ e ‚üß ‚äÜ[ conf ] 2CC.‚ü¶ translate e ‚üß
  translate-preserves-‚äá (a CCC.CCC.-< cs >-) config =
    begin
      CCC.‚ü¶ a CCC.CCC.-< cs >- ‚üß config
    ‚â°‚ü®‚ü©
      a Rose.-< List.map (Œª c ‚Üí CCC.‚ü¶ c ‚üß config) cs >-
    ‚â°‚ü® Eq.cong (a Rose.-<_>-) (List.map-cong (Œª c ‚Üí translate-preserves-‚äá c config) cs) ‚ü©
      a Rose.-< List.map (Œª c ‚Üí 2CC.‚ü¶ translate c ‚üß (conf config)) cs >-
    ‚â°‚ü® Eq.cong (a Rose.-<_>-) (List.map-‚àò cs) ‚ü©
      a Rose.-< List.map (Œª c ‚Üí 2CC.‚ü¶ c ‚üß (conf config)) (List.map translate cs) >-
    ‚â°‚ü®‚ü©
      2CC.‚ü¶ a 2CC.2CC.-< List.map translate cs >- ‚üß (conf config)
    ‚â°‚ü®‚ü©
      2CC.‚ü¶ translate (a CCC.CCC.-< cs >-) ‚üß (conf config)
    ‚àé
    where
    open Eq.‚â°-Reasoning
  translate-preserves-‚äá (D CCC.CCC.‚ü® c ‚à∑ cs ‚ü©) config =
    begin
      CCC.‚ü¶ D CCC.CCC.‚ü® c ‚à∑ cs ‚ü© ‚üß config
    ‚â°‚ü®‚ü©
      CCC.‚ü¶ List.find-or-last (config D) (c ‚à∑ cs) ‚üß config
    ‚â°‚ü® List.map-find-or-last (Œª c ‚Üí CCC.‚ü¶ c ‚üß config) (config D) (c ‚à∑ cs) ‚ü©
      List.find-or-last (config D) (List‚Å∫.map (Œª c ‚Üí CCC.‚ü¶ c ‚üß config) (c ‚à∑ cs))
    ‚â°‚ü® Eq.cong (Œª x ‚Üí List.find-or-last (config D) x) (List‚Å∫.map-cong (Œª c ‚Üí translate-preserves-‚äá c config) (c ‚à∑ cs)) ‚ü©
      List.find-or-last (config D) (List‚Å∫.map (Œª c ‚Üí 2CC.‚ü¶ translate c ‚üß (conf config)) (c ‚à∑ cs))
    ‚â°‚ü® Eq.cong (Œª x ‚Üí List.find-or-last (config D) x) (List‚Å∫.map-‚àò (c ‚à∑ cs)) ‚ü©
      List.find-or-last (config D) (List‚Å∫.map (Œª c ‚Üí 2CC.‚ü¶ c ‚üß (conf config)) (List‚Å∫.map translate (c ‚à∑ cs)))
    ‚â°‚ü® List.map-find-or-last (Œª c ‚Üí 2CC.‚ü¶ c ‚üß (conf config)) (config D) (List‚Å∫.map translate (c ‚à∑ cs)) ‚ü®
      2CC.‚ü¶ List.find-or-last (config D) (List‚Å∫.map translate (c ‚à∑ cs)) ‚üß (conf config)
    ‚â°‚ü® lemma (config D) zero (Eq.sym (‚Ñï.+-identity ≥ (config D))) c cs ‚ü©
      2CC.‚ü¶ choice-list D zero (translate c) (List.map translate cs) ‚üß (conf config)
    ‚â°‚ü®‚ü©
      2CC.‚ü¶ translate (D CCC.CCC.‚ü® c ‚à∑ cs ‚ü©) ‚üß (conf config)
    ‚àé
    where
    open Eq.‚â°-Reasoning

    lemma : ‚àÄ {i}
      ‚Üí (m k : ‚Ñï)
      ‚Üí config D ‚â° m + k
      ‚Üí (c : CCC.CCC F i A)
      ‚Üí (cs : List (CCC.CCC F i A))
      ‚Üí 2CC.‚ü¶ List.find-or-last m (List‚Å∫.map translate (c ‚à∑ cs)) ‚üß (conf config) ‚â° 2CC.‚ü¶ choice-list D k (translate c) (List.map translate cs) ‚üß (conf config)
    lemma zero k config-D‚â°m+k c‚ÇÅ [] = refl
    lemma zero k config-D‚â°m+k c‚ÇÅ (c‚ÇÇ ‚à∑ []) =
      begin
        2CC.‚ü¶ List.find-or-last zero (List‚Å∫.map translate (c‚ÇÅ ‚à∑ c‚ÇÇ ‚à∑ [])) ‚üß (conf config)
      ‚â°‚ü®‚ü©
        2CC.‚ü¶ translate c‚ÇÅ ‚üß (conf config)
      ‚â°‚ü®‚ü©
        (if true then 2CC.‚ü¶ translate c‚ÇÅ ‚üß (conf config) else 2CC.‚ü¶ translate c‚ÇÇ ‚üß (conf config))
      ‚â°‚ü® Eq.cong (Œª x ‚Üí if x then 2CC.‚ü¶ translate c‚ÇÅ ‚üß (conf config) else 2CC.‚ü¶ translate c‚ÇÇ ‚üß (conf config)) (Equivalence.to Bool.T-‚â° (‚Ñï.‚â§‚áí‚â§·µá (‚Ñï.‚â§-refl {k}))) ‚ü®
        (if zero + k ‚â§·µá k then 2CC.‚ü¶ translate c‚ÇÅ ‚üß (conf config) else 2CC.‚ü¶ translate c‚ÇÇ ‚üß (conf config))
      ‚â°‚ü® Eq.cong (Œª x ‚Üí if x ‚â§·µá k then 2CC.‚ü¶ translate c‚ÇÅ ‚üß (conf config) else 2CC.‚ü¶ translate c‚ÇÇ ‚üß (conf config)) config-D‚â°m+k ‚ü®
        (if config D ‚â§·µá k then 2CC.‚ü¶ translate c‚ÇÅ ‚üß (conf config) else 2CC.‚ü¶ translate c‚ÇÇ ‚üß (conf config))
      ‚â°‚ü®‚ü©
        (if conf config (D , k) then 2CC.‚ü¶ translate c‚ÇÅ ‚üß (conf config) else 2CC.‚ü¶ translate c‚ÇÇ ‚üß (conf config))
      ‚â°‚ü®‚ü©
        2CC.‚ü¶ (D , k) 2CC.‚ü® translate c‚ÇÅ , translate c‚ÇÇ ‚ü© ‚üß (conf config)
      ‚â°‚ü®‚ü©
        2CC.‚ü¶ choice-list D k (translate c‚ÇÅ) (List.map translate (c‚ÇÇ ‚à∑ [])) ‚üß (conf config)
      ‚àé
    lemma zero k config-D‚â°m+k c‚ÇÅ (c‚ÇÇ ‚à∑ c‚ÇÉ ‚à∑ cs) =
      begin
        2CC.‚ü¶ List.find-or-last zero (List‚Å∫.map translate (c‚ÇÅ ‚à∑ c‚ÇÇ ‚à∑ c‚ÇÉ ‚à∑ cs)) ‚üß (conf config)
      ‚â°‚ü®‚ü©
        2CC.‚ü¶ translate c‚ÇÅ ‚üß (conf config)
      ‚â°‚ü®‚ü©
        (if true then 2CC.‚ü¶ translate c‚ÇÅ ‚üß (conf config) else 2CC.‚ü¶ choice-list D (suc k) (translate c‚ÇÇ) (List.map translate (c‚ÇÉ ‚à∑ cs)) ‚üß (conf config))
      ‚â°‚ü® Eq.cong (Œª x ‚Üí if x then 2CC.‚ü¶ translate c‚ÇÅ ‚üß (conf config) else 2CC.‚ü¶ choice-list D (suc k) (translate c‚ÇÇ) (List.map translate (c‚ÇÉ ‚à∑ cs)) ‚üß (conf config)) (Equivalence.to Bool.T-‚â° (‚Ñï.‚â§‚áí‚â§·µá (‚Ñï.‚â§-refl {k}))) ‚ü®
        (if zero + k ‚â§·µá k then 2CC.‚ü¶ translate c‚ÇÅ ‚üß (conf config) else 2CC.‚ü¶ choice-list D (suc k) (translate c‚ÇÇ) (List.map translate (c‚ÇÉ ‚à∑ cs)) ‚üß (conf config))
      ‚â°‚ü® Eq.cong (Œª x ‚Üí if x ‚â§·µá k then 2CC.‚ü¶ translate c‚ÇÅ ‚üß (conf config) else 2CC.‚ü¶ choice-list D (suc k) (translate c‚ÇÇ) (List.map translate (c‚ÇÉ ‚à∑ cs)) ‚üß (conf config)) config-D‚â°m+k ‚ü®
        (if config D ‚â§·µá k then 2CC.‚ü¶ translate c‚ÇÅ ‚üß (conf config) else 2CC.‚ü¶ choice-list D (suc k) (translate c‚ÇÇ) (List.map translate (c‚ÇÉ ‚à∑ cs)) ‚üß (conf config))
      ‚â°‚ü®‚ü©
        (if conf config (D , k) then 2CC.‚ü¶ translate c‚ÇÅ ‚üß (conf config) else 2CC.‚ü¶ choice-list D (suc k) (translate c‚ÇÇ) (List.map translate (c‚ÇÉ ‚à∑ cs)) ‚üß (conf config))
      ‚â°‚ü®‚ü©
        2CC.‚ü¶ (D , k) 2CC.‚ü® translate c‚ÇÅ , choice-list D (suc k) (translate c‚ÇÇ) (List.map translate (c‚ÇÉ ‚à∑ cs)) ‚ü© ‚üß (conf config)
      ‚â°‚ü®‚ü©
        2CC.‚ü¶ choice-list D k (translate c‚ÇÅ) (List.map translate (c‚ÇÇ ‚à∑ c‚ÇÉ ‚à∑ cs)) ‚üß (conf config)
      ‚àé
    lemma (suc m) k config-D‚â°m+k c‚ÇÅ [] = refl
    lemma (suc m) k config-D‚â°m+k c‚ÇÅ (c‚ÇÇ ‚à∑ []) =
      begin
        2CC.‚ü¶ List.find-or-last (suc m) (List‚Å∫.map translate (c‚ÇÅ ‚à∑ c‚ÇÇ ‚à∑ [])) ‚üß (conf config)
      ‚â°‚ü®‚ü©
        2CC.‚ü¶ translate c‚ÇÇ ‚üß (conf config)
      ‚â°‚ü®‚ü©
        (if false then 2CC.‚ü¶ translate c‚ÇÅ ‚üß (conf config) else 2CC.‚ü¶ translate c‚ÇÇ ‚üß (conf config))
      ‚â°‚ü® Eq.cong (Œª x ‚Üí if x then 2CC.‚ü¶ translate c‚ÇÅ ‚üß (conf config) else 2CC.‚ü¶ translate c‚ÇÇ ‚üß (conf config)) (Equivalence.to Bool.T-not-‚â° (>‚áí¬¨‚â§·µá (‚Ñï.m<n+m k (s‚â§s z‚â§n)))) ‚ü®
        (if (suc m) + k ‚â§·µá k then 2CC.‚ü¶ translate c‚ÇÅ ‚üß (conf config) else 2CC.‚ü¶ translate c‚ÇÇ ‚üß (conf config))
      ‚â°‚ü® Eq.cong (Œª x ‚Üí if x ‚â§·µá k then 2CC.‚ü¶ translate c‚ÇÅ ‚üß (conf config) else 2CC.‚ü¶ translate c‚ÇÇ ‚üß (conf config)) config-D‚â°m+k ‚ü®
        (if config D ‚â§·µá k then 2CC.‚ü¶ translate c‚ÇÅ ‚üß (conf config) else 2CC.‚ü¶ translate c‚ÇÇ ‚üß (conf config))
      ‚â°‚ü®‚ü©
        (if conf config (D , k) then 2CC.‚ü¶ translate c‚ÇÅ ‚üß (conf config) else 2CC.‚ü¶ translate c‚ÇÇ ‚üß (conf config))
      ‚â°‚ü®‚ü©
        2CC.‚ü¶ (D , k) 2CC.‚ü® translate c‚ÇÅ , translate c‚ÇÇ ‚ü© ‚üß (conf config)
      ‚â°‚ü®‚ü©
        2CC.‚ü¶ choice-list D k (translate c‚ÇÅ) (List.map translate (c‚ÇÇ ‚à∑ [])) ‚üß (conf config)
      ‚àé
    lemma (suc m) k config-D‚â°m+k c‚ÇÅ (c‚ÇÇ ‚à∑ c‚ÇÉ ‚à∑ cs) =
      begin
        2CC.‚ü¶ List.find-or-last (suc m) (List‚Å∫.map translate (c‚ÇÅ ‚à∑ c‚ÇÇ ‚à∑ c‚ÇÉ ‚à∑ cs)) ‚üß (conf config)
      ‚â°‚ü®‚ü©
        2CC.‚ü¶ List.find-or-last m (List‚Å∫.map translate (c‚ÇÇ ‚à∑ c‚ÇÉ ‚à∑ cs)) ‚üß (conf config)
      ‚â°‚ü® lemma m (suc k) (Eq.trans config-D‚â°m+k (Eq.sym (‚Ñï.+-suc m k))) c‚ÇÇ (c‚ÇÉ ‚à∑ cs) ‚ü©
        2CC.‚ü¶ choice-list D (suc k) (translate c‚ÇÇ) (List.map translate (c‚ÇÉ ‚à∑ cs)) ‚üß (conf config)
      ‚â°‚ü®‚ü©
        (if false then 2CC.‚ü¶ translate c‚ÇÅ ‚üß (conf config) else 2CC.‚ü¶ choice-list D (suc k) (translate c‚ÇÇ) (List.map translate (c‚ÇÉ ‚à∑ cs)) ‚üß (conf config))
      ‚â°‚ü® Eq.cong (Œª x ‚Üí if x then 2CC.‚ü¶ translate c‚ÇÅ ‚üß (conf config) else 2CC.‚ü¶ choice-list D (suc k) (translate c‚ÇÇ) (List.map translate (c‚ÇÉ ‚à∑ cs)) ‚üß (conf config)) (Equivalence.to Bool.T-not-‚â° (>‚áí¬¨‚â§·µá (‚Ñï.m<n+m k (s‚â§s z‚â§n)))) ‚ü®
        (if suc m + k ‚â§·µá k then 2CC.‚ü¶ translate c‚ÇÅ ‚üß (conf config) else 2CC.‚ü¶ choice-list D (suc k) (translate c‚ÇÇ) (List.map translate (c‚ÇÉ ‚à∑ cs)) ‚üß (conf config))
      ‚â°‚ü® Eq.cong (Œª x ‚Üí if x ‚â§·µá k then 2CC.‚ü¶ translate c‚ÇÅ ‚üß (conf config) else 2CC.‚ü¶ choice-list D (suc k) (translate c‚ÇÇ) (List.map translate (c‚ÇÉ ‚à∑ cs)) ‚üß (conf config)) config-D‚â°m+k ‚ü®
        (if config D ‚â§·µá k then 2CC.‚ü¶ translate c‚ÇÅ ‚üß (conf config) else 2CC.‚ü¶ choice-list D (suc k) (translate c‚ÇÇ) (List.map translate (c‚ÇÉ ‚à∑ cs)) ‚üß (conf config))
      ‚â°‚ü®‚ü©
        (if conf config (D , k) then 2CC.‚ü¶ translate c‚ÇÅ ‚üß (conf config) else 2CC.‚ü¶ choice-list D (suc k) (translate c‚ÇÇ) (List.map translate (c‚ÇÉ ‚à∑ cs)) ‚üß (conf config))
      ‚â°‚ü®‚ü©
        2CC.‚ü¶ (D , k) 2CC.‚ü® translate c‚ÇÅ , choice-list D (suc k) (translate c‚ÇÇ) (List.map translate (c‚ÇÉ ‚à∑ cs)) ‚ü© ‚üß (conf config)
      ‚â°‚ü®‚ü©
        2CC.‚ü¶ choice-list D k (translate c‚ÇÅ) (List.map translate (c‚ÇÇ ‚à∑ c‚ÇÉ ‚à∑ cs)) ‚üß (conf config)
      ‚àé

  translate-preserves : ‚àÄ {i}
    ‚Üí (e : CCC.CCC F i A)
    ‚Üí 2CC.‚ü¶ translate e ‚üß ‚âÖ[ fnoc (max-dimension e) ][ conf ] CCC.‚ü¶ e ‚üß
  translate-preserves e = translate-preserves-‚äÜ e (max-dimension e) ‚Ñï.‚â§-refl , translate-preserves-‚äá e

  open import Vatras.SyntacticExpressiveness A using (_‚â§Size_)

  2CC‚â§CCC : Sized2CC (F √ó ‚Ñï) A ‚â§Size SizedCCC F A
  2CC‚â§CCC = 2 , Œª ccc ‚Üí
      translate ccc
    , ‚âÖ[]‚Üí‚âÖ (translate-preserves ccc)
    , ‚Ñï.<‚áí‚â§ (translate-size ccc)

CCC‚Üí2CC : LanguageCompiler (CCC.CCCL F) (2CC.2CCL (F √ó ‚Ñï))
CCC‚Üí2CC .LanguageCompiler.compile = translate
CCC‚Üí2CC .LanguageCompiler.config-compiler e .to = conf
CCC‚Üí2CC .LanguageCompiler.config-compiler e .from = fnoc (max-dimension e)
CCC‚Üí2CC .LanguageCompiler.preserves e = ‚âÖ[]-sym (translate-preserves e)
