open import Vatras.Framework.Definitions using (ùîΩ; ùî∏; NAT)
-- TODO abstract over (F : ùîΩ) using a map (‚Ñï ‚Üí ùîΩ)
module Vatras.SyntacticExpressiveness.OC‚â±2CC where

open import Data.Bool using (true; false)
open import Data.Empty using (‚ä•-elim)
open import Data.Nat as ‚Ñï using (‚Ñï; zero; suc; _‚â§_; _<_; s‚â§s; z‚â§n; _<·µá_; _+_; _*_; _^_; _‚à∏_)
import Data.Nat.Properties as ‚Ñï
open import Data.List as List using (List; []; _‚à∑_)
import Data.List.Properties as List
import Data.List.Relation.Binary.Subset.Propositional as Subset
import Data.List.Relation.Binary.Subset.Propositional.Properties as Subset
open import Data.List.Relation.Unary.All as All using (All; []; _‚à∑_)
import Data.List.Relation.Unary.All.Properties as All
open import Data.List.Relation.Unary.Any using (here; there)
open import Data.List.Relation.Unary.Unique.DecPropositional ‚Ñï._‚âü_ using (Unique; []; _‚à∑_)
import Data.List.Relation.Unary.Unique.DecPropositional.Properties as Unique
open import Data.Maybe using (just)
open import Data.Product using (_√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ; ‚àÉ-syntax)

open import Function using (_‚àò_; id)
open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_)
open import Relation.Nullary.Decidable using (yes; no)
open import Relation.Nullary.Reflects using (of ∏; of‚Åø)
open import Size using (Size; ‚àû)

import Vatras.Util.List as List
open import Vatras.Data.EqIndexedSet using (_‚âÖ_; _‚àà_; _‚äÜ_)
open import Vatras.Framework.Variants using (Rose; Rose-injective)
open import Vatras.Framework.Compiler using (LanguageCompiler)
open import Vatras.Lang.All.Fixed ‚Ñï (Rose ‚àû)
open import Vatras.SyntacticExpressiveness using (_‚â±Size_)
open import Vatras.SyntacticExpressiveness.Sizes ‚Ñï using (SizedWFOC; sizeWFOC; sizeOC; Sized2CC; size2CC)

options : ‚Ñï ‚Üí List (OC.OC ‚àû NAT)
options zero = []
options (suc n) = n OC.‚ù≤ suc n OC.-< [] >- ‚ù≥ ‚à∑ options n

exponential-oc : ‚Ñï ‚Üí OC.OC ‚àû NAT
exponential-oc zero = 0 OC.-< [] >-
exponential-oc (suc n) = 0 OC.-< exponential-oc n ‚à∑ exponential-oc n ‚à∑ [] >-

oc : ‚Ñï ‚Üí OC.WFOC ‚àû NAT
oc n = OC.Root zero (exponential-oc n ‚à∑ options n)

size-options : ‚àÄ n ‚Üí List.sum (List.map sizeOC (options n)) ‚â° 2 * n
size-options zero = Eq.refl
size-options (suc n) =
    List.sum (List.map sizeOC (options (suc n)))
  ‚â°‚ü®‚ü©
    suc (suc (List.sum (List.map sizeOC (options n))))
  ‚â°‚ü® Eq.cong (Œª x ‚Üí suc (suc x)) (size-options n) ‚ü©
    suc (suc (2 * n))
  ‚â°‚ü® ‚Ñï.*-suc 2 n ‚ü®
    2 * (suc n)
  ‚àé
  where
  open Eq.‚â°-Reasoning

size-exponential-artifact : ‚àÄ (n : ‚Ñï) ‚Üí sizeOC (exponential-oc n) ‚â° 2 ^ (suc n) ‚à∏ 1
size-exponential-artifact zero = Eq.refl
size-exponential-artifact (suc n) =
    sizeOC (exponential-oc (suc n))
  ‚â°‚ü®‚ü©
    sizeOC (0 OC.-< exponential-oc n ‚à∑ exponential-oc n ‚à∑ [] >-)
  ‚â°‚ü®‚ü©
    suc (sizeOC (exponential-oc n) + (sizeOC (exponential-oc n) + 0))
  ‚â°‚ü® Eq.cong (Œª x ‚Üí suc (x + (x + 0))) (size-exponential-artifact n) ‚ü©
    suc (2 ^ (suc n) ‚à∏ 1 + (2 ^ (suc n) ‚à∏ 1 + 0))
  ‚â°‚ü®‚ü©
    suc (2 ^ (suc n) ‚à∏ 1) + (2 ^ (suc n) ‚à∏ 1 + 0)
  ‚â°‚ü® Eq.cong (Œª x ‚Üí suc (2 ^ (suc n) ‚à∏ 1) + x) (‚Ñï.+-identity ≥ (2 ^ (suc n) ‚à∏ 1)) ‚ü©
    suc (2 ^ (suc n) ‚à∏ 1) + (2 ^ (suc n) ‚à∏ 1)
  ‚â°‚ü® Eq.cong (_+ (2 ^ (suc n) ‚à∏ 1)) (‚Ñï.+-‚à∏-assoc 1 (‚Ñï.m^n>0 2 (suc n))) ‚ü®
    2 ^ (suc n) + (2 ^ (suc n) ‚à∏ 1)
  ‚â°‚ü® ‚Ñï.+-‚à∏-assoc (2 ^ (suc n)) {2 ^ (suc n)} {1} (‚Ñï.m^n>0 2 (suc n)) ‚ü®
    (2 ^ (suc n) + 2 ^ (suc n)) ‚à∏ 1
  ‚â°‚ü® Eq.cong (Œª x ‚Üí 2 ^ (suc n) + x ‚à∏ 1) (‚Ñï.+-identity ≥ (2 ^ (suc n))) ‚ü®
    2 ^ (suc (suc n)) ‚à∏ 1
  ‚àé
  where
  open Eq.‚â°-Reasoning

size-oc : ‚àÄ (n : ‚Ñï) ‚Üí sizeWFOC (oc n) ‚â° 2 ^ (suc n) + 2 * n
size-oc n =
    sizeWFOC (oc n)
  ‚â°‚ü®‚ü©
    suc (sizeOC (exponential-oc n) + List.sum (List.map sizeOC (options n)))
  ‚â°‚ü® Eq.cong‚ÇÇ (Œª x y ‚Üí suc (x + y)) (size-exponential-artifact n) (size-options n) ‚ü©
    suc (2 ^ (suc n) ‚à∏ 1 + 2 * n)
  ‚â°‚ü® Eq.cong (_+ 2 * n) (‚Ñï.+-‚à∏-assoc 1 (‚Ñï.m^n>0 2 (suc n))) ‚ü®
    2 ^ (suc n) + 2 * n
  ‚àé
  where
  open Eq.‚â°-Reasoning

exponential-artifact : ‚Ñï ‚Üí Rose ‚àû NAT
exponential-artifact zero = 0 Rose.-< [] >-
exponential-artifact (suc n) = 0 Rose.-< exponential-artifact n ‚à∑ exponential-artifact n ‚à∑ [] >-

variant-cs : ‚Ñï ‚Üí List (Rose ‚àû NAT)
variant-cs zero = []
variant-cs (suc i) = suc i Rose.-< [] >- ‚à∑ variant-cs i

variant : ‚Ñï ‚Üí ‚Ñï ‚Üí Rose ‚àû NAT
variant n i = 0 Rose.-< exponential-artifact n ‚à∑ variant-cs i >-

length-variants-cs : ‚àÄ n ‚Üí List.length (variant-cs n) ‚â° n
length-variants-cs zero = Eq.refl
length-variants-cs (suc n) = Eq.cong suc (length-variants-cs n)

variant‚ààe‚áílength-cs
  : ‚àÄ {i} (n l : ‚Ñï) (a : ‚Ñï) (cs : List (2CC.2CC i NAT))
  ‚Üí variant n l ‚àà 2CC.‚ü¶ a 2CC.-< cs >- ‚üß
  ‚Üí List.length cs ‚â° suc l
variant‚ààe‚áílength-cs n l a cs (c , v‚â°e) =
    List.length cs
  ‚â°‚ü® List.length-map (Œª e ‚Üí 2CC.‚ü¶ e ‚üß c) cs ‚ü®
    List.length (List.map (Œª e ‚Üí 2CC.‚ü¶ e ‚üß c) cs)
  ‚â°‚ü® Eq.cong List.length (proj‚ÇÇ (Rose-injective v‚â°e)) ‚ü®
    List.length (exponential-artifact n ‚à∑ variant-cs l)
  ‚â°‚ü® Eq.cong suc (length-variants-cs l) ‚ü©
    suc l
  ‚àé
  where
  open Eq.‚â°-Reasoning

exponential-artifact‚ààe‚áílength-cs
  : ‚àÄ {i} (n : ‚Ñï) (a : ‚Ñï) (cs : List (2CC.2CC i NAT))
  ‚Üí exponential-artifact (suc n) ‚àà 2CC.‚ü¶ a 2CC.-< cs >- ‚üß
  ‚Üí List.length cs ‚â° 2
exponential-artifact‚ààe‚áílength-cs n a cs (c , v‚â°e) =
    List.length cs
  ‚â°‚ü® List.length-map (Œª e ‚Üí 2CC.‚ü¶ e ‚üß c) cs ‚ü®
    List.length (List.map (Œª e ‚Üí 2CC.‚ü¶ e ‚üß c) cs)
  ‚â°‚ü® Eq.cong List.length (proj‚ÇÇ (Rose-injective v‚â°e)) ‚ü®
    List.length (exponential-artifact n ‚à∑ exponential-artifact n ‚à∑ [])
  ‚â°‚ü®‚ü©
    2
  ‚àé
  where
  open Eq.‚â°-Reasoning

exponential-big
  : ‚àÄ {i : Size} (n l : ‚Ñï)
  ‚Üí (2cc : 2CC.2CC i NAT)
  ‚Üí exponential-artifact n ‚àà 2CC.‚ü¶ 2cc ‚üß
  ‚Üí 2 ^ (suc n) ‚à∏ 1 ‚â§ size2CC 2cc
exponential-big n l (D 2CC.‚ü® c‚ÇÅ , c‚ÇÇ ‚ü©) (c , v‚â°2cc) with c D
exponential-big n l (D 2CC.‚ü® c‚ÇÅ , c‚ÇÇ ‚ü©) (c , v‚â°2cc) | true = ‚Ñï.‚â§-trans (exponential-big n l c‚ÇÅ (c , v‚â°2cc)) (‚Ñï.‚â§-trans (‚Ñï.m‚â§m+n (size2CC c‚ÇÅ) (size2CC c‚ÇÇ)) (‚Ñï.m‚â§n+m (size2CC c‚ÇÅ + size2CC c‚ÇÇ) 1))
exponential-big n l (D 2CC.‚ü® c‚ÇÅ , c‚ÇÇ ‚ü©) (c , v‚â°2cc) | false = ‚Ñï.‚â§-trans (exponential-big n l c‚ÇÇ (c , v‚â°2cc)) (‚Ñï.m‚â§n+m (size2CC c‚ÇÇ) (suc (size2CC c‚ÇÅ)))
exponential-big zero l (a 2CC.-< cs >-) (c , v‚â°2cc) = s‚â§s z‚â§n
exponential-big (suc n) l (a 2CC.-< cs >-) (c , v‚â°2cc) with exponential-artifact‚ààe‚áílength-cs n a cs (c , v‚â°2cc)
exponential-big (suc n) l (a 2CC.-< c‚ÇÅ ‚à∑ c‚ÇÇ ‚à∑ [] >-) (c , v‚â°2cc) | Eq.refl =
  begin
    2 ^ (suc (suc n)) ‚à∏ 1
  ‚â°‚ü® Eq.cong (Œª x ‚Üí (2 ^ (suc n) + x) ‚à∏ 1) (‚Ñï.+-identity ≥ (2 ^ (suc n))) ‚ü©
    (2 ^ (suc n) + 2 ^ (suc n)) ‚à∏ 1
  ‚â°‚ü® ‚Ñï.+-‚à∏-assoc (2 ^ (suc n)) (‚Ñï.m^n>0 2 (suc n)) ‚ü©
    2 ^ (suc n) + (2 ^ (suc n) ‚à∏ 1)
  ‚â°‚ü® ‚Ñï.+-‚à∏-assoc 1 (‚Ñï.‚â§-trans (‚Ñï.m^n>0 2 (suc n)) (‚Ñï.m‚â§m+n (2 ^ (suc n)) (2 ^ (suc n) ‚à∏ 1))) ‚ü©
    1 + ((2 ^ (suc n) + (2 ^ (suc n) ‚à∏ 1)) ‚à∏ 1)
  ‚â°‚ü® Eq.cong suc (‚Ñï.+-‚à∏-comm (2 ^ suc n ‚à∏ 1) (‚Ñï.m^n>0 2 (suc n))) ‚ü©
    suc ((2 ^ (suc n) ‚à∏ 1) + (2 ^ (suc n) ‚à∏ 1))
  ‚â§‚ü® s‚â§s (‚Ñï.+-mono-‚â§ (exponential-big n l c‚ÇÅ (c , proj‚ÇÅ (List.‚à∑-injective (proj‚ÇÇ (Rose-injective v‚â°2cc))))) (exponential-big n l c‚ÇÇ (c , proj‚ÇÅ (List.‚à∑-injective (proj‚ÇÇ (List.‚à∑-injective (proj‚ÇÇ (Rose-injective v‚â°2cc)))))))) ‚ü©
    suc (size2CC c‚ÇÅ + size2CC c‚ÇÇ)
  ‚â°‚ü® Eq.cong (Œª x ‚Üí suc (size2CC c‚ÇÅ + x)) (‚Ñï.+-identity ≥ (size2CC c‚ÇÇ)) ‚ü®
    suc (size2CC c‚ÇÅ + (size2CC c‚ÇÇ + 0))
  ‚â°‚ü®‚ü©
    size2CC (a 2CC.-< c‚ÇÅ ‚à∑ c‚ÇÇ ‚à∑ [] >-)
  ‚àé
  where
  open ‚Ñï.‚â§-Reasoning

exponentially-big
  : ‚àÄ {i : Size} (n l : ‚Ñï)
  ‚Üí (2cc : 2CC.2CC i NAT)
  ‚Üí variant n l ‚àà 2CC.‚ü¶ 2cc ‚üß
  ‚Üí 2 ^ n < size2CC 2cc
exponentially-big n l (D 2CC.‚ü® c‚ÇÅ , c‚ÇÇ ‚ü©) (c , v‚â°2cc) with c D
exponentially-big n l (D 2CC.‚ü® c‚ÇÅ , c‚ÇÇ ‚ü©) (c , v‚â°2cc) | true = ‚Ñï.‚â§-trans (exponentially-big n l c‚ÇÅ (c , v‚â°2cc)) (‚Ñï.‚â§-trans (‚Ñï.m‚â§m+n (size2CC c‚ÇÅ) (size2CC c‚ÇÇ)) (‚Ñï.m‚â§n+m (size2CC c‚ÇÅ + size2CC c‚ÇÇ) 1))
exponentially-big n l (D 2CC.‚ü® c‚ÇÅ , c‚ÇÇ ‚ü©) (c , v‚â°2cc) | false =  ‚Ñï.‚â§-trans (exponentially-big n l c‚ÇÇ (c , v‚â°2cc)) (‚Ñï.m‚â§n+m (size2CC c‚ÇÇ) (suc (size2CC c‚ÇÅ)))
exponentially-big n l (a 2CC.-< cs >-) (c , v‚â°2cc) with variant‚ààe‚áílength-cs n l a cs (c , v‚â°2cc)
exponentially-big n l (a 2CC.-< c‚ÇÅ ‚à∑ cs >-) (c , v‚â°2cc) | Eq.refl =
  begin-strict
    2 ^ n
  <‚ü® ‚Ñï.m<m+n (2 ^ n) (‚Ñï.m^n>0 2 n) ‚ü©
    2 ^ n + 2 ^ n
  ‚â°‚ü® Eq.cong (2 ^ n +_) (‚Ñï.+-identity ≥ (2 ^ n)) ‚ü®
    2 ^ n + (2 ^ n + 0)
  ‚â°‚ü®‚ü©
    2 ^ (suc n)
  ‚â°‚ü® ‚Ñï.+-‚à∏-assoc 1 (‚Ñï.m^n>0 2 (suc n)) ‚ü©
    suc (2 ^ (suc n) ‚à∏ 1)
  ‚â§‚ü® s‚â§s (exponential-big n l c‚ÇÅ (c , proj‚ÇÅ (List.‚à∑-injective (proj‚ÇÇ (Rose-injective v‚â°2cc))))) ‚ü©
    suc (size2CC c‚ÇÅ)
  ‚â§‚ü® ‚Ñï.m‚â§m+n (suc (size2CC c‚ÇÅ)) (List.sum (List.map size2CC cs)) ‚ü©
    suc (size2CC c‚ÇÅ + List.sum (List.map size2CC cs))
  ‚â°‚ü®‚ü©
    size2CC (a 2CC.2CC.-< c‚ÇÅ ‚à∑ cs >-)
  ‚àé
  where
  open ‚Ñï.‚â§-Reasoning

partition : ‚àÄ {i : Size} (n D : ‚Ñï)
  ‚Üí (c‚ÇÅ c‚ÇÇ : 2CC.2CC i NAT)
  ‚Üí (ls : List ‚Ñï)
  ‚Üí Unique ls
  ‚Üí All (Œª l ‚Üí variant n l ‚àà 2CC.‚ü¶ D 2CC.‚ü® c‚ÇÅ , c‚ÇÇ ‚ü© ‚üß) ls
  ‚Üí ‚àÉ[ ls‚ÇÅ ] ‚àÉ[ ls‚ÇÇ ]
    ls‚ÇÅ Subset.‚äÜ ls √ó ls‚ÇÇ Subset.‚äÜ ls
  √ó List.length ls‚ÇÅ + List.length ls‚ÇÇ ‚â° List.length ls
  √ó Unique ls‚ÇÅ √ó All (Œª l ‚Üí variant n l ‚àà 2CC.‚ü¶ c‚ÇÅ ‚üß) ls‚ÇÅ
  √ó Unique ls‚ÇÇ √ó All (Œª l ‚Üí variant n l ‚àà 2CC.‚ü¶ c‚ÇÇ ‚üß) ls‚ÇÇ
partition n D c‚ÇÅ c‚ÇÇ [] unique-ls ls‚äÜ2cc = [] , [] , Subset.‚äÜ-refl , Subset.‚äÜ-refl , Eq.refl , [] , [] , [] , []
partition n D c‚ÇÅ c‚ÇÇ (l ‚à∑ ls) (l‚àâls ‚à∑ unique-ls) ((c , l‚â°2cc) ‚à∑ ls‚äÜ2cc) with c D | partition n D c‚ÇÅ c‚ÇÇ ls unique-ls ls‚äÜ2cc
partition n D c‚ÇÅ c‚ÇÇ (l ‚à∑ ls) (l‚àâls ‚à∑ unique-ls) ((c , l‚â°2cc) ‚à∑ ls‚äÜ2cc) | true | ls‚ÇÅ , ls‚ÇÇ , ls‚ÇÅ‚äÜls , ls‚ÇÇ‚äÜls , ls‚ÇÅ+ls‚ÇÇ‚â°ls , unique-ls‚ÇÅ , ls‚ÇÅ‚ààl , unique-ls‚ÇÇ , ls‚ÇÇ‚ààr =
  l ‚à∑ ls‚ÇÅ , ls‚ÇÇ , Subset.‚à∑‚Å∫ ≥ l ls‚ÇÅ‚äÜls , there ‚àò ls‚ÇÇ‚äÜls , Eq.cong suc ls‚ÇÅ+ls‚ÇÇ‚â°ls , All.anti-mono ls‚ÇÅ‚äÜls l‚àâls ‚à∑ unique-ls‚ÇÅ , (c , l‚â°2cc) ‚à∑ ls‚ÇÅ‚ààl , unique-ls‚ÇÇ , ls‚ÇÇ‚ààr
partition n D c‚ÇÅ c‚ÇÇ (l ‚à∑ ls) (l‚àâls ‚à∑ unique-ls) ((c , l‚â°2cc) ‚à∑ ls‚äÜ2cc) | false | ls‚ÇÅ , ls‚ÇÇ , ls‚ÇÅ‚äÜls , ls‚ÇÇ‚äÜls , ls‚ÇÅ+ls‚ÇÇ‚â°ls , unique-ls‚ÇÅ , ls‚ÇÅ‚ààl , unique-ls‚ÇÇ , ls‚ÇÇ‚ààr =
  ls‚ÇÅ , l ‚à∑ ls‚ÇÇ , there ‚àò ls‚ÇÅ‚äÜls , Subset.‚à∑‚Å∫ ≥ l ls‚ÇÇ‚äÜls , Eq.trans (‚Ñï.+-suc (List.length ls‚ÇÅ) (List.length ls‚ÇÇ)) (Eq.cong suc ls‚ÇÅ+ls‚ÇÇ‚â°ls) , unique-ls‚ÇÅ , ls‚ÇÅ‚ààl , All.anti-mono ls‚ÇÇ‚äÜls l‚àâls ‚à∑ unique-ls‚ÇÇ , (c , l‚â°2cc) ‚à∑ ls‚ÇÇ‚ààr

big : ‚àÄ {i : Size} (n : ‚Ñï)
  ‚Üí (2cc : 2CC.2CC i NAT)
  ‚Üí (ls : List ‚Ñï)
  ‚Üí Unique ls
  ‚Üí All (Œª l ‚Üí variant n l ‚àà 2CC.‚ü¶ 2cc ‚üß) ls
  ‚Üí List.length ls * 2 ^ n < size2CC 2cc
big n (a 2CC.-< cs >-) [] unique-ls all-‚àà = s‚â§s z‚â§n
big n (a 2CC.-< cs >-) (l‚ÇÅ ‚à∑ []) unique-ls all-‚àà = Eq.subst (_< size2CC (a 2CC.-< cs >-)) (Eq.sym (‚Ñï.+-identity ≥ (2 ^ n))) (exponentially-big n l‚ÇÅ (a 2CC.-< cs >-) (All.lookup all-‚àà (here Eq.refl)))
big n (a 2CC.-< cs >-) (l‚ÇÅ ‚à∑ l‚ÇÇ ‚à∑ ls) ((l‚ÇÅ‚â¢l‚ÇÇ ‚à∑ l‚ÇÅ‚àâls) ‚à∑ unique-ls) all-‚àà = ‚ä•-elim (l‚ÇÅ‚â¢l‚ÇÇ (‚Ñï.suc-injective (Eq.trans (Eq.sym (variant‚ààe‚áílength-cs n l‚ÇÅ a cs (All.lookup all-‚àà (here Eq.refl)))) (variant‚ààe‚áílength-cs n l‚ÇÇ a cs (All.lookup all-‚àà (there (here Eq.refl)))))))
big n (D 2CC.‚ü® l , r ‚ü©) ls unique-ls all-‚àà with partition n D l r ls unique-ls all-‚àà
big n (D 2CC.‚ü® l , r ‚ü©) ls unique-ls all-‚àà | ls‚ÇÅ , ls‚ÇÇ , _ , _ , ls‚ÇÅ+ls‚ÇÇ‚â°ls , unique-ls‚ÇÅ , ls‚ÇÅ‚ààl , unique-ls‚ÇÇ , ls‚ÇÇ‚ààr =
  begin-strict
    List.length ls * 2 ^ n
  <‚ü® ‚Ñï.n<1+n (List.length ls * 2 ^ n) ‚ü©
    suc (List.length ls * 2 ^ n)
  ‚â°‚ü® Eq.cong (Œª x ‚Üí suc (x * 2 ^ n)) ls‚ÇÅ+ls‚ÇÇ‚â°ls ‚ü®
    suc ((List.length ls‚ÇÅ + List.length ls‚ÇÇ) * 2 ^ n)
  ‚â°‚ü® Eq.cong suc (‚Ñï.*-distrib ≥-+ (2 ^ n) (List.length ls‚ÇÅ) (List.length ls‚ÇÇ)) ‚ü©
    suc (List.length ls‚ÇÅ * 2 ^ n + List.length ls‚ÇÇ * 2 ^ n)
  <‚ü® s‚â§s (‚Ñï.+-mono-< (big n l ls‚ÇÅ unique-ls‚ÇÅ ls‚ÇÅ‚ààl) (big n r ls‚ÇÇ unique-ls‚ÇÇ ls‚ÇÇ‚ààr)) ‚ü©
    suc (size2CC l + size2CC r)
  ‚â°‚ü®‚ü©
    size2CC (D 2CC.‚ü® l , r ‚ü©)
  ‚àé
  where
  open ‚Ñï.‚â§-Reasoning

conf : ‚Ñï ‚Üí OC.Configuration
conf n i = i <·µá n

‚ü¶exponential-artifact‚üß : ‚àÄ n c ‚Üí OC.‚ü¶ exponential-oc n ‚üß‚Çí c ‚â° just (exponential-artifact n)
‚ü¶exponential-artifact‚üß zero c = Eq.refl
‚ü¶exponential-artifact‚üß (suc n) c =
    OC.‚ü¶ exponential-oc (suc n) ‚üß‚Çí c
  ‚â°‚ü®‚ü©
    OC.‚ü¶ 0 OC.-< exponential-oc n ‚à∑ exponential-oc n ‚à∑ [] >- ‚üß‚Çí c
  ‚â°‚ü®‚ü©
    just (0 Rose.-< List.catMaybes (List.map (Œª x ‚Üí OC.‚ü¶ x ‚üß‚Çí c) (exponential-oc n ‚à∑ exponential-oc n ‚à∑ [])) >-)
  ‚â°‚ü®‚ü©
    just (0 Rose.-< List.catMaybes (OC.‚ü¶ exponential-oc n ‚üß‚Çí c ‚à∑ OC.‚ü¶ exponential-oc n ‚üß‚Çí c ‚à∑ []) >-)
  ‚â°‚ü® Eq.cong (Œª x ‚Üí just (0 Rose.-< List.catMaybes (x ‚à∑ x ‚à∑ []) >-)) (‚ü¶exponential-artifact‚üß n c) ‚ü©
    just (0 Rose.-< exponential-artifact n ‚à∑ exponential-artifact n ‚à∑ [] >-)
  ‚â°‚ü®‚ü©
    just (exponential-artifact (suc n))
  ‚àé
  where
  open Eq.‚â°-Reasoning

‚ü¶options‚üß : ‚àÄ n l
  ‚Üí l ‚â§ n
  ‚Üí List.catMaybes (List.map (Œª e ‚Üí OC.‚ü¶ e ‚üß‚Çí (conf l)) (options n))
  ‚â° variant-cs l
‚ü¶options‚üß zero .zero z‚â§n = Eq.refl
‚ü¶options‚üß (suc n) l l‚â§n with n ‚Ñï.<? l
‚ü¶options‚üß (suc n) l l‚â§n | no n‚âÆl with n ‚Ñï.<·µá l | ‚Ñï.<·µá-reflects-< n l
‚ü¶options‚üß (suc n) l l‚â§n | no n‚âÆl | .false | of‚Åø n‚âÆl' = ‚ü¶options‚üß n l (‚Ñï.‚âÆ‚áí‚â• n‚âÆl)
‚ü¶options‚üß (suc n) l l‚â§n | no n‚âÆl | .true | of ∏ n<l = ‚ä•-elim (n‚âÆl n<l)
‚ü¶options‚üß (suc n) l l‚â§n | yes n<l = Eq.trans (go (suc n) l n<l) (Eq.cong variant-cs (‚Ñï.‚â§‚àß‚âÆ‚áí‚â° n<l (‚Ñï.‚â§‚áí‚âØ l‚â§n)))
  where
  go : ‚àÄ n l
    ‚Üí n ‚â§ l
    ‚Üí List.catMaybes (List.map (Œª e ‚Üí OC.‚ü¶ e ‚üß‚Çí (conf l)) (options n))
    ‚â° variant-cs n
  go zero l n‚â§l = Eq.refl
  go (suc n) l n<l with ‚Ñï.<·µá-reflects-< n l
  go (suc n) l n<l | reflects-n<l with n <·µá l
  go (suc n) l n<l | of ∏ n<l' | .true = Eq.cong (suc n Rose.-< [] >- ‚à∑_) (go n l (‚Ñï.<‚áí‚â§ n<l))
  go (suc n) l n<l | of‚Åø n‚âÆl | .false = ‚ä•-elim (n‚âÆl n<l)

‚ü¶oc‚üß : ‚àÄ n l ‚Üí l ‚â§ n ‚Üí OC.‚ü¶ oc n ‚üß (conf l) ‚â° variant n l
‚ü¶oc‚üß n l l‚â§n =
    OC.‚ü¶ oc n ‚üß (conf l)
  ‚â°‚ü®‚ü©
    0 Rose.-< OC.‚ü¶ exponential-oc n ‚à∑ options n ‚üß‚Çí-recurse (conf l) >-
  ‚â°‚ü®‚ü©
    0 Rose.-< List.catMaybes (List.map (Œª e ‚Üí OC.‚ü¶ e ‚üß‚Çí (conf l)) (exponential-oc n ‚à∑ options n)) >-
  ‚â°‚ü®‚ü©
    0 Rose.-< List.catMaybes (OC.‚ü¶ exponential-oc n ‚üß‚Çí (conf l) ‚à∑ List.map (Œª e ‚Üí OC.‚ü¶ e ‚üß‚Çí (conf l)) (options n)) >-
  ‚â°‚ü® Eq.cong (Œª x ‚Üí 0 Rose.-< List.catMaybes (x ‚à∑ List.map (Œª e ‚Üí OC.‚ü¶ e ‚üß‚Çí (conf l)) (options n)) >-) (‚ü¶exponential-artifact‚üß n (conf l)) ‚ü©
    0 Rose.-< List.catMaybes (just (exponential-artifact n) ‚à∑ List.map (Œª e ‚Üí OC.‚ü¶ e ‚üß‚Çí (conf l)) (options n)) >-
  ‚â°‚ü®‚ü©
    0 Rose.-< exponential-artifact n ‚à∑ List.catMaybes (List.map (Œª e ‚Üí OC.‚ü¶ e ‚üß‚Çí (conf l)) (options n)) >-
  ‚â°‚ü® Eq.cong (Œª x ‚Üí 0 Rose.-< exponential-artifact n ‚à∑ x >-) (‚ü¶options‚üß n l l‚â§n) ‚ü©
    0 Rose.-< exponential-artifact n ‚à∑ variant-cs l >-
  ‚â°‚ü®‚ü©
    variant n l
  ‚àé
  where
  open Eq.‚â°-Reasoning

‚äÜ‚áíAll‚àà : ‚àÄ {i} n l
  ‚Üí l ‚â§ suc n
  ‚Üí (2cc : 2CC.2CC i NAT)
  ‚Üí OC.‚ü¶ oc n ‚üß ‚äÜ 2CC.‚ü¶ 2cc ‚üß
  ‚Üí All (Œª l ‚Üí variant n l ‚àà 2CC.‚ü¶ 2cc ‚üß) (List.upTo l)
‚äÜ‚áíAll‚àà n zero l‚â§m 2cc oc‚äÜ2cc = []
‚äÜ‚áíAll‚àà n (suc l) (s‚â§s l‚â§m) 2cc oc‚äÜ2cc = Eq.subst (All (Œª l ‚Üí variant n l ‚àà 2CC.‚ü¶ 2cc ‚üß)) (List.applyUpTo-‚à∑ ≥‚Å∫ id l) (All.‚à∑ ≥‚Å∫ (‚äÜ‚áíAll‚àà n l (‚Ñï.<‚áí‚â§ (s‚â§s l‚â§m)) 2cc oc‚äÜ2cc) (Eq.subst (_‚àà 2CC.‚ü¶ 2cc ‚üß) (‚ü¶oc‚üß n l l‚â§m) (oc‚äÜ2cc (conf l))))

4*n<16^n : ‚àÄ n ‚Üí 4 * n < 16 ^ n
4*n<16^n zero = s‚â§s z‚â§n
4*n<16^n (suc n) =
  begin-strict
    4 * suc n
  ‚â°‚ü® ‚Ñï.*-suc 4 n ‚ü©
    4 + 4 * n
  <‚ü® ‚Ñï.+-mono-< (s‚â§s (s‚â§s (s‚â§s (s‚â§s (s‚â§s z‚â§n))))) (4*n<16^n n) ‚ü©
    15 + 16 ^ n
  ‚â§‚ü® ‚Ñï.+-monoÀ°-‚â§ (16 ^ n) (‚Ñï.*-mono ≥-‚â§ 15 (‚Ñï.m^n>0 16 n)) ‚ü©
    15 * 16 ^ n + 16 ^ n
  ‚â°‚ü® Eq.cong (15 * 16 ^ n +_) (‚Ñï.+-identity ≥ (16 ^ n)) ‚ü®
    15 * 16 ^ n + (16 ^ n + 0)
  ‚â°‚ü® ‚Ñï.*-distrib ≥-+ (16 ^ n) 15 1 ‚ü®
    16 * 16 ^ n
  ‚â°‚ü®‚ü©
    16 ^ suc n
  ‚àé
  where
  open ‚Ñï.‚â§-Reasoning

size2CC>0 : ‚àÄ {i} (2cc : 2CC.2CC i NAT) ‚Üí 0 < size2CC 2cc
size2CC>0 (a 2CC.-< cs >-) = s‚â§s z‚â§n
size2CC>0 (D 2CC.‚ü® l , r ‚ü©) = s‚â§s z‚â§n

goal : ‚àÄ {i} (n : ‚Ñï) (2cc : 2CC.2CC i NAT)
  ‚Üí OC.‚ü¶ oc (4 * n) ‚üß ‚âÖ 2CC.‚ü¶ 2cc ‚üß
  ‚Üí n * sizeWFOC (oc (4 * n)) < size2CC 2cc
goal zero 2cc 2cc‚âÖoc = size2CC>0 2cc
goal n@(suc _) 2cc (oc‚äÜ2cc , 2cc‚äÜoc) =
  begin-strict
    n * sizeWFOC (oc (4 * n))
  ‚â°‚ü® Eq.cong (n *_) (size-oc (4 * n)) ‚ü©
    n * (2 ^ (suc (4 * n)) + 2 * (4 * n))
  ‚â°‚ü®‚ü©
    n * (2 * 2 ^ (4 * n) + 2 * (4 * n))
  ‚â°‚ü® Eq.cong (n *_) (‚Ñï.*-distribÀ°-+ 2 (2 ^ (4 * n)) (4 * n)) ‚ü®
    n * (2 * (2 ^ (4 * n) + 4 * n))
  ‚â°‚ü® ‚Ñï.*-assoc n 2 (2 ^ (4 * n) + 4 * n) ‚ü®
    n * 2 * (2 ^ (4 * n) + 4 * n)
  <‚ü® ‚Ñï.*-mono ≥-< (n * 2) (‚Ñï.+-mono ≥-< (2 ^ (4 * n)) (4*n<16^n n)) ‚ü©
    n * 2 * (2 ^ (4 * n) + 16 ^ n)
  ‚â°‚ü® Eq.cong (Œª x ‚Üí n * 2 * (2 ^ (4 * n) + x)) (‚Ñï.^-*-assoc 2 4 n) ‚ü©
    n * 2 * (2 ^ (4 * n) + 2 ^ (4 * n))
  ‚â°‚ü® Eq.cong (_* (2 ^ (4 * n) + 2 ^ (4 * n))) (‚Ñï.*-comm n 2) ‚ü©
    2 * n * (2 ^ (4 * n) + 2 ^ (4 * n))
  ‚â°‚ü® Eq.cong (Œª x ‚Üí 2 * n * (2 ^ (4 * n) + x)) (‚Ñï.+-identity ≥ (2 ^ (4 * n))) ‚ü®
    2 * n * (2 ^ (4 * n) + (2 ^ (4 * n) + 0))
  ‚â°‚ü®‚ü©
    2 * n * (2 * 2 ^ (4 * n))
  ‚â°‚ü® ‚Ñï.*-assoc (2 * n) 2 (2 ^ (4 * n)) ‚ü®
    2 * n * 2 * 2 ^ (4 * n)
  ‚â°‚ü® Eq.cong (_* 2 ^ (4 * n)) (‚Ñï.*-comm (2 * n) 2) ‚ü©
    2 * (2 * n) * 2 ^ (4 * n)
  ‚â°‚ü® Eq.cong (_* 2 ^ (4 * n)) (‚Ñï.*-assoc 2 2 n) ‚ü®
    (2 * 2) * n * 2 ^ (4 * n)
  ‚â°‚ü®‚ü©
    4 * n * 2 ^ (4 * n)
  ‚â§‚ü® ‚Ñï.*-monoÀ°-‚â§ (2 ^ (4 * n)) (‚Ñï.m‚â§n+m (4 * n) 1) ‚ü©
    suc (4 * n) * 2 ^ (4 * n)
  ‚â°‚ü® Eq.cong (_* 2 ^ (4 * n)) (List.length-upTo (suc (4 * n))) ‚ü®
    List.length (List.upTo (suc (4 * n))) * 2 ^ (4 * n)
  <‚ü® big (4 * n) 2cc (List.upTo (suc (4 * n))) (Unique.applyUpTo‚Å∫‚ÇÅ id (suc (4 * n)) (Œª i<j j<n ‚Üí ‚Ñï.<‚áí‚â¢ i<j)) (‚äÜ‚áíAll‚àà (4 * n) (suc (4 * n)) ‚Ñï.‚â§-refl 2cc oc‚äÜ2cc) ‚ü©
    size2CC 2cc
  ‚àé
  where
  open ‚Ñï.‚â§-Reasoning

OC‚â±2CC : SizedWFOC ‚â±Size Sized2CC
OC‚â±2CC n = NAT , oc (4 * n) , Œª 2cc oc‚âÖ2cc ‚Üí goal n 2cc oc‚âÖ2cc
