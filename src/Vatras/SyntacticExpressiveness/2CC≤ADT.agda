open import Vatras.Framework.Definitions using (ùîΩ; ùî∏; atoms)
open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_; _‚â¢_; refl)
module Vatras.SyntacticExpressiveness.2CC‚â§ADT (F : ùîΩ) (A : ùî∏) where

open import Data.Bool using (Bool; true; false; if_then_else_)
open import Data.Empty using (‚ä•-elim)
open import Data.Nat as ‚Ñï using (‚Ñï; suc; zero; _‚â§_; z‚â§n; s‚â§s; _<_; _‚âÆ_; _<?_; _+_; pred; _*_; _^_; _‚âü_)
import Data.Nat.Properties as ‚Ñï
open import Data.Fin as Fin using (Fin; zero; suc)
import Data.Fin.Properties as Fin
open import Data.List as List using (List; []; _‚à∑_)
import Data.List.Properties as List
import Data.List.Membership.Propositional as List
import Data.List.Membership.Propositional.Properties as List
open import Data.List.NonEmpty as List‚Å∫ using (List‚Å∫; _‚à∑_)
import Data.List.NonEmpty.Properties as List‚Å∫
open import Data.Product using (_,_; proj‚ÇÅ; proj‚ÇÇ)
open import Function using (_‚àò_)
open import Relation.Nullary.Decidable using (Dec; yes; no)
open import Relation.Nullary.Negation using (¬¨_)
open import Size using (Size; ‚àû)

open import Vatras.Data.EqIndexedSet using (_‚âÖ_; ‚âÖ-trans; ‚âÖ-sym; ‚âÖ[]‚Üí‚âÖ; _‚äÜ_; ‚äÜ-trans; _‚àà_)
open import Vatras.Framework.Variants using (Rose; Rose-injective)
open import Vatras.Framework.VariantGenerator (Rose ‚àû) A using (VariantGenerator)
open import Vatras.Framework.Relation.Expression (Rose ‚àû) using (_,_‚ä¢_‚â£_)
open import Vatras.Util.List using (find-or-last)
open import Vatras.Lang.All.Fixed F (Rose ‚àû)
open import Vatras.Translation.Lang.2CC.Rename using (2CC-rename)
open import Vatras.Framework.Compiler using (LanguageCompiler)
open import Vatras.Translation.LanguageMap using (ADT‚Üí2CC)
open import Vatras.SyntacticExpressiveness A using (_‚â§Size_)
open import Vatras.SyntacticExpressiveness.Sizes F A using (sizeRose; Sized2CC; size2CC; SizedADT; sizeADT)
open import Vatras.Lang.2CC.Encode using (encode; encoder)
open import Vatras.Framework.Compiler using (_‚äï_)

ADT‚Üí2CC' : LanguageCompiler ADT.ADTL 2CC.2CCL
ADT‚Üí2CC' = ADT‚Üí2CC encoder

lemma3 : ‚àÄ {‚Ñì} {A : Set ‚Ñì} (f g : A ‚Üí ‚Ñï) (xs : List A) ‚Üí (‚àÄ x ‚Üí f x ‚â§ g x) ‚Üí List.sum (List.map f xs) ‚â§ List.sum (List.map g xs)
lemma3 f g [] f‚â§g = z‚â§n
lemma3 f g (x ‚à∑ xs) f‚â§g =
  begin
    List.sum (List.map f (x ‚à∑ xs))
  ‚â°‚ü®‚ü©
    f x + List.sum (List.map f xs)
  ‚â§‚ü® ‚Ñï.+-monoÀ°-‚â§ (List.sum (List.map f xs)) (f‚â§g x) ‚ü©
    g x + List.sum (List.map f xs)
  ‚â§‚ü® ‚Ñï.+-mono ≥-‚â§ (g x) (lemma3 f g xs f‚â§g) ‚ü©
    g x + List.sum (List.map g xs)
  ‚â°‚ü®‚ü©
    List.sum (List.map g (x ‚à∑ xs))
  ‚àé
  where
  open ‚Ñï.‚â§-Reasoning

lemma2 : ‚àÄ {i} (v : Rose i A) ‚Üí size2CC (encode v) ‚â§ sizeRose v
lemma2 (a Rose.-< cs >-) =
  begin
    size2CC (encode (a Rose.-< cs >-))
  ‚â°‚ü®‚ü©
    size2CC (a 2CC.2CC.-< List.map encode cs >-)
  ‚â°‚ü®‚ü©
    suc (List.sum (List.map size2CC (List.map encode cs)))
  ‚â°‚ü® Eq.cong (Œª x ‚Üí suc (List.sum x)) (List.map-‚àò cs) ‚ü®
    suc (List.sum (List.map (size2CC ‚àò encode) cs))
  ‚â§‚ü® s‚â§s (lemma3 (size2CC ‚àò encode) sizeRose cs lemma2) ‚ü©
    suc (List.sum (List.map sizeRose cs))
  ‚â°‚ü®‚ü©
    sizeRose (a Rose.-< cs >-)
  ‚àé
  where
  open ‚Ñï.‚â§-Reasoning

lemma : ‚àÄ (adt : ADT.ADT A) ‚Üí size2CC (LanguageCompiler.compile ADT‚Üí2CC' adt) ‚â§ sizeADT adt
lemma (ADT.ADT.leaf v) = ‚Ñï.m‚â§n‚áím‚â§1+n (lemma2 v)
lemma (D ADT.ADT.‚ü® l , r ‚ü©) =
  begin
    size2CC (LanguageCompiler.compile ADT‚Üí2CC' (D ADT.ADT.‚ü® l , r ‚ü©))
  ‚â°‚ü®‚ü©
    size2CC (D 2CC.2CC.‚ü® LanguageCompiler.compile ADT‚Üí2CC' l , LanguageCompiler.compile ADT‚Üí2CC' r ‚ü©)
  ‚â°‚ü®‚ü©
    suc (size2CC (LanguageCompiler.compile ADT‚Üí2CC' l) + size2CC (LanguageCompiler.compile ADT‚Üí2CC' r))
  ‚â§‚ü® s‚â§s (‚Ñï.+-monoÀ°-‚â§ (size2CC (LanguageCompiler.compile ADT‚Üí2CC' r)) (lemma l)) ‚ü©
    suc (sizeADT l + size2CC (LanguageCompiler.compile ADT‚Üí2CC' r))
  ‚â§‚ü® s‚â§s (‚Ñï.+-mono ≥-‚â§ (sizeADT l) (lemma r)) ‚ü©
    suc (sizeADT l + sizeADT r)
  ‚àé
  where
  open ‚Ñï.‚â§-Reasoning

2CC‚â§ADT : Sized2CC ‚â§Size SizedADT
2CC‚â§ADT = 1 , Œª adt ‚Üí LanguageCompiler.compile ADT‚Üí2CC' adt , ‚âÖ-sym (‚âÖ[]‚Üí‚âÖ (LanguageCompiler.preserves ADT‚Üí2CC' adt)) , Eq.subst (size2CC (LanguageCompiler.compile ADT‚Üí2CC' adt )‚â§_) (Eq.sym (‚Ñï.+-identity ≥ (sizeADT adt))) (lemma adt)
