open import Vatras.Framework.Definitions using (ùîΩ; ùî∏; atoms)
module Vatras.SyntacticExpressiveness.2CC‚â§ADT (F : ùîΩ) where

open import Data.Nat using (suc; _‚â§_; s‚â§s; _+_)
import Data.Nat.Properties as ‚Ñï
import Data.List as List
import Data.List.Properties as List
open import Data.Product using (_,_)
open import Function using (_‚àò_)
import Relation.Binary.PropositionalEquality as Eq
open import Size using (Size; ‚àû)

open import Vatras.Data.EqIndexedSet using (‚âÖ-sym; ‚âÖ[]‚Üí‚âÖ)
open import Vatras.Framework.Variants using (Rose)
import Vatras.Util.List as List
open import Vatras.Lang.All.Fixed F (Rose ‚àû)
open import Vatras.Translation.Lang.2CC.Rename using (2CC-rename)
open import Vatras.Framework.Compiler using (LanguageCompiler)
open import Vatras.Translation.LanguageMap using (ADT‚Üí2CC)
open import Vatras.SyntacticExpressiveness using (_‚â§Size_)
open import Vatras.SyntacticExpressiveness.Sizes F using (sizeRose; Sized2CC; size2CC; SizedADT; sizeADT)
open import Vatras.Lang.2CC.Encode using (encode; encoder)

ADT‚Üí2CC' : LanguageCompiler ADT.ADTL 2CC.2CCL
ADT‚Üí2CC' = ADT‚Üí2CC encoder

lemma2 : ‚àÄ {i : Size} {A : ùî∏} (v : Rose i A) ‚Üí size2CC (encode v) ‚â§ sizeRose v
lemma2 (a Rose.-< cs >-) =
  begin
    size2CC (encode (a Rose.-< cs >-))
  ‚â°‚ü®‚ü©
    size2CC (a 2CC.2CC.-< List.map encode cs >-)
  ‚â°‚ü®‚ü©
    suc (List.sum (List.map size2CC (List.map encode cs)))
  ‚â°‚ü® Eq.cong (Œª x ‚Üí suc (List.sum x)) (List.map-‚àò cs) ‚ü®
    suc (List.sum (List.map (size2CC ‚àò encode) cs))
  ‚â§‚ü® s‚â§s (List.sum-map-‚â§ (size2CC ‚àò encode) sizeRose cs lemma2) ‚ü©
    suc (List.sum (List.map sizeRose cs))
  ‚â°‚ü®‚ü©
    sizeRose (a Rose.-< cs >-)
  ‚àé
  where
  open ‚Ñï.‚â§-Reasoning

lemma : ‚àÄ {A : ùî∏} ‚Üí (adt : ADT.ADT A) ‚Üí size2CC (LanguageCompiler.compile ADT‚Üí2CC' adt) ‚â§ sizeADT adt
lemma (ADT.ADT.leaf v) = ‚Ñï.m‚â§n‚áím‚â§1+n (lemma2 v)
lemma (D ADT.ADT.‚ü® l , r ‚ü©) =
  begin
    size2CC (LanguageCompiler.compile ADT‚Üí2CC' (D ADT.ADT.‚ü® l , r ‚ü©))
  ‚â°‚ü®‚ü©
    size2CC (D 2CC.2CC.‚ü® LanguageCompiler.compile ADT‚Üí2CC' l , LanguageCompiler.compile ADT‚Üí2CC' r ‚ü©)
  ‚â°‚ü®‚ü©
    suc (size2CC (LanguageCompiler.compile ADT‚Üí2CC' l) + size2CC (LanguageCompiler.compile ADT‚Üí2CC' r))
  ‚â§‚ü® s‚â§s (‚Ñï.+-monoÀ°-‚â§ (size2CC (LanguageCompiler.compile ADT‚Üí2CC' r)) (lemma l)) ‚ü©
    suc (sizeADT l + size2CC (LanguageCompiler.compile ADT‚Üí2CC' r))
  ‚â§‚ü® s‚â§s (‚Ñï.+-mono ≥-‚â§ (sizeADT l) (lemma r)) ‚ü©
    suc (sizeADT l + sizeADT r)
  ‚àé
  where
  open ‚Ñï.‚â§-Reasoning

2CC‚â§ADT : Sized2CC ‚â§Size SizedADT
2CC‚â§ADT = 1 , Œª A adt ‚Üí LanguageCompiler.compile ADT‚Üí2CC' adt , ‚âÖ-sym (‚âÖ[]‚Üí‚âÖ (LanguageCompiler.preserves ADT‚Üí2CC' adt)) , Eq.subst (size2CC (LanguageCompiler.compile ADT‚Üí2CC' adt )‚â§_) (Eq.sym (‚Ñï.+-identity ≥ (sizeADT adt))) (lemma adt)
