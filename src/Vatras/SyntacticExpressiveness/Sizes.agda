open import Vatras.Framework.Definitions using (ùîΩ; ùî∏; atoms)
module Vatras.SyntacticExpressiveness.Sizes (F : ùîΩ) (A : ùî∏) where

open import Data.Nat using (‚Ñï; suc; zero; _+_)
import Data.List as List
import Data.List.NonEmpty as List‚Å∫
import Data.Vec as Vec
open import Size using (‚àû)

open import Vatras.Util.Nat.AtLeast using (‚Ñï‚â•)
open import Vatras.Framework.Variants using (Rose)
open import Vatras.Lang.All.Fixed F (Rose ‚àû)
open import Vatras.SyntacticExpressiveness A using (SizedLang)

sizeRose : ‚àÄ {i} ‚Üí Rose i A ‚Üí ‚Ñï
sizeRose (a Rose.-< cs >-) = suc (List.sum (List.map sizeRose cs))

size2CC : ‚àÄ {i} ‚Üí 2CC.2CC i A ‚Üí ‚Ñï
size2CC (a 2CC.2CC.-< cs >-) = suc (List.sum (List.map size2CC cs))
size2CC (D 2CC.2CC.‚ü® l , r ‚ü©) = suc (size2CC l + size2CC r)

Sized2CC : SizedLang
Sized2CC = record
  { Lang = 2CC.2CCL
  ; size = size2CC
  }

sizeNCC : ‚àÄ {i} n ‚Üí NCC.NCC n i A ‚Üí ‚Ñï
sizeNCC n (a NCC.NCC.-< cs >-) = suc (List.sum (List.map (sizeNCC n) cs))
sizeNCC n (D NCC.NCC.‚ü® cs ‚ü©) = suc (Vec.sum (Vec.map (sizeNCC n) cs))

SizedNCC : ‚Ñï‚â• 2 ‚Üí SizedLang
SizedNCC n = record
  { Lang = NCC.NCCL n
  ; size = sizeNCC n
  }

sizeCCC : ‚àÄ {i} ‚Üí CCC.CCC i A ‚Üí ‚Ñï
sizeCCC (a CCC.CCC.-< cs >-) = suc (List.sum (List.map sizeCCC cs))
sizeCCC (D CCC.CCC.‚ü® cs ‚ü©) = suc (List.sum (List.map sizeCCC (List‚Å∫.toList cs)))

SizedCCC : SizedLang
SizedCCC = record
  { Lang = CCC.CCCL
  ; size = sizeCCC
  }

sizeADT : ADT.ADT A ‚Üí ‚Ñï
sizeADT (ADT.ADT.leaf v) = suc (sizeRose v)
sizeADT (D ADT.ADT.‚ü® l , r ‚ü©) = suc (sizeADT l + sizeADT r)

SizedADT : SizedLang
SizedADT = record
  { Lang = ADT.ADTL
  ; size = sizeADT
  }
