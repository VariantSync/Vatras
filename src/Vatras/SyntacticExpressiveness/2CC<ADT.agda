open import Vatras.Framework.Definitions using (ùî∏; atoms)
open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_; _‚â¢_; refl)
module Vatras.SyntacticExpressiveness.2CC<ADT (A : ùî∏) (a‚ÇÅ a‚ÇÇ : atoms A) (a‚ÇÅ‚â¢a‚ÇÇ : a‚ÇÅ ‚â¢ a‚ÇÇ) where

open import Data.Bool using (Bool; true; false; if_then_else_)
open import Data.Empty using (‚ä•-elim)
open import Data.Nat as ‚Ñï using (‚Ñï; suc; zero; _‚â§_; z‚â§n; s‚â§s; _<_; _‚âÆ_; _<?_; _+_; pred; _*_; _^_; _‚âü_)
import Data.Nat.Properties as ‚Ñï
open import Data.Fin as Fin using (Fin; zero; suc)
import Data.Fin.Properties as Fin
open import Data.List as List using (List; []; _‚à∑_)
import Data.List.Properties as List
import Data.List.Membership.Propositional as List
import Data.List.Membership.Propositional.Properties as List
open import Data.List.NonEmpty as List‚Å∫ using (List‚Å∫; _‚à∑_)
import Data.List.NonEmpty.Properties as List‚Å∫
open import Data.Product using (_,_; proj‚ÇÅ; proj‚ÇÇ)
open import Function using (_‚àò_)
open import Relation.Nullary.Decidable using (Dec; yes; no)
open import Relation.Nullary.Negation using (¬¨_)
open import Size using (Size; ‚àû)

open import Vatras.Data.EqIndexedSet using (_‚âÖ_; ‚âÖ-trans; ‚âÖ-sym; _‚äÜ_; ‚äÜ-trans; _‚àà_)
open import Vatras.Framework.Variants using (Rose; Rose-injective)
open import Vatras.Framework.VariantGenerator (Rose ‚àû) A using (VariantGenerator)
open import Vatras.Framework.Relation.Expression (Rose ‚àû) using (_,_‚ä¢_‚â£_)
open import Vatras.Util.List using (find-or-last)
open import Vatras.Lang.All.Fixed ‚Ñï (Rose ‚àû)
open import Vatras.SyntacticExpressiveness A using (_‚â±Size_; _<Size_)
open import Vatras.SyntacticExpressiveness.Sizes ‚Ñï A using (Sized2CC; size2CC; SizedADT; sizeADT)
open import Vatras.SyntacticExpressiveness.2CC‚â§ADT ‚Ñï A using (2CC‚â§ADT)

e‚ÇÅ-cs : ‚Ñï ‚Üí ‚Ñï ‚Üí List (2CC.2CC ‚àû A)
e‚ÇÅ-cs zero D = []
e‚ÇÅ-cs (suc n) D = D 2CC.2CC.‚ü® a‚ÇÅ 2CC.2CC.-< [] >- , a‚ÇÇ 2CC.2CC.-< [] >- ‚ü© ‚à∑ e‚ÇÅ-cs n (suc D)

e‚ÇÅ : ‚Ñï ‚Üí 2CC.2CC ‚àû A
e‚ÇÅ n = a‚ÇÅ 2CC.2CC.-< e‚ÇÅ-cs n zero >-

size-e‚ÇÅ-cs : ‚àÄ n D ‚Üí List.sum (List.map size2CC (e‚ÇÅ-cs n D)) ‚â° n * 3
size-e‚ÇÅ-cs zero D = refl
size-e‚ÇÅ-cs (suc n) D = Eq.cong (3 +_) (size-e‚ÇÅ-cs n (suc D))

size-e‚ÇÅ : ‚àÄ n ‚Üí size2CC (e‚ÇÅ n) ‚â° 1 + n * 3
size-e‚ÇÅ n = Eq.cong suc (size-e‚ÇÅ-cs n zero)

variants-cs : ‚àÄ n ‚Üí Fin (2 ^ n) ‚Üí List (Rose ‚àû A)
variants-cs zero zero = []
variants-cs (suc n) i with Fin.to‚Ñï i <? 2 ^ n
... | yes i<2^n = a‚ÇÅ Rose.-< [] >- ‚à∑ variants-cs n (Fin.from‚Ñï< i<2^n)
... | no i‚âÆ2^n = a‚ÇÇ Rose.-< [] >- ‚à∑ variants-cs n (Eq.subst Fin (‚Ñï.+-identity ≥ (2 ^ n)) (Fin.reduce‚â• i (‚Ñï.‚âÆ‚áí‚â• i‚âÆ2^n)))

variants : ‚àÄ n ‚Üí VariantGenerator (pred (2 ^ n))
variants n i = a‚ÇÅ Rose.-< variants-cs n (Eq.subst Fin (‚Ñï.suc-pred (2 ^ n) {{‚Ñï.>-nonZero (‚Ñï.m^n>0 2 n)}}) i) >-

lemma1 : ‚àÄ n ‚Üí variants n ‚äÜ 2CC.‚ü¶ e‚ÇÅ n ‚üß
lemma1 n i = config n i' , Eq.cong (a‚ÇÅ Rose.-<_>-) (go n i' zero Œª o ‚Üí Eq.cong (config n i') (‚Ñï.+-identity ≥ o))
  where
  i' = Eq.subst Fin (‚Ñï.suc-pred (2 ^ n) {{‚Ñï.>-nonZero (‚Ñï.m^n>0 2 n)}}) i

  config : ‚àÄ n ‚Üí Fin (2 ^ n) ‚Üí ‚Ñï ‚Üí Bool
  config zero zero k = true
  config (suc n) i k with Fin.to‚Ñï i <? 2 ^ n
  config (suc n) i zero | yes i<2^n = true
  config (suc n) i zero | no i‚âÆ2^n = false
  config (suc n) i (suc k) | yes i<2^n = config n (Fin.from‚Ñï< i<2^n) k
  config (suc n) i (suc k) | no i‚âÆ2^n = config n (Eq.subst Fin (‚Ñï.+-identity ≥ (2 ^ n)) (Fin.reduce‚â• i (‚Ñï.‚âÆ‚áí‚â• i‚âÆ2^n))) k

  open Eq.‚â°-Reasoning

  config-<2^m : ‚àÄ m j D ‚Üí (j<2^m : Fin.to‚Ñï j < 2 ^ m) ‚Üí config (suc m) j (suc D) ‚â° config m (Fin.from‚Ñï< j<2^m) D
  config-<2^m m j D j<2^m with Fin.to‚Ñï j <? 2 ^ m
  ... | yes _ = refl
  ... | no j‚âÆ2^m = ‚ä•-elim (j‚âÆ2^m j<2^m)

  config-‚âÆ2^m : ‚àÄ m j D ‚Üí (j‚âÆ2^m : Fin.to‚Ñï j ‚âÆ 2 ^ m) ‚Üí config (suc m) j (suc D) ‚â° config m (Eq.subst Fin (‚Ñï.+-identity ≥ (2 ^ m)) (Fin.reduce‚â• j (‚Ñï.‚âÆ‚áí‚â• j‚âÆ2^m))) D
  config-‚âÆ2^m m j D j‚âÆ2^m with Fin.to‚Ñï j <? 2 ^ m
  ... | yes j<2^m = ‚ä•-elim (j‚âÆ2^m j<2^m)
  ... | no _ = refl

  go : ‚àÄ m j D ‚Üí (‚àÄ o ‚Üí config n i' (o + D) ‚â° config m j o) ‚Üí variants-cs m j ‚â° List.map (Œª e ‚Üí 2CC.‚ü¶ e ‚üß (config n i')) (e‚ÇÅ-cs m D)
  go zero zero D p = refl
  go (suc m) j D p with Fin.to‚Ñï j <? 2 ^ m | p 0
  ... | yes k<2^m | p' =
    begin
      a‚ÇÅ Rose.-< [] >- ‚à∑ variants-cs m (Fin.from‚Ñï< k<2^m)
    ‚â°‚ü® Eq.cong (a‚ÇÅ Rose.-< [] >- ‚à∑_) (go m (Fin.from‚Ñï< k<2^m) (suc D) (Œª o ‚Üí Eq.trans (Eq.trans (Eq.cong (config n i') (‚Ñï.+-suc o D)) (p (suc o))) (config-<2^m m j o k<2^m))) ‚ü©
      a‚ÇÅ Rose.-< [] >- ‚à∑ List.map (Œª e ‚Üí 2CC.‚ü¶ e ‚üß (config n i')) (e‚ÇÅ-cs m (suc D))
    ‚â°‚ü®‚ü©
      (if true then 2CC.‚ü¶ a‚ÇÅ 2CC.2CC.-< [] >- ‚üß (config n i') else 2CC.‚ü¶ a‚ÇÇ 2CC.2CC.-< [] >- ‚üß (config n i')) ‚à∑ List.map (Œª e ‚Üí 2CC.‚ü¶ e ‚üß (config n i')) (e‚ÇÅ-cs m (suc D))
    ‚â°‚ü® Eq.cong (Œª x ‚Üí (if x then 2CC.‚ü¶ a‚ÇÅ 2CC.2CC.-< [] >- ‚üß (config n i') else 2CC.‚ü¶ a‚ÇÇ 2CC.2CC.-< [] >- ‚üß (config n i')) ‚à∑ List.map (Œª e ‚Üí 2CC.‚ü¶ e ‚üß (config n i')) (e‚ÇÅ-cs m (suc D))) p' ‚ü®
      (if config n i' D then 2CC.‚ü¶ a‚ÇÅ 2CC.2CC.-< [] >- ‚üß (config n i') else 2CC.‚ü¶ a‚ÇÇ 2CC.2CC.-< [] >- ‚üß (config n i')) ‚à∑ List.map (Œª e ‚Üí 2CC.‚ü¶ e ‚üß (config n i')) (e‚ÇÅ-cs m (suc D))
    ‚â°‚ü®‚ü©
      2CC.‚ü¶ D 2CC.2CC.‚ü® a‚ÇÅ 2CC.2CC.-< [] >- , a‚ÇÇ 2CC.2CC.-< [] >- ‚ü© ‚üß (config n i') ‚à∑ List.map (Œª e ‚Üí 2CC.‚ü¶ e ‚üß (config n i')) (e‚ÇÅ-cs m (suc D))
    ‚àé
  ... | no k‚âÆ2^m | p' =
    begin
      a‚ÇÇ Rose.-< [] >- ‚à∑ variants-cs m j'
    ‚â°‚ü® Eq.cong (a‚ÇÇ Rose.-< [] >- ‚à∑_) (go m j' (suc D) (Œª o ‚Üí Eq.trans (Eq.trans (Eq.cong (config n i') (‚Ñï.+-suc o D)) (p (suc o))) (config-‚âÆ2^m m j o k‚âÆ2^m))) ‚ü©
      a‚ÇÇ Rose.-< [] >- ‚à∑ List.map (Œª e ‚Üí 2CC.‚ü¶ e ‚üß (config n i')) (e‚ÇÅ-cs m (suc D))
    ‚â°‚ü®‚ü©
      (if false then 2CC.‚ü¶ a‚ÇÅ 2CC.2CC.-< [] >- ‚üß (config n i') else 2CC.‚ü¶ a‚ÇÇ 2CC.2CC.-< [] >- ‚üß (config n i')) ‚à∑ List.map (Œª e ‚Üí 2CC.‚ü¶ e ‚üß (config n i')) (e‚ÇÅ-cs m (suc D))
    ‚â°‚ü® Eq.cong (Œª x ‚Üí (if x then 2CC.‚ü¶ a‚ÇÅ 2CC.2CC.-< [] >- ‚üß (config n i') else 2CC.‚ü¶ a‚ÇÇ 2CC.2CC.-< [] >- ‚üß (config n i')) ‚à∑ List.map (Œª e ‚Üí 2CC.‚ü¶ e ‚üß (config n i')) (e‚ÇÅ-cs m (suc D))) p' ‚ü®
      (if config n i' D then 2CC.‚ü¶ a‚ÇÅ 2CC.2CC.-< [] >- ‚üß (config n i') else 2CC.‚ü¶ a‚ÇÇ 2CC.2CC.-< [] >- ‚üß (config n i')) ‚à∑ List.map (Œª e ‚Üí 2CC.‚ü¶ e ‚üß (config n i')) (e‚ÇÅ-cs m (suc D))
    ‚â°‚ü®‚ü©
      2CC.‚ü¶ D 2CC.2CC.‚ü® a‚ÇÅ 2CC.2CC.-< [] >- , a‚ÇÇ 2CC.2CC.-< [] >- ‚ü© ‚üß (config n i') ‚à∑ List.map (Œª e ‚Üí 2CC.‚ü¶ e ‚üß (config n i')) (e‚ÇÅ-cs m (suc D))
    ‚àé
    where
    j' = Eq.subst Fin (‚Ñï.+-identity ≥ (2 ^ m)) (Fin.reduce‚â• j (‚Ñï.‚âÆ‚áí‚â• k‚âÆ2^m))

ADT-leafs : ADT.ADT A ‚Üí List‚Å∫ (Rose ‚àû A)
ADT-leafs (ADT.ADT.leaf v) = v ‚à∑ []
ADT-leafs (D ADT.ADT.‚ü® l , r ‚ü©) = ADT-leafs l List‚Å∫.‚Å∫++‚Å∫ ADT-leafs r

ADT-leaf-count : ADT.ADT A ‚Üí ‚Ñï
ADT-leaf-count e‚ÇÇ = List‚Å∫.length (ADT-leafs e‚ÇÇ)

ADT-leaf-count-lemma : ‚àÄ D ‚Üí (l r : ADT.ADT A) ‚Üí ADT-leaf-count (D ADT.ADT.‚ü® l , r ‚ü©) ‚â° ADT-leaf-count l + ADT-leaf-count r
ADT-leaf-count-lemma D l r =
  begin
    ADT-leaf-count (D ADT.ADT.‚ü® l , r ‚ü©)
  ‚â°‚ü®‚ü©
    List‚Å∫.length (ADT-leafs l List‚Å∫.‚Å∫++‚Å∫ ADT-leafs r)
  ‚â°‚ü® Eq.cong List.length (List‚Å∫.toList-‚Å∫++‚Å∫ (ADT-leafs l) (ADT-leafs r)) ‚ü®
    List.length (List‚Å∫.toList (ADT-leafs l) List.++ List‚Å∫.toList (ADT-leafs r))
  ‚â°‚ü® List.length-++ (List‚Å∫.toList (ADT-leafs l)) ‚ü©
    ADT-leaf-count l + ADT-leaf-count r
  ‚àé
  where
  open Eq.‚â°-Reasoning

leafs-‚â§-size : (e‚ÇÇ : ADT.ADT A) ‚Üí ADT-leaf-count e‚ÇÇ ‚â§ sizeADT e‚ÇÇ
leafs-‚â§-size (ADT.ADT.leaf v) = s‚â§s z‚â§n
leafs-‚â§-size (D ADT.ADT.‚ü® l , r ‚ü©) =
  begin
    ADT-leaf-count (D ADT.ADT.‚ü® l , r ‚ü©)
  ‚â°‚ü® ADT-leaf-count-lemma D l r ‚ü©
    ADT-leaf-count l + ADT-leaf-count r
  ‚â§‚ü® ‚Ñï.+-mono ≥-‚â§ (ADT-leaf-count l) (leafs-‚â§-size r) ‚ü©
    ADT-leaf-count l + sizeADT r
  ‚â§‚ü® ‚Ñï.+-monoÀ°-‚â§ (sizeADT r) (leafs-‚â§-size l) ‚ü©
    sizeADT l + sizeADT r
  <‚ü® ‚Ñï.n<1+n (sizeADT l + sizeADT r) ‚ü©
    suc (sizeADT l + sizeADT r)
  ‚àé
  where
  open ‚Ñï.‚â§-Reasoning

listToIndexedSet : (vs : List‚Å∫ (Rose ‚àû A)) ‚Üí VariantGenerator (pred (List‚Å∫.length vs))
listToIndexedSet vs i = List.lookup (List‚Å∫.toList vs) (Eq.subst Fin (‚Ñï.suc-pred (List‚Å∫.length vs)) i)

_‚âü·µ•_ : ‚àÄ {i} ‚Üí (v‚ÇÅ v‚ÇÇ : Rose i A) ‚Üí Dec (v‚ÇÅ ‚â° v‚ÇÇ)
(a‚ÇÅ Rose.-< cs‚ÇÅ >-) ‚âü·µ• (a‚ÇÇ Rose.-< cs‚ÇÇ >-) with proj‚ÇÇ A a‚ÇÅ a‚ÇÇ | List.‚â°-dec _‚âü·µ•_ cs‚ÇÅ cs‚ÇÇ
(a‚ÇÅ Rose.-< cs‚ÇÅ >-) ‚âü·µ• (a‚ÇÇ Rose.-< cs‚ÇÇ >-) | no a‚ÇÅ‚â¢a‚ÇÇ | _ = no Œª where refl ‚Üí a‚ÇÅ‚â¢a‚ÇÇ refl
(a‚ÇÅ Rose.-< cs‚ÇÅ >-) ‚âü·µ• (a‚ÇÇ Rose.-< cs‚ÇÇ >-) | yes a‚ÇÅ‚â°a‚ÇÇ | no cs‚ÇÅ‚â¢cs‚ÇÇ = no (Œª where refl ‚Üí cs‚ÇÅ‚â¢cs‚ÇÇ refl)
(a‚ÇÅ Rose.-< cs‚ÇÅ >-) ‚âü·µ• (a‚ÇÇ Rose.-< cs‚ÇÇ >-) | yes refl | yes refl = yes refl

ADT-leaf-count‚â§‚Çó : ‚àÄ D l r ‚Üí ADT-leaf-count l ‚â§ ADT-leaf-count (D ADT.ADT.‚ü® l , r ‚ü©)
ADT-leaf-count‚â§‚Çó D l r =
  begin
    ADT-leaf-count l
  ‚â§‚ü® ‚Ñï.m‚â§m+n (ADT-leaf-count l) (ADT-leaf-count r) ‚ü©
    ADT-leaf-count l + ADT-leaf-count r
  ‚â°‚ü® ADT-leaf-count-lemma D l r ‚ü®
    ADT-leaf-count (D ADT.ADT.‚ü® l , r ‚ü©)
  ‚àé
  where
  open ‚Ñï.‚â§-Reasoning

length-++-‚â§‚Çó : ‚àÄ {‚Ñì} {A : Set ‚Ñì} (xs ys : List A) ‚Üí List.length xs ‚â§ List.length (xs List.++ ys)
length-++-‚â§‚Çó xs ys = Eq.subst (_ ‚â§_) (Eq.sym (List.length-++ xs)) (‚Ñï.m‚â§m+n (List.length xs) (List.length ys))

lookup-++·µ£ : ‚àÄ {‚Ñì} {A : Set ‚Ñì} (xs ys : List A) i ‚Üí List.lookup xs i ‚â° List.lookup (xs List.++ ys) (Fin.inject‚â§ i (length-++-‚â§‚Çó xs ys))
lookup-++·µ£ (x ‚à∑ xs) ys zero = refl
lookup-++·µ£ (x ‚à∑ xs) ys (suc i) = lookup-++·µ£ xs ys i

lookup-++‚Çó : ‚àÄ {‚Ñì} {A : Set ‚Ñì} (xs ys : List A) i ‚Üí List.lookup ys i ‚â° List.lookup (xs List.++ ys) (Fin.cast (Eq.sym (List.length-++ xs)) (List.length xs Fin.‚Üë ≥ i))
lookup-++‚Çó [] ys i = Eq.cong (List.lookup ys) (Eq.sym (Fin.cast-is-id refl i))
lookup-++‚Çó (x ‚à∑ xs) ys i = lookup-++‚Çó xs ys i

ADT-leaf‚àà‚ü¶‚üß : ‚àÄ v e‚ÇÇ ‚Üí v ‚àà ADT.‚ü¶ e‚ÇÇ ‚üß ‚Üí v ‚àà listToIndexedSet (ADT-leafs e‚ÇÇ)
ADT-leaf‚àà‚ü¶‚üß v (ADT.ADT.leaf .v) (c , refl) = zero , refl
ADT-leaf‚àà‚ü¶‚üß v (D ADT.ADT.‚ü® l , r ‚ü©) (c , p) with c D
ADT-leaf‚àà‚ü¶‚üß v (D ADT.ADT.‚ü® l , r ‚ü©) (c , p) | true with ADT-leaf‚àà‚ü¶‚üß v l (c , p)
ADT-leaf‚àà‚ü¶‚üß v (D ADT.ADT.‚ü® l , r ‚ü©) (c , p) | true | (i , p') = Fin.inject‚â§ i (ADT-leaf-count‚â§‚Çó D l r) , Eq.trans p' (lookup-++·µ£ (List‚Å∫.toList (ADT-leafs l)) (List‚Å∫.toList (ADT-leafs r)) i)
ADT-leaf‚àà‚ü¶‚üß v (D ADT.ADT.‚ü® l , r ‚ü©) (c , p) | false with ADT-leaf‚àà‚ü¶‚üß v r (c , p)
ADT-leaf‚àà‚ü¶‚üß v (D ADT.ADT.‚ü® l , r ‚ü©) (c , p) | false | (i , p') = (Fin.cast (Eq.sym (ADT-leaf-count-lemma D l r)) (ADT-leaf-count l Fin.‚Üë ≥ i)) , Eq.trans p' (lookup-++‚Çó (List‚Å∫.toList (ADT-leafs l)) (List‚Å∫.toList (ADT-leafs r)) i)

ADT-leaf‚äÜ‚ü¶‚üß : ‚àÄ e‚ÇÇ ‚Üí ADT.‚ü¶ e‚ÇÇ ‚üß ‚äÜ listToIndexedSet (ADT-leafs e‚ÇÇ)
ADT-leaf‚äÜ‚ü¶‚üß e‚ÇÇ i = ADT-leaf‚àà‚ü¶‚üß (ADT.‚ü¶ e‚ÇÇ ‚üß i) e‚ÇÇ (i , refl)

open import Data.List.Relation.Unary.AllPairs using (AllPairs; []; _‚à∑_)
import Data.List.Relation.Unary.AllPairs.Properties as AllPairs
open import Data.List.Relation.Unary.Any using (here; there)
open import Data.List.Relation.Unary.All using (All; []; _‚à∑_)
import Data.List.Relation.Binary.Subset.Propositional as List

Unique : ‚àÄ {‚Ñì} {A : Set ‚Ñì} ‚Üí List A ‚Üí Set ‚Ñì
Unique xs = AllPairs _‚â¢_ xs

Fin-reduce‚â•-injective : ‚àÄ {m n} (i : Fin (m + n)) (j : Fin (m + n)) (m‚â§i : m ‚â§ Fin.to‚Ñï i) (m‚â§j : m ‚â§ Fin.to‚Ñï j) ‚Üí Fin.reduce‚â• i m‚â§i ‚â° Fin.reduce‚â• j m‚â§j ‚Üí i ‚â° j
Fin-reduce‚â•-injective {zero} {.(suc _)} zero j m‚â§i m‚â§j i‚â°j = i‚â°j
Fin-reduce‚â•-injective {zero} {.(suc _)} (suc i) j m‚â§i m‚â§j i‚â°j = i‚â°j
Fin-reduce‚â•-injective {suc m} {zero} (suc i) (suc j) m‚â§i m‚â§j i‚â°j = Eq.cong suc (Fin-reduce‚â•-injective i j (‚Ñï.‚â§-pred m‚â§i) (‚Ñï.‚â§-pred m‚â§j) i‚â°j)
Fin-reduce‚â•-injective {suc m} {suc n} (suc i) (suc j) m‚â§i m‚â§j i‚â°j = Eq.cong suc (Fin-reduce‚â•-injective i j (‚Ñï.‚â§-pred m‚â§i) (‚Ñï.‚â§-pred m‚â§j) i‚â°j)

variants-cs-unique : ‚àÄ n i j ‚Üí i ‚â¢ j ‚Üí variants-cs n i ‚â¢ variants-cs n j
variants-cs-unique zero zero zero i‚â¢j = ‚ä•-elim (i‚â¢j refl)
variants-cs-unique (suc n) i j i‚â¢j cs-i‚â°cs-j with Fin.to‚Ñï i <? 2 ^ n | Fin.to‚Ñï j <? 2 ^ n
... | yes i<2^n | yes j<2^n = variants-cs-unique n (Fin.from‚Ñï< i<2^n) (Fin.from‚Ñï< j<2^n) (i‚â¢j ‚àò Fin.to‚Ñï-injective ‚àò Fin.from‚Ñï<-injective _ _ i<2^n j<2^n) (proj‚ÇÇ (List.‚à∑-injective cs-i‚â°cs-j))
... | yes i<2^n | no j‚âÆ2^n = a‚ÇÅ‚â¢a‚ÇÇ (proj‚ÇÅ (Rose-injective (proj‚ÇÅ (List.‚à∑-injective cs-i‚â°cs-j))))
... | no i‚âÆ2^n | yes j<2^n = a‚ÇÅ‚â¢a‚ÇÇ (Eq.sym (proj‚ÇÅ (Rose-injective (proj‚ÇÅ (List.‚à∑-injective cs-i‚â°cs-j)))))
... | no i‚âÆ2^n | no j‚âÆ2^n = variants-cs-unique n (Eq.subst Fin (‚Ñï.+-identity ≥ (2 ^ n)) (Fin.reduce‚â• i (‚Ñï.‚âÆ‚áí‚â• i‚âÆ2^n))) (Eq.subst Fin (‚Ñï.+-identity ≥ (2 ^ n)) (Fin.reduce‚â• j (‚Ñï.‚âÆ‚áí‚â• j‚âÆ2^n))) (i‚â¢j ‚àò Fin-reduce‚â•-injective i j (‚Ñï.‚âÆ‚áí‚â• i‚âÆ2^n) (‚Ñï.‚âÆ‚áí‚â• j‚âÆ2^n) ‚àò Eq.subst-injective (‚Ñï.+-identity ≥ (2 ^ n))) (proj‚ÇÇ (List.‚à∑-injective cs-i‚â°cs-j))

variants-unique : ‚àÄ n ‚Üí Unique (List.tabulate (variants n))
variants-unique n = AllPairs.tabulate‚Å∫ {f = variants n} go
  where
  go : {i j : Fin (suc (pred (2 ^ n)))} ‚Üí i ‚â¢ j ‚Üí variants n i ‚â¢ variants n j
  go {i} {j} i‚â¢j vs-i‚â°vs-j = variants-cs-unique n (Eq.subst Fin (‚Ñï.suc-pred (2 ^ n) {{‚Ñï.>-nonZero (‚Ñï.m^n>0 2 n)}}) i) (Eq.subst Fin (‚Ñï.suc-pred (2 ^ n) {{‚Ñï.>-nonZero (‚Ñï.m^n>0 2 n)}}) j) (i‚â¢j ‚àò Eq.subst-injective (‚Ñï.suc-pred (2 ^ n) {{‚Ñï.>-nonZero (‚Ñï.m^n>0 2 n)}})) (proj‚ÇÇ (Rose-injective vs-i‚â°vs-j))

IndexedSet-‚äÜ‚áíList-‚äÜ : ‚àÄ {n} (gen : VariantGenerator n) (l : List‚Å∫ (Rose ‚àû A)) ‚Üí gen ‚äÜ listToIndexedSet l ‚Üí List.tabulate gen List.‚äÜ List‚Å∫.toList l
IndexedSet-‚äÜ‚áíList-‚äÜ gen l gen‚äÜl {x} (here refl) with gen‚äÜl zero
... | i , x‚ààl = Eq.subst (List._‚àà (List‚Å∫.toList l)) (Eq.sym x‚ààl) (List.‚àà-lookup {xs = List‚Å∫.toList l} i)
IndexedSet-‚äÜ‚áíList-‚äÜ {suc n} gen l gen‚äÜl {x} (there x‚ààgen) = IndexedSet-‚äÜ‚áíList-‚äÜ {n} (gen ‚àò suc) l (gen‚äÜl ‚àò suc) x‚ààgen

lemma5 : ‚àÄ {‚Ñì} {A : Set ‚Ñì} (u v : A) (xs ys : List A) ‚Üí u ‚â¢ v ‚Üí u List.‚àà (xs List.++ List.[ v ] List.++ ys) ‚Üí u List.‚àà (xs List.++ ys)
lemma5 u v [] ys u‚â¢v (here u‚â°v) = ‚ä•-elim (u‚â¢v u‚â°v)
lemma5 u v [] ys u‚â¢v (there u‚ààys) = u‚ààys
lemma5 u v (x ‚à∑ xs) ys u‚â¢v (here u‚â°x) = here u‚â°x
lemma5 u v (x ‚à∑ xs) ys u‚â¢v (there u‚ààxs++v‚à∑ys) = there (lemma5 u v xs ys u‚â¢v u‚ààxs++v‚à∑ys)

‚àà‚àß‚àâ‚áí‚â¢ : ‚àÄ {‚Ñì} {A : Set ‚Ñì} {y z : A} (xs : List A) ‚Üí y List.‚àà xs ‚Üí All (z ‚â¢_) xs ‚Üí y ‚â¢ z
‚àà‚àß‚àâ‚áí‚â¢ (x ‚à∑ xs) (here y‚â°x) (y‚â¢x ‚à∑ z‚àâxs) y‚â°z = y‚â¢x (Eq.trans (Eq.sym y‚â°z) y‚â°x)
‚àà‚àß‚àâ‚áí‚â¢ (x ‚à∑ xs) (there y‚ààxs) (y‚â¢x ‚à∑ z‚àâxs) y‚â°z = ‚àà‚àß‚àâ‚áí‚â¢ xs y‚ààxs z‚àâxs y‚â°z

length‚â§ : ‚àÄ {‚Ñì} {A : Set ‚Ñì} (xs ys : List A) ‚Üí Unique xs ‚Üí xs List.‚äÜ ys ‚Üí List.length xs ‚â§ List.length ys
length‚â§ [] ys unique-xs xs‚äÜys = z‚â§n
length‚â§ (x ‚à∑ xs) ys unique-xs xs‚äÜys with List.‚àà-‚àÉ++ (xs‚äÜys (here refl))
length‚â§ (x ‚à∑ xs) ys (x‚àâxs ‚à∑ unique-xs) xs‚äÜys | l , r , ys‚â°l++x‚à∑r =
  begin
    List.length (x ‚à∑ xs)
  ‚â°‚ü®‚ü©
    suc (List.length xs)
  ‚â§‚ü® s‚â§s (length‚â§ xs (l List.++ r) unique-xs Œª {y} y‚ààxs ‚Üí lemma5 y x l r (‚àà‚àß‚àâ‚áí‚â¢ xs y‚ààxs x‚àâxs) (Eq.subst (y List.‚àà_) ys‚â°l++x‚à∑r (xs‚äÜys (there y‚ààxs)))) ‚ü©
    suc (List.length (l List.++ r))
  ‚â°‚ü® Eq.cong suc (List.length-++ l) ‚ü©
    suc (List.length l + List.length r)
  ‚â°‚ü® ‚Ñï.+-suc (List.length l) (List.length r) ‚ü®
    List.length l + suc (List.length r)
  ‚â°‚ü®‚ü©
    List.length l + List.length (x ‚à∑ r)
  ‚â°‚ü® List.length-++ l ‚ü®
    List.length (l List.++ (x ‚à∑ r))
  ‚â°‚ü® Eq.cong List.length ys‚â°l++x‚à∑r ‚ü®
    List.length ys
  ‚àé
  where
  open ‚Ñï.‚â§-Reasoning

lemma3 : ‚àÄ n l ‚Üí variants n ‚äÜ listToIndexedSet l ‚Üí 2 ^ n ‚â§ List‚Å∫.length l
lemma3 n l variants‚äÜl =
  begin
    2 ^ n
  ‚â°‚ü® ‚Ñï.suc-pred (2 ^ n) {{‚Ñï.>-nonZero (‚Ñï.m^n>0 2 n)}} ‚ü®
    suc (pred (2 ^ n))
  ‚â°‚ü® List.length-tabulate (variants n) ‚ü®
    List.length (List.tabulate (variants n))
  ‚â§‚ü® length‚â§ (List.tabulate (variants n)) (List‚Å∫.toList l) (variants-unique n) (IndexedSet-‚äÜ‚áíList-‚äÜ (variants n) l variants‚äÜl) ‚ü©
    List‚Å∫.length l
  ‚àé
  where
  open ‚Ñï.‚â§-Reasoning

lemma2 : ‚àÄ n e‚ÇÇ ‚Üí variants n ‚äÜ ADT.‚ü¶ e‚ÇÇ ‚üß ‚Üí 2 ^ n ‚â§ sizeADT e‚ÇÇ
lemma2 n e‚ÇÇ variants‚äÜe‚ÇÇ =
  begin
    2 ^ n
  ‚â§‚ü® lemma3 n (ADT-leafs e‚ÇÇ) (‚äÜ-trans variants‚äÜe‚ÇÇ (ADT-leaf‚äÜ‚ü¶‚üß e‚ÇÇ)) ‚ü©
    ADT-leaf-count e‚ÇÇ
  ‚â§‚ü® leafs-‚â§-size e‚ÇÇ ‚ü©
    sizeADT e‚ÇÇ
  ‚àé
  where
  open ‚Ñï.‚â§-Reasoning

lemma4 : ‚àÄ n ‚Üí 13 * (n * n) < 16 ^ n
lemma4 zero = s‚â§s z‚â§n
lemma4 (suc zero) = ‚Ñï.+-mono ≥-‚â§ 14 z‚â§n
lemma4 (suc (suc n)) = go (suc n)
  where
  open ‚Ñï.‚â§-Reasoning

  go : ‚àÄ n ‚Üí {{‚Ñï.NonZero n}} ‚Üí 13 * ((1 + n) * (1 + n)) < 16 ^ (1 + n)
  go n =
    begin-strict
      13 * ((1 + n) * (1 + n))
    ‚â§‚ü® ‚Ñï.*-mono ≥-‚â§ 13 (
      begin
        (1 + n) * (1 + n)
      ‚â°‚ü®‚ü©
        1 + n + n * (1 + n)
      ‚â°‚ü® Eq.cong (Œª x ‚Üí 1 + n + x) (‚Ñï.*-distribÀ°-+ n 1 n) ‚ü©
        1 + n + (n * 1 + n * n)
      ‚â°‚ü® Eq.cong (Œª x ‚Üí 1 + n + (x + n * n)) (‚Ñï.*-identity ≥ n) ‚ü©
        1 + n + (n + n * n)
      ‚â°‚ü® Eq.cong (Œª x ‚Üí 1 + x) (‚Ñï.+-assoc n n (n * n)) ‚ü®
        1 + (n + n + n * n)
      ‚â§‚ü® ‚Ñï.+-monoÀ°-‚â§ (n + n + n * n) (‚Ñï.m‚â§n*m 1 n) ‚ü©
        (n * 1) + (n + n + n * n)
      ‚â°‚ü® Eq.cong (_+ (n + n + n * n)) (‚Ñï.*-identity ≥ n) ‚ü©
        n + (n + n + n * n)
      ‚â°‚ü® ‚Ñï.+-assoc n (n + n) (n * n) ‚ü®
        n + (n + n) + n * n
      ‚â°‚ü® Eq.cong (Œª x ‚Üí n + (n + x) + n * n) (‚Ñï.+-identity ≥ n) ‚ü®
        n + (n + (n + 0)) + n * n
      ‚â°‚ü®‚ü©
        3 * n + n * n
      ‚â§‚ü® ‚Ñï.+-monoÀ°-‚â§ (n * n) (‚Ñï.*-mono ≥-‚â§ 3 (‚Ñï.m‚â§m*n n n)) ‚ü©
        3 * (n * n) + n * n
      ‚â°‚ü® ‚Ñï.+-comm (3 * (n * n)) (n * n) ‚ü©
        n * n + 3 * (n * n)
      ‚â°‚ü®‚ü©
        4 * (n * n)
      ‚àé
    )‚ü©
      13 * (4 * (n * n))
    ‚â§‚ü® ‚Ñï.*-monoÀ°-‚â§ (4 * (n * n)) (‚Ñï.+-mono ≥-‚â§ 13 (z‚â§n {3})) ‚ü©
      16 * (4 * (n * n))
    ‚â§‚ü® ‚Ñï.*-mono ≥-‚â§ 16 (‚Ñï.*-monoÀ°-‚â§ (n * n) (‚Ñï.+-mono ≥-‚â§ 4 (z‚â§n {9}))) ‚ü©
      16 * (13 * (n * n))
    <‚ü® ‚Ñï.*-mono ≥-< 16 (lemma4 n) ‚ü©
      16 * 16 ^ n
    ‚â°‚ü®‚ü©
      16 ^ (1 + n)
    ‚àé

lemma : ‚àÄ n e‚ÇÇ ‚Üí 2CC.2CCL , ADT.ADTL ‚ä¢ e‚ÇÅ (4 * n) ‚â£ e‚ÇÇ ‚Üí n * size2CC (e‚ÇÅ (4 * n)) < sizeADT e‚ÇÇ
lemma zero (ADT.ADT.leaf v) (e‚ÇÅ‚äÜe‚ÇÇ , e‚ÇÇ‚äÜe‚ÇÅ) = s‚â§s z‚â§n
lemma zero (D ADT.ADT.‚ü® l , r ‚ü©) (e‚ÇÅ‚äÜe‚ÇÇ , e‚ÇÇ‚äÜe‚ÇÅ) = s‚â§s z‚â§n
lemma (suc m) e‚ÇÇ (e‚ÇÅ‚äÜe‚ÇÇ , e‚ÇÇ‚äÜe‚ÇÅ) =
  begin-strict
    n * size2CC (e‚ÇÅ (4 * n))
  ‚â°‚ü® Eq.cong (n *_) (size-e‚ÇÅ (4 * n)) ‚ü©
    n * (1 + (4 * n) * 3)
  ‚â°‚ü® ‚Ñï.*-distribÀ°-+ n 1 (4 * n * 3) ‚ü©
    n * 1 + n * (4 * n * 3)
  ‚â°‚ü® Eq.cong (_+ n * (4 * n * 3)) (‚Ñï.*-identity ≥ n) ‚ü©
    n + n * (4 * n * 3)
  ‚â°‚ü® Eq.cong (Œª x ‚Üí n + n * (x * 3)) (‚Ñï.*-comm 4 n) ‚ü©
    n + n * (n * 4 * 3)
  ‚â°‚ü® Eq.cong (Œª x ‚Üí n + n * x) (‚Ñï.*-assoc n 4 3) ‚ü©
    n + n * (n * (4 * 3))
  ‚â°‚ü®‚ü©
    n + n * (n * 12)
  ‚â°‚ü® Eq.cong (n +_) (‚Ñï.*-assoc n n 12) ‚ü®
    n + n * n * 12
  ‚â§‚ü® ‚Ñï.+-monoÀ°-‚â§ (n * n * 12) (‚Ñï.m‚â§m*n n n) ‚ü©
    n * n + n * n * 12
  ‚â°‚ü® Eq.cong (n * n +_) (‚Ñï.*-comm (n * n) 12) ‚ü©
    n * n + 12 * (n * n)
  ‚â°‚ü®‚ü©
    13 * (n * n)
  <‚ü® lemma4 n ‚ü©
    16 ^ n
  ‚â°‚ü® ‚Ñï.^-*-assoc 2 4 n ‚ü©
    2 ^ (4 * n)
  ‚â§‚ü® lemma2 (4 * n) e‚ÇÇ (‚äÜ-trans (lemma1 (4 * n)) e‚ÇÅ‚äÜe‚ÇÇ) ‚ü©
    sizeADT e‚ÇÇ
  ‚àé
  where
  open ‚Ñï.‚â§-Reasoning
  n = suc m

2CC‚â±ADT : Sized2CC ‚â±Size SizedADT
2CC‚â±ADT n = e‚ÇÅ (4 * n) , Œª e‚ÇÇ e‚ÇÅ‚â£e‚ÇÇ ‚Üí lemma n e‚ÇÇ e‚ÇÅ‚â£e‚ÇÇ

2CC<ADT : Sized2CC <Size SizedADT
2CC<ADT = 2CC‚â§ADT , 2CC‚â±ADT
