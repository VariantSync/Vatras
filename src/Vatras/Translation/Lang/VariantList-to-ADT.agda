open import Vatras.Framework.Definitions using (ùî∏; ùïç)
module Vatras.Translation.Lang.VariantList-to-ADT (V : ùïç) where

open import Data.Bool as Bool using (if_then_else_; true; false)
open import Data.List using (List; []; _‚à∑_)
open import Data.List.Properties using (++-identity ≥)
open import Data.List.NonEmpty as List‚Å∫ using (List‚Å∫; _‚à∑_; _‚à∑‚Å∫_)
open import Data.Nat using (‚Ñï; zero; suc; _‚â°·µá_; _+_; _‚â§_; s‚â§s; z‚â§n; _‚à∏_)
open import Data.Nat.Properties using (+-suc; +-identity ≥; ‚â§-refl; n‚à∏n‚â°0; m‚â§n‚áím‚â§1+n; +-‚à∏-assoc)
open import Data.Product using (_,_)
open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_; refl; sym; cong)
open Eq.‚â°-Reasoning

open import Vatras.Data.EqIndexedSet
open import Vatras.Util.List using (find-or-last)
open import Vatras.Util.AuxProofs using (‚â°·µá-refl; m+n‚â¢·µán)

open import Vatras.Framework.Compiler using (LanguageCompiler)
open import Vatras.Framework.Proof.ForFree V using (completeness-by-expressiveness)
open import Vatras.Framework.Properties.Completeness V using (Complete)
open import Vatras.Framework.Relation.Expressiveness V using (_‚âΩ_; expressiveness-from-compiler)

open import Vatras.Lang.VariantList V as VariantList using (VariantList; VariantListL)
open import Vatras.Lang.VariantList.Properties V using (VariantList-is-Complete)
open import Vatras.Lang.ADT ‚Ñï V

{-|
This function encodes a non-empty list of forests into a rootless variation tree.
This encoding produces n-1 choices where n is the number of forests to encode.

Arguments:
1. Next available index for new feature names.
2. Head of list of forests to encode
3. Tail of list of forests to encode
-}
translate' : ‚àÄ {A} ‚Üí ‚Ñï ‚Üí V A ‚Üí List (V A) ‚Üí ADT A
translate' n x []       = leaf x
translate' n x (y ‚à∑ ys) = n ‚ü® leaf x , translate' (suc n) y ys ‚ü©

translate : ‚àÄ {A} ‚Üí VariantList A ‚Üí ADT A
translate (x ‚à∑ xs) = translate' zero x xs

{-|
A variation tree created by "translate" from a list l produces a forest
from the list at index i when exactly the feature i is set to true.
-}
conf : ‚Ñï ‚Üí Configuration
conf = _‚â°·µá_

{-|
From a configuration, we can compute the index of the produced variant in the initial list.
To do so, we have to inspect the feature at each choice from 0 up to "max", where "max" is the
index of the feature in the last choice.
To prove termination, we start with index i = max (see fnoc) and decrease i step by step.
To inspect the features in ascending order though, we hence have to inspect the configuration c at point "max - i" at each step.
The "offset" value is needed for induction to specify at which point in a sublist we are currently at (i.e., how far we recursed).
-}
fnoci : (offset max i : ‚Ñï) ‚Üí Configuration ‚Üí ‚Ñï
fnoci offset max zero c = max
fnoci offset max (suc i) c =
  if c (offset + (max ‚à∏ suc i))
  then max ‚à∏ suc i
  else fnoci offset max i c

fnoc : (max : ‚Ñï) ‚Üí Configuration ‚Üí ‚Ñï
fnoc max = fnoci zero max max

{-|
The values for "max" and "offset" balance out.
-}
fnoci-invariant : ‚àÄ {‚Ñì} {A : Set ‚Ñì} (x : A) (xs : List‚Å∫ A) (n m i : ‚Ñï) (c : Configuration) ‚Üí
    i ‚â§ m ‚Üí
    find-or-last (fnoci (suc n)      m  i c) (     xs)
  ‚â° find-or-last (fnoci      n  (suc m) i c) (x ‚à∑‚Å∫ xs)
fnoci-invariant x xs n m zero c z‚â§n = refl
fnoci-invariant x xs n (suc m) (suc i) c (s‚â§s i‚â§m)
  rewrite +-‚à∏-assoc 1 i‚â§m
        | sym (+-suc n (m ‚à∏ i))
        with c (n + suc (m ‚à∏ i))
... | true  = refl
... | false = fnoci-invariant x xs n (suc m) i c (m‚â§n‚áím‚â§1+n i‚â§m)

module Preservation (A : ùî∏) where
  translate'-preserves-conf : ‚àÄ (x : V A) (xs : List (V A)) (n : ‚Ñï) (i : ‚Ñï) ‚Üí
    ‚ü¶ translate' n x xs ‚üß (conf (i + n)) ‚â° VariantList.‚ü¶ x ‚à∑ xs ‚üß i
  translate'-preserves-conf x [] n i = refl
  translate'-preserves-conf x (y ‚à∑ ys) n zero    rewrite ‚â°·µá-refl n = refl
  translate'-preserves-conf x (y ‚à∑ ys) n (suc i) rewrite m+n‚â¢·µán i n =
    begin
      ‚ü¶ translate' (suc n) y ys ‚üß (conf (suc i + n))
    ‚â°‚ü® cong (Œª eq ‚Üí ‚ü¶ translate' (suc n) y ys ‚üß (conf eq)) (+-suc i n) ‚ü®
      ‚ü¶ translate' (suc n) y ys ‚üß (conf (i + suc n))
    ‚â°‚ü® translate'-preserves-conf y ys (suc n) i ‚ü©
      VariantList.‚ü¶ y ‚à∑ ys ‚üß i
    ‚â°‚ü®‚ü©
      VariantList.‚ü¶ x ‚à∑ y ‚à∑ ys ‚üß (suc i)
    ‚àé

  preserves-‚äÜ : ‚àÄ (l : VariantList A)
    ‚Üí VariantList.‚ü¶ l ‚üß ‚äÜ[ conf ] ‚ü¶ translate l ‚üß
  preserves-‚äÜ (x ‚à∑ xs) i =
    begin
      VariantList.‚ü¶ x ‚à∑ xs ‚üß i
    ‚â°‚ü® translate'-preserves-conf x xs zero i ‚ü®
      ‚ü¶ translate' zero x xs ‚üß (conf (i + zero))
    ‚â°‚ü® cong (Œª eq ‚Üí ‚ü¶ translate' zero x xs ‚üß (conf eq)) (+-identity ≥ i) ‚ü©
      ‚ü¶ translate' zero x xs ‚üß (conf i)
    ‚â°‚ü®‚ü©
      ‚ü¶ translate (x ‚à∑ xs) ‚üß (conf i)
    ‚àé

  translate'-preserves-fnoc : ‚àÄ (x : V A) (xs : List (V A)) (n : ‚Ñï) (c : Configuration) ‚Üí
      ‚ü¶ translate' n x xs ‚üß c
    ‚â° VariantList.‚ü¶ x ‚à∑ xs ‚üß (fnoci n (List‚Å∫.length (x ‚à∑ xs)) (List‚Å∫.length (x ‚à∑ xs)) c)
  translate'-preserves-fnoc x [] n c = refl
  translate'-preserves-fnoc x (y ‚à∑ ys) n c with c n in eq
  ... | true  rewrite n‚à∏n‚â°0 (List‚Å∫.length (y ‚à∑ ys)) | +-identity ≥ n | eq = refl
  ... | false rewrite n‚à∏n‚â°0 (List‚Å∫.length (y ‚à∑ ys)) | +-identity ≥ n | eq =
    begin
      ‚ü¶ translate' (suc n) y ys ‚üß c
    ‚â°‚ü® translate'-preserves-fnoc y ys (suc n) c ‚ü©
      VariantList.‚ü¶     y ‚à∑ ys ‚üß
        (fnoci (suc n) (List‚Å∫.length (    y ‚à∑ ys)) (List‚Å∫.length (y ‚à∑ ys)) c)
    ‚â°‚ü® fnoci-invariant x (y ‚à∑ ys) n (List‚Å∫.length (y ‚à∑ ys)) (List‚Å∫.length (y ‚à∑ ys)) c ‚â§-refl ‚ü©
      VariantList.‚ü¶ x ‚à∑ y ‚à∑ ys ‚üß
        (fnoci n       (List‚Å∫.length (x ‚à∑ y ‚à∑ ys)) (List‚Å∫.length (y ‚à∑ ys)) c)
    ‚àé

  preserves-‚äá : ‚àÄ (l : VariantList A)
    ‚Üí ‚ü¶ translate l ‚üß ‚äÜ[ fnoc (List‚Å∫.length l) ] VariantList.‚ü¶ l ‚üß
  preserves-‚äá (x ‚à∑ xs) c =
    begin
      ‚ü¶ translate (x ‚à∑ xs) ‚üß c
    ‚â°‚ü®‚ü©
      ‚ü¶ translate' zero x xs ‚üß c
    ‚â°‚ü® translate'-preserves-fnoc x xs zero c ‚ü©
      VariantList.‚ü¶ x ‚à∑ xs ‚üß (fnoc (List‚Å∫.length (x ‚à∑ xs)) c)
    ‚àé

VariantList‚ÜíADT : LanguageCompiler VariantListL ADTL
VariantList‚ÜíADT = record
  { compile = translate
  ; config-compiler = Œª e ‚Üí record { to = conf ; from = fnoc (List‚Å∫.length e) }
  ; preserves = Œª {A} e ‚Üí
    let open Preservation A in
      preserves-‚äÜ e , preserves-‚äá e
  }

ADT‚âΩVariantList : ADTL ‚âΩ VariantListL
ADT‚âΩVariantList = expressiveness-from-compiler VariantList‚ÜíADT

ADT-is-complete : Complete ADTL
ADT-is-complete = completeness-by-expressiveness VariantList-is-Complete ADT‚âΩVariantList
