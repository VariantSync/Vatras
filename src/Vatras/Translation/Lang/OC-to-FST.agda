{-|
This module provides an example of neighboring artifacts with equal atoms and
uses the `cannotEncodeNeighbors` lemma from `FST` to show that there are
expressions in `WFOC` that cannot be encoded in `FST`.
-}
open import Vatras.Framework.Definitions using (ùîΩ; ùî∏)

module Vatras.Translation.Lang.OC-to-FST (F : ùîΩ) where

open import Size using (‚àû)
open import Data.Bool using (true)
open import Data.List using ([]; _‚à∑_)
open import Data.Nat using (zero; _‚âü_; ‚Ñï)
open import Data.Product using (_,_)
import Relation.Binary.PropositionalEquality as Eq

open import Vatras.Framework.Variants using (Rose)
open import Vatras.Lang.All
open OC using (WFOC; Root; _-<_>-; WFOCL)
open FST using (FSTL; cannotEncodeNeighbors)

V = Rose ‚àû
open import Vatras.Framework.Relation.Expressiveness V using (_‚ã°_)

A : ùî∏
A = ‚Ñï , _‚âü_

neighbors : WFOC F ‚àû A
neighbors = Root zero (zero -< [] >- ‚à∑ zero -< [] >- ‚à∑ [])

FST‚ã°WFOC : FSTL F ‚ã° WFOCL F
FST‚ã°WFOC FST‚âΩWFOC with FST‚âΩWFOC neighbors
... | e , e‚äÜneighbors , neighbors‚äÜe with e‚äÜneighbors (Œª a ‚Üí true)
... | conf , e‚â°neighbors = cannotEncodeNeighbors F zero zero (e , conf , Eq.sym e‚â°neighbors)
