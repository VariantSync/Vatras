open import Vatras.Framework.Definitions using (ùî∏; ùîΩ)
open import Relation.Binary.Definitions using (DecidableEquality)

module Vatras.Translation.Lang.2CC.Idempotence (Dimension : ùîΩ) (_==_ : DecidableEquality Dimension) where

import Data.List as List
import Data.List.Properties as List
open import Data.Bool using (true; false; if_then_else_)
import Data.Bool.Properties as Bool
open import Data.Product using (_,_)
open import Function using (id)
open import Size using (Size; ‚àû)

open import Relation.Nullary using (Dec; yes; no)
open import Relation.Binary.PropositionalEquality as Eq using (refl; _‚âó_)
open Eq.‚â°-Reasoning

open import Vatras.Data.EqIndexedSet using (‚âó‚Üí‚âÖ[]; ‚âÖ[]-sym)
open import Vatras.Framework.Compiler using (LanguageCompiler)
open import Vatras.Framework.Variants as V using (Rose)
open import Vatras.Lang.2CC

_‚âü_ : ‚àÄ {i : Size} {A : ùî∏} ‚Üí DecidableEquality (2CC Dimension i A)
_‚âü_ {A = _ , _‚âü‚Çê_} (a‚ÇÅ -< cs‚ÇÅ >-) (a‚ÇÇ -< cs‚ÇÇ >-) with a‚ÇÅ ‚âü‚Çê a‚ÇÇ | List.‚â°-dec _‚âü_ cs‚ÇÅ cs‚ÇÇ
(a‚ÇÅ -< cs‚ÇÅ >-) ‚âü (a‚ÇÇ -< cs‚ÇÇ >-) | yes a‚ÇÅ‚â°a‚ÇÇ | yes cs‚ÇÅ‚â°cs‚ÇÇ = yes (Eq.cong‚ÇÇ _-<_>- a‚ÇÅ‚â°a‚ÇÇ cs‚ÇÅ‚â°cs‚ÇÇ)
(a‚ÇÅ -< cs‚ÇÅ >-) ‚âü (a‚ÇÇ -< cs‚ÇÇ >-) | yes a‚ÇÅ‚â°a‚ÇÇ | no cs‚ÇÅ‚â¢cs‚ÇÇ = no Œª where refl ‚Üí cs‚ÇÅ‚â¢cs‚ÇÇ refl
(a‚ÇÅ -< cs‚ÇÅ >-) ‚âü (a‚ÇÇ -< cs‚ÇÇ >-) | no a‚ÇÅ‚â¢a‚ÇÇ | _ = no Œª where refl ‚Üí a‚ÇÅ‚â¢a‚ÇÇ refl
(a‚ÇÅ -< cs‚ÇÅ >-) ‚âü (D‚ÇÇ ‚ü® l‚ÇÇ , r‚ÇÇ ‚ü©) = no Œª where ()
(D‚ÇÅ ‚ü® l‚ÇÅ , r‚ÇÅ ‚ü©) ‚âü (a‚ÇÇ -< cs‚ÇÇ >-) = no Œª where ()
(D‚ÇÅ ‚ü® l‚ÇÅ , r‚ÇÅ ‚ü©) ‚âü (D‚ÇÇ ‚ü® l‚ÇÇ , r‚ÇÇ ‚ü©) with D‚ÇÅ == D‚ÇÇ | l‚ÇÅ ‚âü l‚ÇÇ | r‚ÇÅ ‚âü r‚ÇÇ
(D‚ÇÅ ‚ü® l‚ÇÅ , r‚ÇÅ ‚ü©) ‚âü (D‚ÇÇ ‚ü® l‚ÇÇ , r‚ÇÇ ‚ü©) | yes D‚ÇÅ‚â°d‚ÇÇ | yes l‚ÇÅ‚â°l‚ÇÇ | yes r‚ÇÅ‚â°r‚ÇÇ = yes (Eq.cong‚ÇÇ (Œª f r ‚Üí f r) (Eq.cong‚ÇÇ _‚ü®_,_‚ü© D‚ÇÅ‚â°d‚ÇÇ l‚ÇÅ‚â°l‚ÇÇ) r‚ÇÅ‚â°r‚ÇÇ)
(D‚ÇÅ ‚ü® l‚ÇÅ , r‚ÇÅ ‚ü©) ‚âü (D‚ÇÇ ‚ü® l‚ÇÇ , r‚ÇÇ ‚ü©) | yes D‚ÇÅ‚â°d‚ÇÇ | yes l‚ÇÅ‚â°l‚ÇÇ | no r‚ÇÅ‚â¢r‚ÇÇ = no Œª where refl ‚Üí r‚ÇÅ‚â¢r‚ÇÇ refl
(D‚ÇÅ ‚ü® l‚ÇÅ , r‚ÇÅ ‚ü©) ‚âü (D‚ÇÇ ‚ü® l‚ÇÇ , r‚ÇÇ ‚ü©) | yes D‚ÇÅ‚â°d‚ÇÇ | no l‚ÇÅ‚â¢l‚ÇÇ | _ = no Œª where refl ‚Üí l‚ÇÅ‚â¢l‚ÇÇ refl
(D‚ÇÅ ‚ü® l‚ÇÅ , r‚ÇÅ ‚ü©) ‚âü (D‚ÇÇ ‚ü® l‚ÇÇ , r‚ÇÇ ‚ü©) | no D‚ÇÅ‚â¢d‚ÇÇ | _ | _ = no Œª where refl ‚Üí D‚ÇÅ‚â¢d‚ÇÇ refl

eliminate-idempotent-choices : ‚àÄ {i : Size} {A : ùî∏} ‚Üí 2CC Dimension i A ‚Üí 2CC Dimension ‚àû A
eliminate-idempotent-choices (a -< cs >-) = a -< List.map eliminate-idempotent-choices cs >-
eliminate-idempotent-choices (D ‚ü® l , r ‚ü©) with eliminate-idempotent-choices l ‚âü eliminate-idempotent-choices r
eliminate-idempotent-choices (D ‚ü® l , r ‚ü©) | yes l‚â°r = eliminate-idempotent-choices l
eliminate-idempotent-choices (D ‚ü® l , r ‚ü©) | no l‚â¢r = D ‚ü® eliminate-idempotent-choices l , eliminate-idempotent-choices r ‚ü©

eliminate-idempotent-choices-preserves
  : ‚àÄ {i : Size} {A : ùî∏}
  ‚Üí (e : 2CC Dimension i A)
  ‚Üí ‚ü¶ eliminate-idempotent-choices e ‚üß ‚âó ‚ü¶ e ‚üß
eliminate-idempotent-choices-preserves (a -< cs >-) c =
    ‚ü¶ eliminate-idempotent-choices (a -< cs >-) ‚üß c
  ‚â°‚ü®‚ü©
    ‚ü¶ a -< List.map eliminate-idempotent-choices cs >- ‚üß c
  ‚â°‚ü®‚ü©
    a V.-< List.map (Œª e ‚Üí ‚ü¶ e ‚üß c) (List.map eliminate-idempotent-choices cs) >-
  ‚â°‚ü® Eq.cong (a Rose.-<_>-) (List.map-‚àò cs) ‚ü®
    a V.-< List.map (Œª e ‚Üí ‚ü¶ eliminate-idempotent-choices e ‚üß c) cs >-
  ‚â°‚ü® Eq.cong (a Rose.-<_>-) (List.map-cong (Œª e ‚Üí eliminate-idempotent-choices-preserves e c) cs) ‚ü©
    a V.-< List.map (Œª e ‚Üí ‚ü¶ e ‚üß c) cs >-
  ‚â°‚ü®‚ü©
    ‚ü¶ a -< cs >- ‚üß c
  ‚àé
eliminate-idempotent-choices-preserves (D ‚ü® l , r ‚ü©) c with eliminate-idempotent-choices l ‚âü eliminate-idempotent-choices r
eliminate-idempotent-choices-preserves (D ‚ü® l , r ‚ü©) c | no l‚â¢r =
    (if c D then ‚ü¶ eliminate-idempotent-choices l ‚üß c else ‚ü¶ eliminate-idempotent-choices r ‚üß c)
  ‚â°‚ü® Eq.cong‚ÇÇ (if c D then_else_) (eliminate-idempotent-choices-preserves l c) (eliminate-idempotent-choices-preserves r c) ‚ü©
    (if c D then ‚ü¶ l ‚üß c else ‚ü¶ r ‚üß c)
  ‚â°‚ü®‚ü©
    ‚ü¶ D ‚ü® l , r ‚ü© ‚üß c
  ‚àé
eliminate-idempotent-choices-preserves (D ‚ü® l , r ‚ü©) c | yes l‚â°r with c D
eliminate-idempotent-choices-preserves (D ‚ü® l , r ‚ü©) c | yes l‚â°r | true =
    ‚ü¶ eliminate-idempotent-choices l ‚üß c
  ‚â°‚ü® eliminate-idempotent-choices-preserves l c ‚ü©
    ‚ü¶ l ‚üß c
  ‚â°‚ü®‚ü©
    (if true then ‚ü¶ l ‚üß c else ‚ü¶ r ‚üß c)
  ‚àé
eliminate-idempotent-choices-preserves (D ‚ü® l , r ‚ü©) c | yes l‚â°r | false =
    ‚ü¶ eliminate-idempotent-choices l ‚üß c
  ‚â°‚ü® Eq.cong‚ÇÇ ‚ü¶_‚üß l‚â°r refl ‚ü©
    ‚ü¶ eliminate-idempotent-choices r ‚üß c
  ‚â°‚ü® eliminate-idempotent-choices-preserves r c ‚ü©
    ‚ü¶ r ‚üß c
  ‚â°‚ü®‚ü©
    (if false then ‚ü¶ l ‚üß c else ‚ü¶ r ‚üß c)
  ‚àé

Idempotence-Elimination : LanguageCompiler (2CCL Dimension) (2CCL Dimension)
Idempotence-Elimination = record
  { compile = eliminate-idempotent-choices
  ; config-compiler = Œª _ ‚Üí record { to = id ; from = id }
  ; preserves = Œª e ‚Üí ‚âÖ[]-sym (‚âó‚Üí‚âÖ[] (eliminate-idempotent-choices-preserves e))
  }
