open import Vatras.Framework.Definitions using (ùîΩ; ùî∏; atoms; NAT)
module Vatras.Translation.Lang.VT-to-ADT (F : ùîΩ) where

open import Data.Bool using (true; false; if_then_else_)
open import Data.List as List using (List; []; _‚à∑_; _++_; map; concat; concatMap)
open import Data.List.Properties using (++-identity ≥; ++-assoc)
open import Data.Product using (_,_)
open import Function using (id; _‚àò_; flip)
open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_; _‚âó_; refl; cong; cong‚ÇÇ)
open Eq.‚â°-Reasoning

open import Vatras.Data.Prop
open import Vatras.Data.EqIndexedSet using (‚âó‚Üí‚âÖ[]; ‚âó‚Üí‚âÖ)
open import Vatras.Framework.Variants using (Forest; Variant-is-VL; encode-idemp; rose-leaf; forest-leaf; forest-singleton; _-<_>-)
open import Vatras.Framework.Compiler using (LanguageCompiler)
open import Vatras.Lang.ADT (Prop F) Forest as ADT using (ADT; ADTL; leaf; _‚ü®_,_‚ü©)
open import Vatras.Lang.VT F as VT
open import Vatras.Util.AuxProofs using (if-cong)

open import Vatras.Lang.ADT.Prop F Forest using (‚ü¶_‚üß‚Çö; PropADTL)
open import Vatras.Lang.ADT.Merge Forest (_++_) as Merge
open Merge.Named (Prop F) using (_‚äï_)
open Merge.Prop F using (‚äï-spec‚Çö)

open import Vatras.Framework.Relation.Expressiveness Forest using (_‚âΩ_)

module _ {A : ùî∏} where
  -- artifact atom, artifact children, artifact neighbors
  pushy : atoms A ‚Üí ADT A ‚Üí ADT A ‚Üí ADT A
  pushy a (leaf v)      (leaf v')     = leaf (a -< v >- ‚à∑ v')
  pushy a c@(leaf v)    (D ‚ü® l , r ‚ü©) = D ‚ü® pushy a c l , pushy a c r ‚ü©
  pushy a (D ‚ü® l , r ‚ü©) n             = D ‚ü® pushy a l n , pushy a r n ‚ü©

  mutual
    translate-both : (l r : List (UnrootedVT A)) ‚Üí ADT A
    translate-both l r = translate-all l ‚äï translate-all r

    translate-all : List (UnrootedVT A) ‚Üí ADT A
    translate-all []                               = leaf []
    translate-all (a -< l >- ‚à∑ xs)                 = pushy a (translate-all l) (translate-all xs)
    translate-all (if[ p ]then[ l ] ‚à∑ xs)          = p ‚ü® translate-both l xs , translate-all xs ‚ü©
    translate-all (if[ p ]then[ l ]else[ r ] ‚à∑ xs) = p ‚ü® translate-both l xs , translate-both r xs ‚ü©

  translate : VT A ‚Üí ADT A
  translate if-true[ xs ] = translate-all xs

  -- Preservation Proofs --
  
  -- formal specification of pushy: It should create an ADT such that for any configuration c, there is an artifact at the top of left
  pushy-preserves : ‚àÄ a l n c ‚Üí ‚ü¶ pushy a l n ‚üß‚Çö c ‚â° a -< ‚ü¶ l ‚üß‚Çö c >- ‚à∑ ‚ü¶ n ‚üß‚Çö c
  pushy-preserves a (leaf v) (leaf v') c = refl
  pushy-preserves a (D ‚ü® l , r ‚ü©) n c with eval D c
  ... | true  = pushy-preserves a l n c
  ... | false = pushy-preserves a r n c
  pushy-preserves a x@(leaf v) (D ‚ü® l , r ‚ü©) c with eval D c
  ... | true  = pushy-preserves a x l c
  ... | false = pushy-preserves a x r c

  preserves-all : ‚àÄ (vts : List (UnrootedVT A)) ‚Üí flip configure-all vts ‚âó ‚ü¶ translate-all vts ‚üß‚Çö
  preserves-all [] c = refl
  preserves-all (a -< l >- ‚à∑ xs) c =
      flip configure-all (a -< l >- ‚à∑ xs) c
    ‚â°‚ü®‚ü©
      a -< configure-all c l >- ‚à∑ configure-all c xs
    ‚â°‚ü® cong (_ ‚à∑_) (preserves-all xs c) ‚ü©
      a -< configure-all c l >- ‚à∑ ‚ü¶ translate-all xs ‚üß‚Çö c
    ‚â°‚ü® cong (Œª z ‚Üí a -< z >- ‚à∑ _) (preserves-all l c) ‚ü©
      a -< ‚ü¶ translate-all l ‚üß‚Çö c >- ‚à∑ ‚ü¶ translate-all xs ‚üß‚Çö c
    ‚â°‚ü® pushy-preserves a (translate-all l) (translate-all xs) c ‚ü®
      ‚ü¶ pushy a (translate-all l) (translate-all xs) ‚üß‚Çö c
    ‚àé
  preserves-all (if[ p ]then[ l ] ‚à∑ xs) c with eval p c
  ... | true  =
      configure-all c l ++ configure-all c xs
    ‚â°‚ü® cong‚ÇÇ _++_ (preserves-all l c) (preserves-all xs c) ‚ü©
      ‚ü¶ translate-all l ‚üß‚Çö c ++ ‚ü¶ translate-all xs ‚üß‚Çö c
    ‚â°‚ü® ‚äï-spec‚Çö (translate-all l) (translate-all xs) c ‚ü®
      ‚ü¶ translate-all l ‚äï translate-all xs ‚üß‚Çö c
    ‚â°‚ü®‚ü©
      ‚ü¶ translate-both l xs ‚üß‚Çö c
    ‚àé
  ... | false = preserves-all xs c
  preserves-all (if[ p ]then[ l ]else[ r ] ‚à∑ xs) c with eval p c -- the cases for the choice alternatives are analogous to the first option case above
  ... | true
    rewrite preserves-all l c
          | preserves-all xs c
          | ‚äï-spec‚Çö (translate-all l) (translate-all xs) c
          = refl
  ... | false
    rewrite preserves-all r c
          | preserves-all xs c
          | ‚äï-spec‚Çö (translate-all r) (translate-all xs) c
          = refl

  preserves : ‚àÄ (vt : VT A) ‚Üí ‚ü¶ vt ‚üß ‚âó ‚ü¶ translate vt ‚üß‚Çö
  preserves if-true[ xs ] c = preserves-all xs c

VT‚ÜíPropADT : LanguageCompiler VariationTreeVL PropADTL
VT‚ÜíPropADT = record
  { compile = translate
  ; config-compiler = Œª _ ‚Üí record { to = id ; from = id }
  ; preserves = ‚âó‚Üí‚âÖ[] ‚àò preserves
  }

PropADT‚âΩVT : PropADTL ‚âΩ VariationTreeVL
PropADT‚âΩVT e = translate e , ‚âó‚Üí‚âÖ (preserves e)

module Test {A : ùî∏} where
  module Forest (a b : atoms A) where
    vt : VT A
    vt =
      if-true[
        vt-leaf a ‚à∑ vt-leaf b ‚à∑ []
      ]
  
    adt : ADT A
    adt = leaf (rose-leaf a ‚à∑ rose-leaf b ‚à∑ [])
  
    tr : translate vt ‚â° adt
    tr = refl
  
    pres : VT.‚ü¶ vt ‚üß ‚âó ‚ü¶ translate vt ‚üß‚Çö
    pres _ = refl

  module SingleOption (X : Prop F) (a b : atoms A) where
    vt : VT A
    vt =
      if-true[
        a -<
          if[ X ]then[
            vt-leaf b ‚à∑ []
          ] ‚à∑ []
        >- ‚à∑ []
      ]

    adt : ADT A
    adt = X ‚ü® leaf (forest-singleton a (forest-leaf b)) , leaf (forest-leaf a) ‚ü©
  
    tr : translate vt ‚â° adt
    tr = refl

    pres-t : VT.‚ü¶ vt ‚üß ‚âó ‚ü¶ translate vt ‚üß‚Çö
    pres-t c with eval X c
    ... | true  = refl
    ... | false = refl

  module SingleChoice (X : Prop F) (a b‚ÇÅ b‚ÇÇ e‚ÇÅ e‚ÇÇ : atoms A) where
    vt : VT A
    vt =
      if-true[
        a -<
          if[ X ]then[
            vt-leaf b‚ÇÅ ‚à∑
            vt-leaf b‚ÇÇ ‚à∑ []
          ]else[
            vt-leaf e‚ÇÅ ‚à∑
            vt-leaf e‚ÇÇ ‚à∑ []
          ] ‚à∑ []
        >- ‚à∑ []
      ]

    adt : ADT A
    adt =
      X ‚ü®
        leaf (forest-singleton a (rose-leaf b‚ÇÅ ‚à∑ rose-leaf b‚ÇÇ ‚à∑ [])) ,
        leaf (forest-singleton a (rose-leaf e‚ÇÅ ‚à∑ rose-leaf e‚ÇÇ ‚à∑ []))
      ‚ü©

    tr : translate vt ‚â° adt
    tr = refl

    pres-t : VT.‚ü¶ vt ‚üß ‚âó ‚ü¶ translate vt ‚üß‚Çö
    pres-t c with eval X c
    ... | true  = refl
    ... | false = refl
