open import Vatras.Framework.Definitions using (ùîΩ; ùî∏; atoms; NAT)
module Vatras.Translation.Lang.VT-to-ADT (F : ùîΩ) where

open import Data.Bool using (true; false)
open import Data.List as List using (List; []; _‚à∑_; _++_; map; concat; concatMap)
open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_; _‚âó_; refl)

open import Vatras.Data.Prop
open import Vatras.Framework.Variants using (Forest; Variant-is-VL; encode-idemp; rose-leaf; forest-leaf; forest-singleton; _-<_>-)
open import Vatras.Lang.ADT (Prop F) Forest as ADT using (ADT; ADTL; leaf; _‚ü®_,_‚ü©)
open import Vatras.Lang.ADT.Prop F Forest
-- open import Vatras.Lang.ADT.Pushdown (Prop F) Forest _-<_>-‚à∑[]
open import Vatras.Lang.VT F as VT using (VT; UnrootedVT; _-<_>-; if-true[_]; if[_]then[_]; if[_]then[_]else[_]; vt-leaf)

-- translate-all : ‚àÄ {A} ‚Üí List (UnrootedVT A) ‚Üí List (ADT A)
-- translate-all []                               = []
-- translate-all (a -< l >- ‚à∑ xs)                 = push-down-artifact a {!l xs!} ‚à∑ translate-all xs
-- translate-all (if[ p ]then[ x ] ‚à∑ xs)          = p ‚ü® translate-all (x ++ xs) , translate-all xs ‚ü© ‚à∑ []
-- translate-all (if[ p ]then[ l ]else[ r ] ‚à∑ xs) = p ‚ü® translate-all l , translate-all r ‚ü© ‚à∑ translate-all xs

-- translate : ‚àÄ {A} ‚Üí VT A ‚Üí ADT A
-- translate if-true[ l ] = translate-all l

module _ {A : ùî∏} where
  -- artifact atom, artifact children, artifact neighbors
  pushy : atoms A ‚Üí ADT A ‚Üí ADT A ‚Üí ADT A
  pushy a (D ‚ü® l , r ‚ü©) n             = D ‚ü® pushy a l n , pushy a r n ‚ü©
  pushy a (leaf v)      (leaf v')     = leaf (a -< v >- ‚à∑ v')
  pushy a c@(leaf v)    (D ‚ü® l , r ‚ü©) = D ‚ü® pushy a c l , pushy a c r ‚ü©

  {-# TERMINATING #-}
  translate-all : List (UnrootedVT A) ‚Üí ADT A
  translate-all []                               = leaf []
  translate-all (a -< l >- ‚à∑ xs)                 = pushy a (translate-all l) (translate-all xs)
  translate-all (if[ p ]then[ l ] ‚à∑ xs)          = p ‚ü® translate-all (l ++ xs) , translate-all xs ‚ü©
  translate-all (if[ p ]then[ l ]else[ r ] ‚à∑ xs) = p ‚ü® translate-all (l ++ xs) , translate-all (r ++ xs) ‚ü©

  translate : VT A ‚Üí ADT A
  translate if-true[ xs ] = translate-all xs

module Test {A : ùî∏} where
  module Forest (a b : atoms A) where
    vt : VT A
    vt =
      if-true[
        vt-leaf a ‚à∑ vt-leaf b ‚à∑ []
      ]
  
    adt : ADT A
    adt = leaf (rose-leaf a ‚à∑ rose-leaf b ‚à∑ [])
  
    tr : translate vt ‚â° adt
    tr = refl
  
    pres : VT.‚ü¶ vt ‚üß ‚âó ‚ü¶ translate vt ‚üß‚Çö
    pres _ = refl

  module SingleOption (X : Prop F) (a b : atoms A) where
    vt : VT A
    vt =
      if-true[
        a -<
          if[ X ]then[
            vt-leaf b ‚à∑ []
          ] ‚à∑ []
        >- ‚à∑ []
      ]

    adt : ADT A
    adt = X ‚ü® leaf (forest-singleton a (forest-leaf b)) , leaf (forest-leaf a) ‚ü©
  
    tr : translate vt ‚â° adt
    tr = refl

    pres-t : VT.‚ü¶ vt ‚üß ‚âó ‚ü¶ translate vt ‚üß‚Çö
    pres-t c with eval X c
    ... | true  = refl
    ... | false = refl

  module SingleChoice (X : Prop F) (a b‚ÇÅ b‚ÇÇ e‚ÇÅ e‚ÇÇ : atoms A) where
    vt : VT A
    vt =
      if-true[
        a -<
          if[ X ]then[
            vt-leaf b‚ÇÅ ‚à∑
            vt-leaf b‚ÇÇ ‚à∑ []
          ]else[
            vt-leaf e‚ÇÅ ‚à∑
            vt-leaf e‚ÇÇ ‚à∑ []
          ] ‚à∑ []
        >- ‚à∑ []
      ]

    adt : ADT A
    adt =
      X ‚ü®
        leaf (forest-singleton a (rose-leaf b‚ÇÅ ‚à∑ rose-leaf b‚ÇÇ ‚à∑ [])) ,
        leaf (forest-singleton a (rose-leaf e‚ÇÅ ‚à∑ rose-leaf e‚ÇÇ ‚à∑ []))
      ‚ü©

    tr : translate vt ‚â° adt
    tr = refl

    pres-t : VT.‚ü¶ vt ‚üß ‚âó ‚ü¶ translate vt ‚üß‚Çö
    pres-t c with eval X c
    ... | true  = refl
    ... | false = refl
