open import Vatras.Framework.Definitions using (ùîΩ; ùî∏; atoms)
module Vatras.Translation.Lang.VT-to-ADT (F : ùîΩ) where

open import Data.Bool using (true; false; if_then_else_)
import Data.Bool.Properties as Bool
open import Data.List as List using (List; []; _‚à∑_; _++_; map; concat; concatMap)
open import Data.List.Properties using (++-identity ≥; ++-assoc)
open import Data.Nat using (‚Ñï; zero; suc; _+_; _<_; z‚â§n; s‚â§s)
import Data.Nat.Properties as ‚Ñï
open import Function using (id; _‚àò_)
open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_; _‚âó_; refl; cong; cong‚ÇÇ)
import Relation.Binary.Structures
open Relation.Binary.Structures.IsPreorder ‚Ñï.‚â§-isPreorder using () renaming (‚â≤-resp ≥-‚âà to ‚Ñï-‚â§-‚â° ≥; ‚â≤-respÀ°-‚âà to ‚Ñï-‚â§-‚â°À°)

import Vatras.Util.ProxyInduction as ProxyInduction
open import Vatras.Data.Prop using (Prop; eval)
open import Vatras.Data.EqIndexedSet using (‚âó‚Üí‚âÖ[])
open import Vatras.Framework.Variants using (Forest; _-<_>-)
open import Vatras.Framework.Compiler as Compiler using (LanguageCompiler)
import Vatras.Lang.ADT
open Vatras.Lang.ADT (Prop F) Forest using (ADT; leaf; _‚ü®_,_‚ü©)
open Vatras.Lang.ADT       F  Forest using (ADTL)
open import Vatras.Lang.VT F as VT using (VT; UnrootedVT; VTL; ‚ü¶_‚üß; _-<_>-; if-true[_]; if[_]then[_]; if[_]then[_]else[_]; vt-leaf; configure; configure-all)

open import Vatras.Lang.ADT.Prop F Forest using (‚ü¶_‚üß‚Çö; PropADTL)

open import Vatras.Framework.Relation.Expressiveness Forest using (_‚âΩ_; ‚âΩ-trans; expressiveness-from-compiler)
open import Vatras.Translation.Lang.ADT.PropSemantics F Forest using (formula-elim-compiler; PropADT‚âΩADT)

module _ {A : ùî∏} where
  -- induction proxy
  sizeVTs : List (UnrootedVT A) ‚Üí ‚Ñï
  sizeVTs [] = zero
  sizeVTs ((a -< l >-) ‚à∑ xs) = suc (sizeVTs l) + sizeVTs xs
  sizeVTs (if[ p ]then[ l ] ‚à∑ xs) = suc (sizeVTs l) + sizeVTs xs
  sizeVTs (if[ p ]then[ l ]else[ r ] ‚à∑ xs) = suc (sizeVTs l) + sizeVTs r + sizeVTs xs

  -- lemmas used to prove termination
  sizeVTs-++ : ‚àÄ xs ys ‚Üí sizeVTs (xs ++ ys) ‚â° sizeVTs xs + sizeVTs ys
  sizeVTs-++ [] ys = refl
  sizeVTs-++ ((a -< l >-) ‚à∑ xs) ys = Eq.cong suc (Eq.trans (Eq.cong (sizeVTs l +_) (sizeVTs-++ xs ys)) (Eq.sym (‚Ñï.+-assoc (sizeVTs l) (sizeVTs xs) (sizeVTs ys))))
  sizeVTs-++ (if[ p ]then[ l ] ‚à∑ xs) ys = Eq.cong suc (Eq.trans (Eq.cong (sizeVTs l +_) (sizeVTs-++ xs ys)) (Eq.sym (‚Ñï.+-assoc (sizeVTs l) (sizeVTs xs) (sizeVTs ys))))
  sizeVTs-++ (if[ p ]then[ l ]else[ r ] ‚à∑ xs) ys = Eq.cong suc (Eq.trans (Eq.cong (sizeVTs l + sizeVTs r +_) (sizeVTs-++ xs ys)) (Eq.sym (‚Ñï.+-assoc (sizeVTs l + sizeVTs r) (sizeVTs xs) (sizeVTs ys))))

  _<‚Çõ_ : List (UnrootedVT A) ‚Üí List (UnrootedVT A) ‚Üí Set
  _<‚Çõ_ vt‚ÇÅ vt‚ÇÇ = sizeVTs vt‚ÇÅ < sizeVTs vt‚ÇÇ

  <‚Çõ-artifact : ‚àÄ a l xs ‚Üí l <‚Çõ ((a -< l >-) ‚à∑ xs)
  <‚Çõ-artifact a l xs = s‚â§s (‚Ñï.m‚â§m+n (sizeVTs l) (sizeVTs xs))

  <‚Çõ-tail : ‚àÄ x xs ‚Üí xs <‚Çõ (x ‚à∑ xs)
  <‚Çõ-tail (a -< l >-) xs = s‚â§s (‚Ñï.m‚â§n+m (sizeVTs xs) (sizeVTs l))
  <‚Çõ-tail if[ p ]then[ l ] xs = s‚â§s (‚Ñï.m‚â§n+m (sizeVTs xs) (sizeVTs l))
  <‚Çõ-tail if[ p ]then[ l ]else[ r ] xs = s‚â§s (‚Ñï.m‚â§n+m (sizeVTs xs) (sizeVTs l + sizeVTs r))

  <‚Çõ-if : ‚àÄ p l xs ‚Üí (l ++ xs) <‚Çõ (if[ p ]then[ l ] ‚à∑ xs)
  <‚Çõ-if p l xs = s‚â§s (‚Ñï.‚â§-reflexive (sizeVTs-++ l xs))

  <‚Çõ-if-then‚ÇÅ : ‚àÄ p l r xs ‚Üí (l ++ xs) <‚Çõ (if[ p ]then[ l ]else[ r ] ‚à∑ xs)
  <‚Çõ-if-then‚ÇÅ p l r xs = s‚â§s (‚Ñï-‚â§-‚â°À° (Eq.sym (sizeVTs-++ l xs)) (‚Ñï.+-monoÀ°-‚â§ (sizeVTs xs) (‚Ñï.m‚â§m+n (sizeVTs l) (sizeVTs r))))

  <‚Çõ-if-then‚ÇÇ : ‚àÄ p l r xs ‚Üí (r ++ xs) <‚Çõ (if[ p ]then[ l ]else[ r ] ‚à∑ xs)
  <‚Çõ-if-then‚ÇÇ p l r xs = s‚â§s (‚Ñï-‚â§-‚â°À° (Eq.sym (sizeVTs-++ r xs)) (‚Ñï-‚â§-‚â° ≥ (Eq.sym (‚Ñï.+-assoc (sizeVTs l) (sizeVTs r) (sizeVTs xs))) (‚Ñï.m‚â§n+m (sizeVTs r + sizeVTs xs) (sizeVTs l))))

  -- artifact atom, artifact children, artifact neighbors
  pushy : atoms A ‚Üí ADT A ‚Üí ADT A ‚Üí ADT A
  pushy a (leaf v)      (leaf v')     = leaf (a -< v >- ‚à∑ v')
  pushy a c@(leaf v)    (D ‚ü® l , r ‚ü©) = D ‚ü® pushy a c l , pushy a c r ‚ü©
  pushy a (D ‚ü® l , r ‚ü©) n             = D ‚ü® pushy a l n , pushy a r n ‚ü©

  translate-all-step : ‚àÄ (vts : List (UnrootedVT A)) ‚Üí (‚àÄ vts' ‚Üí sizeVTs vts' < sizeVTs vts ‚Üí ADT A) ‚Üí ADT A
  translate-all-step [] rec = leaf []
  translate-all-step ((a -< l >-) ‚à∑ xs) rec = pushy a (rec l (<‚Çõ-artifact a l xs)) (rec xs (<‚Çõ-tail (a -< l >-) xs))
  translate-all-step (if[ p ]then[ l ] ‚à∑ xs) rec = p ‚ü® rec (l ++ xs) (<‚Çõ-if p l xs) , rec xs (<‚Çõ-tail (if[ p ]then[ l ]) xs) ‚ü©
  translate-all-step (if[ p ]then[ l ]else[ r ] ‚à∑ xs) rec = p ‚ü® rec (l ++ xs) (<‚Çõ-if-then‚ÇÅ p l r xs) , rec (r ++ xs) (<‚Çõ-if-then‚ÇÇ p l r xs) ‚ü©

  translate-all : List (UnrootedVT A) ‚Üí ADT A
  translate-all = ProxyInduction.induction sizeVTs (Œª _ ‚Üí ADT A) translate-all-step

  translate-all-step' : ‚àÄ vts ‚Üí translate-all vts ‚â° translate-all-step vts (Œª vts _ ‚Üí translate-all vts)
  translate-all-step' = induction-step translate-all-step go
    where
    open ProxyInduction sizeVTs (Œª _ ‚Üí ADT A)

    go : RecIrrelevant translate-all-step
    go [] ext = refl
    go ((a -< l >-) ‚à∑ vts) ext = Eq.cong‚ÇÇ (pushy a) (ext l (<‚Çõ-artifact a l vts)) (ext vts (s‚â§s (‚Ñï.m‚â§n+m (sizeVTs vts) (sizeVTs l))))
    go (if[ p ]then[ l ] ‚à∑ vts) ext = Eq.cong‚ÇÇ (p ‚ü®_,_‚ü©) (ext (l ++ vts) (<‚Çõ-if p l vts)) (ext vts (s‚â§s (‚Ñï.m‚â§n+m (sizeVTs vts) (sizeVTs l))))
    go (if[ p ]then[ l ]else[ r ] ‚à∑ vts) ext = Eq.cong‚ÇÇ (p ‚ü®_,_‚ü©) (ext (l ++ vts) (<‚Çõ-if-then‚ÇÅ p l r vts)) (ext (r ++ vts) (<‚Çõ-if-then‚ÇÇ p l r vts))

  translate : VT A ‚Üí ADT A
  translate if-true[ xs ] = translate-all xs

  -- Preservation Proofs --

  -- formal specification of pushy: It should create an ADT such that for any configuration c, there is an artifact at the top of left
  pushy-preserves : ‚àÄ a l n c ‚Üí ‚ü¶ pushy a l n ‚üß‚Çö c ‚â° a -< ‚ü¶ l ‚üß‚Çö c >- ‚à∑ ‚ü¶ n ‚üß‚Çö c
  pushy-preserves a (leaf v) (leaf v') c = refl
  pushy-preserves a (D ‚ü® l , r ‚ü©) n c with eval D c
  ... | true  = pushy-preserves a l n c
  ... | false = pushy-preserves a r n c
  pushy-preserves a x@(leaf v) (D ‚ü® l , r ‚ü©) c with eval D c
  ... | true  = pushy-preserves a x l c
  ... | false = pushy-preserves a x r c

  ++-preserves : ‚àÄ l r c ‚Üí ‚ü¶ translate-all l ‚üß‚Çö c ++ ‚ü¶ translate-all r ‚üß‚Çö c ‚â° ‚ü¶ translate-all (l ++ r) ‚üß‚Çö c
  ++-preserves l r c = induction step l
    where
    open ProxyInduction sizeVTs (Œª l ‚Üí ‚ü¶ translate-all l ‚üß‚Çö c ++ ‚ü¶ translate-all r ‚üß‚Çö c ‚â° ‚ü¶ translate-all (l ++ r) ‚üß‚Çö c)

    step : Step
    step [] rec = refl
    step ((a -< l >-) ‚à∑ ls) rec =
        ‚ü¶ translate-all ((a -< l >-) ‚à∑ ls) ‚üß‚Çö c ++ ‚ü¶ translate-all r ‚üß‚Çö c
      ‚â°‚ü® Eq.cong (Œª x ‚Üí ‚ü¶ x ‚üß‚Çö c ++ ‚ü¶ translate-all r ‚üß‚Çö c) (translate-all-step' ((a -< l >-) ‚à∑ ls)) ‚ü©
        ‚ü¶ pushy a (translate-all l) (translate-all ls) ‚üß‚Çö c ++ ‚ü¶ translate-all r ‚üß‚Çö c
      ‚â°‚ü® Eq.cong (_++ ‚ü¶ translate-all r ‚üß‚Çö c) (pushy-preserves a (translate-all l) (translate-all ls) c) ‚ü©
        a -< ‚ü¶ translate-all l ‚üß‚Çö c >- ‚à∑ ‚ü¶ translate-all ls ‚üß‚Çö c ++ ‚ü¶ translate-all r ‚üß‚Çö c
      ‚â°‚ü® Eq.cong (a -< ‚ü¶ translate-all l ‚üß‚Çö c >- ‚à∑_) (rec ls term‚ÇÅ) ‚ü©
        a -< ‚ü¶ translate-all l ‚üß‚Çö c >- ‚à∑ ‚ü¶ translate-all (ls ++ r) ‚üß‚Çö c
      ‚â°‚ü® pushy-preserves a (translate-all l) (translate-all (ls ++ r)) c ‚ü®
        ‚ü¶ pushy a (translate-all l) (translate-all (ls ++ r)) ‚üß‚Çö c
      ‚â°‚ü® Eq.cong (Œª x ‚Üí ‚ü¶ x ‚üß‚Çö c) (translate-all-step' (((a -< l >-) ‚à∑ ls) ++ r)) ‚ü®
        ‚ü¶ translate-all (((a -< l >-) ‚à∑ ls) ++ r) ‚üß‚Çö c
      ‚àé
      where
      open Eq.‚â°-Reasoning

      term‚ÇÅ : sizeVTs ls < suc (sizeVTs l + sizeVTs ls)
      term‚ÇÅ = (s‚â§s (‚Ñï.m‚â§n+m (sizeVTs ls) (sizeVTs l)))
    step (if[ p ]then[ l‚ÇÅ ] ‚à∑ ls) rec =
        ‚ü¶ translate-all (if[ p ]then[ l‚ÇÅ ] ‚à∑ ls) ‚üß‚Çö c ++ ‚ü¶ translate-all r ‚üß‚Çö c
      ‚â°‚ü® Eq.cong (Œª x ‚Üí ‚ü¶ x ‚üß‚Çö c ++ ‚ü¶ translate-all r ‚üß‚Çö c) (translate-all-step' (if[ p ]then[ l‚ÇÅ ] ‚à∑ ls)) ‚ü©
        ‚ü¶ p ‚ü® translate-all (l‚ÇÅ ++ ls) , translate-all ls ‚ü© ‚üß‚Çö c ++ ‚ü¶ translate-all r ‚üß‚Çö c
      ‚â°‚ü®‚ü©
        (if eval p c then ‚ü¶ translate-all (l‚ÇÅ ++ ls) ‚üß‚Çö c else ‚ü¶ translate-all ls ‚üß‚Çö c) ++ ‚ü¶ translate-all r ‚üß‚Çö c
      ‚â°‚ü® Bool.if-float (_++ ‚ü¶ translate-all r ‚üß‚Çö c) (eval p c) ‚ü©
        (if eval p c then ‚ü¶ translate-all (l‚ÇÅ ++ ls) ‚üß‚Çö c ++ ‚ü¶ translate-all r ‚üß‚Çö c else ‚ü¶ translate-all ls ‚üß‚Çö c ++ ‚ü¶ translate-all r ‚üß‚Çö c)
      ‚â°‚ü® Eq.cong‚ÇÇ (if eval p c then_else_) (rec (l‚ÇÅ ++ ls) term‚ÇÅ) (rec ls term‚ÇÇ) ‚ü©
        (if eval p c then ‚ü¶ translate-all ((l‚ÇÅ ++ ls) ++ r) ‚üß‚Çö c else ‚ü¶ translate-all (ls ++ r) ‚üß‚Çö c)
      ‚â°‚ü® Eq.cong (Œª x ‚Üí (if eval p c then ‚ü¶ translate-all x ‚üß‚Çö c else ‚ü¶ translate-all (ls ++ r) ‚üß‚Çö c)) (++-assoc l‚ÇÅ ls r) ‚ü©
        (if eval p c then ‚ü¶ translate-all (l‚ÇÅ ++ ls ++ r) ‚üß‚Çö c else ‚ü¶ translate-all (ls ++ r) ‚üß‚Çö c)
      ‚â°‚ü®‚ü©
        ‚ü¶ p ‚ü® translate-all (l‚ÇÅ ++ ls ++ r) , translate-all (ls ++ r) ‚ü© ‚üß‚Çö c
      ‚â°‚ü® Eq.cong (Œª x ‚Üí ‚ü¶ x ‚üß‚Çö c) (translate-all-step' (if[ p ]then[ l‚ÇÅ ] ‚à∑ ls ++ r)) ‚ü®
        ‚ü¶ translate-all (if[ p ]then[ l‚ÇÅ ] ‚à∑ ls ++ r) ‚üß‚Çö c
      ‚àé
      where
      open Eq.‚â°-Reasoning

      term‚ÇÅ : sizeVTs (l‚ÇÅ ++ ls) < suc (sizeVTs l‚ÇÅ + sizeVTs ls)
      term‚ÇÅ = (s‚â§s (‚Ñï.‚â§-reflexive (sizeVTs-++ l‚ÇÅ ls)))

      term‚ÇÇ : sizeVTs ls < suc (sizeVTs l‚ÇÅ + sizeVTs ls)
      term‚ÇÇ = (s‚â§s (‚Ñï.m‚â§n+m (sizeVTs ls) (sizeVTs l‚ÇÅ)))
    step (if[ p ]then[ l‚ÇÅ ]else[ r‚ÇÅ ] ‚à∑ ls) rec =
        ‚ü¶ translate-all (if[ p ]then[ l‚ÇÅ ]else[ r‚ÇÅ ] ‚à∑ ls) ‚üß‚Çö c ++ ‚ü¶ translate-all r ‚üß‚Çö c
      ‚â°‚ü® cong (Œª x ‚Üí ‚ü¶ x ‚üß‚Çö c ++ ‚ü¶ translate-all r ‚üß‚Çö c) (translate-all-step' (if[ p ]then[ l‚ÇÅ ]else[ r‚ÇÅ ] ‚à∑ ls)) ‚ü©
        ‚ü¶ p ‚ü® translate-all (l‚ÇÅ ++ ls) , translate-all (r‚ÇÅ ++ ls) ‚ü© ‚üß‚Çö c ++ ‚ü¶ translate-all r ‚üß‚Çö c
      ‚â°‚ü®‚ü©
        (if eval p c then ‚ü¶ translate-all (l‚ÇÅ ++ ls) ‚üß‚Çö c else ‚ü¶ translate-all (r‚ÇÅ ++ ls) ‚üß‚Çö c) ++ ‚ü¶ translate-all r ‚üß‚Çö c
      ‚â°‚ü® Bool.if-float (_++ ‚ü¶ translate-all r ‚üß‚Çö c) (eval p c) ‚ü©
        (if eval p c then ‚ü¶ translate-all (l‚ÇÅ ++ ls) ‚üß‚Çö c ++ ‚ü¶ translate-all r ‚üß‚Çö c else ‚ü¶ translate-all (r‚ÇÅ ++ ls) ‚üß‚Çö c ++ ‚ü¶ translate-all r ‚üß‚Çö c)
      ‚â°‚ü® Eq.cong‚ÇÇ (if eval p c then_else_) (rec (l‚ÇÅ ++ ls) term‚ÇÅ) (rec (r‚ÇÅ ++ ls) term‚ÇÇ) ‚ü©
        (if eval p c then ‚ü¶ translate-all ((l‚ÇÅ ++ ls) ++ r) ‚üß‚Çö c else ‚ü¶ translate-all ((r‚ÇÅ ++ ls) ++ r) ‚üß‚Çö c)
      ‚â°‚ü® cong‚ÇÇ (Œª x y ‚Üí if eval p c then ‚ü¶ translate-all x ‚üß‚Çö c else ‚ü¶ translate-all y ‚üß‚Çö c) (++-assoc l‚ÇÅ ls r) (++-assoc r‚ÇÅ ls r) ‚ü©
        (if eval p c then ‚ü¶ translate-all (l‚ÇÅ ++ ls ++ r) ‚üß‚Çö c else ‚ü¶ translate-all (r‚ÇÅ ++ ls ++ r) ‚üß‚Çö c)
      ‚â°‚ü®‚ü©
        ‚ü¶ p ‚ü® translate-all (l‚ÇÅ ++ ls ++ r) , translate-all (r‚ÇÅ ++ ls ++ r) ‚ü© ‚üß‚Çö c
      ‚â°‚ü® cong (Œª x ‚Üí ‚ü¶ x ‚üß‚Çö c) (translate-all-step' (if[ p ]then[ l‚ÇÅ ]else[ r‚ÇÅ ] ‚à∑ ls ++ r)) ‚ü®
        ‚ü¶ translate-all (if[ p ]then[ l‚ÇÅ ]else[ r‚ÇÅ ] ‚à∑ ls ++ r) ‚üß‚Çö c
      ‚àé
      where
      open Eq.‚â°-Reasoning

      term‚ÇÅ : sizeVTs (l‚ÇÅ ++ ls) < suc (sizeVTs l‚ÇÅ + sizeVTs r‚ÇÅ + sizeVTs ls)
      term‚ÇÅ = s‚â§s (‚Ñï.‚â§-trans (‚Ñï.‚â§-reflexive (sizeVTs-++ l‚ÇÅ ls)) (‚Ñï.+-monoÀ°-‚â§ (sizeVTs ls) (‚Ñï.m‚â§m+n (sizeVTs l‚ÇÅ) (sizeVTs r‚ÇÅ))))

      term‚ÇÇ : sizeVTs (r‚ÇÅ ++ ls) < suc (sizeVTs l‚ÇÅ + sizeVTs r‚ÇÅ + sizeVTs ls)
      term‚ÇÇ = s‚â§s (‚Ñï.‚â§-trans (‚Ñï.‚â§-reflexive (sizeVTs-++ r‚ÇÅ ls)) (‚Ñï.+-monoÀ°-‚â§ (sizeVTs ls) (‚Ñï.m‚â§n+m (sizeVTs r‚ÇÅ) (sizeVTs l‚ÇÅ))))

  preserves-all : ‚àÄ (vts : List (UnrootedVT A)) ‚Üí configure-all vts ‚âó ‚ü¶ translate-all vts ‚üß‚Çö
  preserves-all [] c = refl
  preserves-all ((a -< l >-) ‚à∑ xs) c =
      configure-all ((a -< l >-) ‚à∑ xs) c
    ‚â°‚ü®‚ü©
      a -< configure-all l c >- ‚à∑ configure-all xs c
    ‚â°‚ü® Eq.cong‚ÇÇ (Œª x y ‚Üí a -< x >- ‚à∑ y) (preserves-all l c) (preserves-all xs c) ‚ü©
      a -< ‚ü¶ translate-all l ‚üß‚Çö c >- ‚à∑ ‚ü¶ translate-all xs ‚üß‚Çö c
    ‚â°‚ü® pushy-preserves a (translate-all l) (translate-all xs) c ‚ü®
      ‚ü¶ pushy a (translate-all l) (translate-all xs) ‚üß‚Çö c
    ‚â°‚ü® Eq.cong (Œª x ‚Üí ‚ü¶ x ‚üß‚Çö c) (translate-all-step' ((a -< l >-) ‚à∑ xs)) ‚ü®
      ‚ü¶ translate-all ((a -< l >-) ‚à∑ xs) ‚üß‚Çö c
    ‚àé
    where
    open Eq.‚â°-Reasoning
  preserves-all (if[ p ]then[ l ] ‚à∑ xs) c =
      configure-all (if[ p ]then[ l ] ‚à∑ xs) c
    ‚â°‚ü®‚ü©
      (if eval p c then configure-all l c else []) ++ configure-all xs c
    ‚â°‚ü® Bool.if-float (_++ configure-all xs c) (eval p c) ‚ü©
      (if eval p c then configure-all l c ++ configure-all xs c else configure-all xs c)
    ‚â°‚ü® Eq.cong‚ÇÇ (if eval p c then_else_) (Eq.cong‚ÇÇ _++_ (preserves-all l c) (preserves-all xs c)) (preserves-all xs c) ‚ü©
      (if eval p c then ‚ü¶ translate-all l ‚üß‚Çö c ++ ‚ü¶ translate-all xs ‚üß‚Çö c else ‚ü¶ translate-all xs ‚üß‚Çö c)
    ‚â°‚ü® Eq.cong (if eval p c then_else ‚ü¶ translate-all xs ‚üß‚Çö c) (++-preserves l xs c) ‚ü©
      (if eval p c then ‚ü¶ translate-all (l ++ xs) ‚üß‚Çö c else ‚ü¶ translate-all xs ‚üß‚Çö c)
    ‚â°‚ü®‚ü©
      ‚ü¶ p ‚ü® translate-all (l ++ xs) , translate-all xs ‚ü© ‚üß‚Çö c
    ‚â°‚ü® Eq.cong (Œª x ‚Üí ‚ü¶ x ‚üß‚Çö c) (translate-all-step' (if[ p ]then[ l ] ‚à∑ xs)) ‚ü®
      ‚ü¶ translate-all (if[ p ]then[ l ] ‚à∑ xs) ‚üß‚Çö c
    ‚àé
    where
    open Eq.‚â°-Reasoning
  preserves-all (if[ p ]then[ l ]else[ r ] ‚à∑ xs) c =
      configure-all (if[ p ]then[ l ]else[ r ] ‚à∑ xs) c
    ‚â°‚ü®‚ü©
      (if eval p c then configure-all l c else configure-all r c) ++ configure-all xs c
    ‚â°‚ü® Bool.if-float (_++ configure-all xs c) (eval p c) ‚ü©
      (if eval p c then configure-all l c ++ configure-all xs c else configure-all r c ++ configure-all xs c)
    ‚â°‚ü® Eq.cong‚ÇÇ (if eval p c then_else_) (Eq.cong‚ÇÇ _++_ (preserves-all l c) (preserves-all xs c)) (Eq.cong‚ÇÇ _++_ (preserves-all r c) (preserves-all xs c)) ‚ü©
      (if eval p c then ‚ü¶ translate-all l ‚üß‚Çö c ++ ‚ü¶ translate-all xs ‚üß‚Çö c else ‚ü¶ translate-all r ‚üß‚Çö c ++ ‚ü¶ translate-all xs ‚üß‚Çö c)
    ‚â°‚ü® Eq.cong‚ÇÇ (if eval p c then_else_) (++-preserves l xs c) (++-preserves r xs c) ‚ü©
      (if eval p c then ‚ü¶ translate-all (l ++ xs) ‚üß‚Çö c else ‚ü¶ translate-all (r ++ xs) ‚üß‚Çö c)
    ‚â°‚ü®‚ü©
      ‚ü¶ p ‚ü® translate-all (l ++ xs) , translate-all (r ++ xs) ‚ü© ‚üß‚Çö c
    ‚â°‚ü® Eq.cong (Œª x ‚Üí ‚ü¶ x ‚üß‚Çö c) (translate-all-step' (if[ p ]then[ l ]else[ r ] ‚à∑ xs)) ‚ü®
      ‚ü¶ translate-all (if[ p ]then[ l ]else[ r ] ‚à∑ xs) ‚üß‚Çö c
    ‚àé
    where
    open Eq.‚â°-Reasoning

  preserves : ‚àÄ (vt : VT A) ‚Üí ‚ü¶ vt ‚üß ‚âó ‚ü¶ translate vt ‚üß‚Çö
  preserves if-true[ xs ] c = preserves-all xs c

VT‚ÜíPropADT : LanguageCompiler VTL PropADTL
VT‚ÜíPropADT = record
  { compile = translate
  ; config-compiler = Œª _ ‚Üí record { to = id ; from = id }
  ; preserves = ‚âó‚Üí‚âÖ[] ‚àò preserves
  }

PropADT‚âΩVT : PropADTL ‚âΩ VTL
PropADT‚âΩVT = expressiveness-from-compiler VT‚ÜíPropADT

VT‚ÜíADT : LanguageCompiler VTL ADTL
VT‚ÜíADT = VT‚ÜíPropADT Compiler.‚äï formula-elim-compiler

ADT‚âΩVT : ADTL ‚âΩ VTL
ADT‚âΩVT = ‚âΩ-trans PropADT‚âΩADT PropADT‚âΩVT

{-|
This module contains some tests for the translation function to see it in action.
-}
module Test {A : ùî∏} where
  open Vatras.Framework.Variants using (rose-leaf; forest-leaf; forest-singleton)

  module Forest (a b : atoms A) where
    vt : VT A
    vt =
      if-true[
        vt-leaf a ‚à∑ vt-leaf b ‚à∑ []
      ]

    adt : ADT A
    adt = leaf (rose-leaf a ‚à∑ rose-leaf b ‚à∑ [])

    tr : translate vt ‚â° adt
    tr = refl

    pres : VT.‚ü¶ vt ‚üß ‚âó ‚ü¶ translate vt ‚üß‚Çö
    pres _ = refl

  module SingleOption (X : Prop F) (a b : atoms A) where
    vt : VT A
    vt =
      if-true[
        a -<
          if[ X ]then[
            vt-leaf b ‚à∑ []
          ] ‚à∑ []
        >- ‚à∑ []
      ]

    adt : ADT A
    adt = X ‚ü® leaf (forest-singleton a (forest-leaf b)) , leaf (forest-leaf a) ‚ü©

    tr : translate vt ‚â° adt
    tr = refl

    pres-t : VT.‚ü¶ vt ‚üß ‚âó ‚ü¶ translate vt ‚üß‚Çö
    pres-t c with eval X c
    ... | true  = refl
    ... | false = refl

  module SingleChoice (X : Prop F) (a b‚ÇÅ b‚ÇÇ e‚ÇÅ e‚ÇÇ : atoms A) where
    vt : VT A
    vt =
      if-true[
        a -<
          if[ X ]then[
            vt-leaf b‚ÇÅ ‚à∑
            vt-leaf b‚ÇÇ ‚à∑ []
          ]else[
            vt-leaf e‚ÇÅ ‚à∑
            vt-leaf e‚ÇÇ ‚à∑ []
          ] ‚à∑ []
        >- ‚à∑ []
      ]

    adt : ADT A
    adt =
      X ‚ü®
        leaf (forest-singleton a (rose-leaf b‚ÇÅ ‚à∑ rose-leaf b‚ÇÇ ‚à∑ [])) ,
        leaf (forest-singleton a (rose-leaf e‚ÇÅ ‚à∑ rose-leaf e‚ÇÇ ‚à∑ []))
      ‚ü©

    tr : translate vt ‚â° adt
    tr = refl

    pres-t : VT.‚ü¶ vt ‚üß ‚âó ‚ü¶ translate vt ‚üß‚Çö
    pres-t c with eval X c
    ... | true  = refl
    ... | false = refl
