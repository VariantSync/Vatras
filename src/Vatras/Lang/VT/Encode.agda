open import Vatras.Framework.Definitions
module Vatras.Lang.VT.Encode (F : ùîΩ) where

open import Data.Bool using (true)
open import Data.List using (List; []; _‚à∑_; _++_; map; concat; concatMap)
open import Data.List.Properties using (concatMap-map)
open import Data.Unit using (‚ä§; tt)
open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_; refl)
open Eq.‚â°-Reasoning
open import Size using (‚àû)
open import Function using (_‚àò_)

open import Vatras.Framework.Variants using (Forest; Rose; _-<_>-; Variant-is-VL; VariantEncoder)
open import Vatras.Lang.VT F

open import Vatras.Data.EqIndexedSet using (_‚âÖ[_][_]_; irrelevant-index-‚âÖ)
open import Vatras.Framework.Relation.Function using (_‚áî_; to; from)
open import Vatras.Framework.VariabilityLanguage using (Semantics; Config)

{-|
Encodes a tree as a non-variational UnrootedVT.
Configuring the resulting expression will always yield
the input tree.
-}
{-# TERMINATING #-}
encode-tree : ‚àÄ {A} ‚Üí Rose ‚àû A ‚Üí UnrootedVT A
encode-tree (a -< cs >-) = a -< map encode-tree cs >-

{-|
Encodes all trees in a forest to a non-variational
UnrootedVT each, using 'encode-tree' defined above.
-}
encode-forest : ‚àÄ {A} ‚Üí Forest A ‚Üí List (UnrootedVT A)
encode-forest = map encode-tree

encode : ‚àÄ {A} ‚Üí Forest A ‚Üí VT A
encode x = if-true[ encode-forest x ]

mutual
  encode-tree-preserves : ‚àÄ {A} ‚Üí (T : Rose ‚àû A) (c : Configuration)
    ‚Üí configure c (encode-tree T) ‚â° T ‚à∑ []
  encode-tree-preserves (a -< cs >-) c = Eq.cong (Œª eq ‚Üí (a -< eq >-) ‚à∑ []) (encode-forest-preserves cs c)

  encode-forest-preserves : ‚àÄ {A} (V : Forest A) (c : Configuration)
    ‚Üí configure-all c (encode-forest V) ‚â° V
  encode-forest-preserves [] _ = refl
  encode-forest-preserves (x ‚à∑ xs) c =
    begin
      configure-all c (encode-forest (x ‚à∑ xs))
    ‚â°‚ü®‚ü©
      configure-all c (map encode-tree (x ‚à∑ xs))
    ‚â°‚ü®‚ü©
      concatMap (configure c) (map encode-tree (x ‚à∑ xs))
    ‚â°‚ü® concatMap-map (configure c) (encode-tree) (x ‚à∑ xs) ‚ü©
      concatMap (configure c ‚àò encode-tree) (x ‚à∑ xs)
    ‚â°‚ü®‚ü©
      concat ((configure c (encode-tree x) ‚à∑ map (configure c ‚àò encode-tree) xs))
    ‚â°‚ü®‚ü©
      (configure c (encode-tree x)) ++ (concatMap (configure c ‚àò encode-tree) xs)
    ‚â°‚ü® Eq.cong (_++ _) (encode-tree-preserves x c) ‚ü©
      (x ‚à∑ []) ++ (concatMap (configure c ‚àò encode-tree) xs)
    ‚â°‚ü®‚ü©
      x ‚à∑ (concatMap (configure c ‚àò encode-tree) xs)
    ‚â°‚ü® Eq.cong (x ‚à∑_) (concatMap-map (configure c) encode-tree xs) ‚ü®
      x ‚à∑ (concatMap (configure c) (map encode-tree xs))
    ‚â°‚ü® Eq.cong (x ‚à∑_) (encode-forest-preserves xs c) ‚ü©
      x ‚à∑ xs
    ‚àé

encode-preserves : ‚àÄ {A} (V : Forest A) (c : Configuration)
    ‚Üí ‚ü¶ encode V ‚üß c ‚â° V
encode-preserves = encode-forest-preserves

{-|
Translating configurations is trivial because their values never matter.
We can do anything here.
-}
confs : ‚ä§ ‚áî Configuration
confs = record
  { to = Œª where tt _ ‚Üí true
  ; from = Œª _ ‚Üí tt
  }

preserves : ‚àÄ {A} ‚Üí (v : Forest A)
  ‚Üí (Œª _ ‚Üí v) ‚âÖ[ to confs ][ from confs ] ‚ü¶ encode v ‚üß
preserves {A} v = irrelevant-index-‚âÖ v
  (Œª { tt ‚Üí refl })
  (encode-preserves v)
  (to confs)
  (from confs)

encoder : VariantEncoder Forest VTL
encoder = record
  { compile = encode
  ; config-compiler = Œª _ ‚Üí confs
  ; preserves = preserves
  }
