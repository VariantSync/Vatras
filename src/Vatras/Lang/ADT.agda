{-|
This module defines algebraic decision trees as defined in our paper.
-}
open import Vatras.Framework.Definitions
module Vatras.Lang.ADT (F : ùîΩ) (V : ùïç) where

open import Data.Bool using (Bool; if_then_else_)
open import Vatras.Framework.VariabilityLanguage

{-|
An algebraic decision tree stores variants in leaf nodes
and decorates them with binary choices.
-}
data ADT : ùîº where
  leaf   : ‚àÄ {A} ‚Üí V A ‚Üí ADT A
  _‚ü®_,_‚ü© : ‚àÄ {A} ‚Üí (D : F) ‚Üí (l : ADT A) ‚Üí (r : ADT A) ‚Üí ADT A

Configuration : ‚ÑÇ
Configuration = F ‚Üí Bool

{-|
To configure an ADT, we basically walk down from the root to the
leaf node holding the desired variant.
We do this by evaluating each choice until we hit a leaf.
-}
‚ü¶_‚üß : ùîº-Semantics V Configuration ADT
‚ü¶ leaf v      ‚üß _ = v
‚ü¶ D ‚ü® l , r ‚ü© ‚üß c = if c D
                    then ‚ü¶ l ‚üß c
                    else ‚ü¶ r ‚üß c

ADTL : VariabilityLanguage V
ADTL = ‚ü™ ADT , Configuration , ‚ü¶_‚üß ‚ü´

open import Data.String as String using (String; _++_; intersperse)
open import Data.Product using (_,_)
open import Vatras.Show.Lines

{-|
Pretty printer for ADTs.
-}
pretty : {A : ùî∏} ‚Üí (V A ‚Üí String) ‚Üí (F ‚Üí String) ‚Üí ADT A ‚Üí Lines
pretty pretty-variant show-F (leaf v) = > pretty-variant v
pretty pretty-variant show-F (D ‚ü® l , r ‚ü©) = do
  > show-F D ++ "‚ü®"
  indent 2 do
    appendToLastLine "," (pretty pretty-variant show-F l)
    pretty pretty-variant show-F r
  > "‚ü©"
