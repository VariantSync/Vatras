open import Framework.Definitions

module Translation.Construct.2Choice-to-Choice-VL where

open import Data.Bool using (Bool)
open import Data.Nat using (‚Ñï)
open import Data.Product using (proj‚ÇÅ; proj‚ÇÇ)
open import Function using (_‚àò_)

-- open import Relation.Binary using (Setoid; IsEquivalence)
open import Relation.Binary.PropositionalEquality as Eq using (_‚âó_; refl)

import Data.IndexedSet

open import Framework.VariabilityLanguage
open import Framework.Construct
open import Framework.Compiler using (LanguageCompiler)
open import Framework.Relation.Function using (to-is-Embedding)

import Translation.Construct.2Choice-to-Choice as 2Choice-to-Choice
open 2Choice-to-Choice using (ConfContract; FnocContract)

open import Construct.Choices

module Translate {Q : ùîΩ} {V : ùïç} {A : ùî∏}
  (Œì‚ÇÅ Œì‚ÇÇ : VariabilityLanguage V)
  (extract‚ÇÅ : Compatible (VL2Choice.Construct V Q) Œì‚ÇÅ)
  (t : LanguageCompiler Œì‚ÇÅ Œì‚ÇÇ)
  (confi : 2Choice.Config Q ‚Üí Choice.Config Q)
  (fnoci : Choice.Config Q ‚Üí 2Choice.Config Q)
  where
  private
    L‚ÇÅ   = Expression Œì‚ÇÅ
    ‚ü¶_‚üß‚ÇÅ = Semantics  Œì‚ÇÅ
    L‚ÇÇ   = Expression Œì‚ÇÇ
    ‚ü¶_‚üß‚ÇÇ = Semantics  Œì‚ÇÇ
    open LanguageCompiler t

  -- TODO: Generalize to any setoids over L‚ÇÅ or L‚ÇÇ.
  module 2Choice-to-Choice-T‚ÇÅ = 2Choice-to-Choice.Translate {Q} (Eq.setoid (L‚ÇÅ A))
  open 2Choice-to-Choice-T‚ÇÅ using () renaming (convert to convert‚ÇÅ)
  module 2Choice-to-Choice-T‚ÇÇ = 2Choice-to-Choice.Translate {Q} (Eq.setoid (L‚ÇÇ A))
  open 2Choice-to-Choice-T‚ÇÇ using () renaming (convert to convert‚ÇÇ)

  {-|
  Composition of two compilers:
  First, we convert all alternatives from one language to another using `map‚ÇÇ compile`.
  Second, we convert the binary choice to an n-ary choice via convert, not changing any data.
  The order of these steps does not matter, as proven by `convert-comm` below.
  -}
  compile-convert : VL2Choice.Syntax Q L‚ÇÅ A ‚Üí VLChoice.Syntax Q L‚ÇÇ A
  compile-convert = convert‚ÇÇ ‚àò 2Choice.map compile

  {-|
  The same compiler as compile-convert, but the steps are executed in the other order.
  -}
  convert-compile : VL2Choice.Syntax Q L‚ÇÅ A ‚Üí VLChoice.Syntax Q L‚ÇÇ A
  convert-compile = Choice.map compile ‚àò convert‚ÇÅ

  {-|
  Proof that the following square commutes.
  This means that it does not matter in which order we
    - convert a binary to an n-ary choice,
    - compile subterms.

  Algebraically:
    map‚Çô compile ‚àò convert ‚âó convert ‚àò map‚ÇÇ compile

  Graphically:
    binary L‚ÇÅ ‚îÄ‚îÄ convert ‚îÄ‚îÄ‚Üí nary L‚ÇÅ
      |                        |
      | map‚ÇÇ compile           | map‚Çô compile
      ‚Üì                        ‚Üì
    binary L‚ÇÇ ‚îÄ‚îÄ convert ‚îÄ‚îÄ‚Üí nary L‚ÇÇ
  -}
  convert-comm : convert-compile ‚âó compile-convert
  convert-comm _ = refl
