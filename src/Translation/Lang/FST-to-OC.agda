open import Framework.Definitions using (ùîΩ; ùî∏; atoms)
open import Relation.Binary using (DecidableEquality)
open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_; _‚â¢_; refl)

module Translation.Lang.FST-to-OC {F : ùîΩ} (f‚ÇÅ f‚ÇÇ : F) (f‚ÇÅ‚â¢f‚ÇÇ : f‚ÇÅ ‚â¢ f‚ÇÇ) (_==Íü≥_ : DecidableEquality F) where

open import Size using (‚àû)
open import Data.Bool as Bool using (true; false)
import Data.Bool.Properties as Bool
open import Data.Empty using (‚ä•; ‚ä•-elim)
open import Data.List as List using (List; []; _‚à∑_; length; catMaybes)
open import Data.List.Properties as List
open import Data.List.Relation.Binary.Sublist.Heterogeneous using ([]; _‚à∑_; _‚à∑ ≥_)
open import Data.List.Relation.Unary.All using ([]; _‚à∑_)
open import Data.List.Relation.Unary.AllPairs using ([]; _‚à∑_)
open import Data.Maybe using (nothing; just)
open import Data.Nat using (zero; suc; _‚âü_; ‚Ñï; _+_; _‚â§_; z‚â§n; s‚â§s)
import Data.Nat.Properties as ‚Ñï
open import Data.Product using (_,_; ‚àÉ-syntax)
open import Data.Sum as Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Function using (flip)
open import Relation.Nullary using (yes; no)

open Eq.‚â°-Reasoning

open import Framework.Variants using (Rose; rose-leaf; _-<_>-; children-equality)
import Construct.Plain.Artifact
open import Lang.All
open OC using (WFOCL; Root; _‚ù≤_‚ù≥; all-oc)
open import Lang.OC.Properties using (‚ü¶e‚üß‚Çítrue‚â°just)
open import Lang.OC.Subtree using (Subtree; subtrees; both; neither; Implies; subtree‚Çí; subtree‚Çí-recurse)
open import Lang.FST using (FSTL-Sem)
open FST using (FSTL)
open FST.Impose

V = Rose ‚àû
open import Framework.Relation.Expressiveness V using (_‚ã°_)

A : ùî∏
A = ‚Ñï , _‚âü_

-- This represents a form of an alternative where there are the variants
--   zero -< zero -<     zero -< [] >- ‚à∑ [] >- ‚à∑ [] >-
--   zero -< zero -< suc zero -< [] >- ‚à∑ [] >- ‚à∑ [] >-
-- but there is no
--   zero -< zero -<                     [] >- ‚à∑ [] >-
-- variant. Hence, at least one inner children is required. Note, however, that
-- there are two more variants:
--   zero -< zero -< zero -< [] >- ‚à∑ suc zero -< [] >- ‚à∑ [] >- ‚à∑ [] >-
--   zero -<                                                >- ‚à∑ [] >-
--
-- The idea of the following proof is to show that any OC expression will
-- necessarily have to include some other variant.
-- We identified two cases:
--
-- - The `shared-artifact` case includes the extra variant
--     zero -< zero -<                     [] >- ‚à∑ [] >-
--   For example:
--     zero -< zero -< f‚ÇÅ ‚ù≤ zero -< [] >- ‚ù≥ ‚à∑ f‚ÇÇ ‚ù≤ suc zero -< [] >- ‚ù≥ ‚à∑ [] >- ‚à∑ [] >-
--
-- - The `more-artifacts` case includes an extra variant like
--     zero -< zero -< zero -< [] >- ‚à∑ [] >- ‚à∑ zero -< suc zero -< [] >- ‚à∑ [] >- ‚à∑ [] >-
--   for example
--     zero -< f‚ÇÅ ‚ù≤ zero -< zero -< [] >- ‚à∑ [] >- ‚ù≥ ‚à∑ f‚ÇÇ ‚ù≤ zero -< suc zero -< [] >- ‚à∑ [] >- ‚ù≥ ‚à∑ [] >-
--   Note that, in contrast to the `shared-artifact` case, this variant is
--   not uniquely determined. In fact, The order of the two features isn't fixed
--   and the configuration chosen by the proof could introduce more artifacts
--   because there can be options which are not selected by the configurations
--   `c‚ÇÅ` and `c‚ÇÇ` below.
counter-example : SPL F A
counter-example = zero ‚óÄ (
    (f‚ÇÅ :: ((zero -<     zero -< [] >- ‚à∑ [] >- ‚à∑ []) ‚äö ([] ‚à∑ [] , (([] ‚à∑ []) , (([] , []) ‚à∑ [])) ‚à∑ [])))
  ‚à∑ (f‚ÇÇ :: ((zero -< suc zero -< [] >- ‚à∑ [] >- ‚à∑ []) ‚äö ([] ‚à∑ [] , (([] ‚à∑ []) , (([] , []) ‚à∑ [])) ‚à∑ [])))
  ‚à∑ [])

-- There are four relevant configurations for `counter-example` because it uses
-- exactly two features: `c‚ÇÅ`, `c‚ÇÇ`, `all-oc true` and `all-oc false`.
c‚ÇÅ : FST.Configuration F
c‚ÇÅ f with f ==Íü≥ f‚ÇÅ
c‚ÇÅ f | yes f‚â°f‚ÇÅ = true
c‚ÇÅ f | no f‚â¢f‚ÇÅ = false

c‚ÇÇ : FST.Configuration F
c‚ÇÇ f with f ==Íü≥ f‚ÇÇ
c‚ÇÇ f | yes f‚â°f‚ÇÇ = true
c‚ÇÇ f | no f‚â¢f‚ÇÇ = false

-- To be as general as possible, we do not fix `F` but only require that it
-- contains at least two different features `f‚ÇÅ` and `f‚ÇÇ`. To implement `c‚ÇÅ` and
-- `c‚ÇÇ` equality in `F` nees to be decidable, so `==Íü≥` is also required.
-- However, Agda can't compute with `==Íü≥` so we need the following two lemmas to
-- sort out invalid definitions of `==Íü≥` and actually compute the semantics of
-- `counter-example`.
compute-counter-example-c‚ÇÅ : {a : Rose ‚àû A} ‚Üí FSTL-Sem F counter-example c‚ÇÅ ‚â° a ‚Üí zero -< zero -< zero -< [] >- ‚à∑ [] >- ‚à∑ [] >- ‚â° a
compute-counter-example-c‚ÇÅ p with f‚ÇÅ ==Íü≥ f‚ÇÅ | f‚ÇÇ ==Íü≥ f‚ÇÅ | c‚ÇÅ f‚ÇÅ in c‚ÇÅ-f‚ÇÅ | c‚ÇÅ f‚ÇÇ in c‚ÇÅ-f‚ÇÇ
compute-counter-example-c‚ÇÅ p | yes f‚ÇÅ‚â°f‚ÇÅ | yes f‚ÇÇ‚â°f‚ÇÅ | _ | _ = ‚ä•-elim (f‚ÇÅ‚â¢f‚ÇÇ (Eq.sym f‚ÇÇ‚â°f‚ÇÅ))
compute-counter-example-c‚ÇÅ p | yes f‚ÇÅ‚â°f‚ÇÅ | no f‚ÇÇ‚â¢f‚ÇÅ | true | false = p
compute-counter-example-c‚ÇÅ p | no f‚ÇÅ‚â¢f‚ÇÅ | _ | _ | _ = ‚ä•-elim (f‚ÇÅ‚â¢f‚ÇÅ refl)

compute-counter-example-c‚ÇÇ : {a : Rose ‚àû A} ‚Üí FSTL-Sem F counter-example c‚ÇÇ ‚â° a ‚Üí zero -< zero -< suc zero -< [] >- ‚à∑ [] >- ‚à∑ [] >- ‚â° a
compute-counter-example-c‚ÇÇ p with f‚ÇÅ ==Íü≥ f‚ÇÇ | f‚ÇÇ ==Íü≥ f‚ÇÇ | c‚ÇÇ f‚ÇÅ in c‚ÇÇ-f‚ÇÅ | c‚ÇÇ f‚ÇÇ in c‚ÇÇ-f‚ÇÇ
compute-counter-example-c‚ÇÇ p | yes f‚ÇÅ‚â°f‚ÇÇ | _ | _ | _ = ‚ä•-elim (f‚ÇÅ‚â¢f‚ÇÇ f‚ÇÅ‚â°f‚ÇÇ)
compute-counter-example-c‚ÇÇ p | no f‚ÇÅ‚â¢f‚ÇÇ | yes f‚ÇÇ‚â°f‚ÇÇ | false | true = p
compute-counter-example-c‚ÇÇ p | no f‚ÇÅ‚â¢f‚ÇÇ | no f‚ÇÇ‚â¢f‚ÇÇ | _ | _ = ‚ä•-elim (f‚ÇÇ‚â¢f‚ÇÇ refl)

-- For proving the `shared-artifact` case, we need to compute a configuration
-- which deselects the options guarding the inner artifacts (`zero -< [] >-` and
-- `suc zero -< [] >-`) but selects all options leading to the shared artifact
-- surrounding these two options.
_‚àß_ : {F : ùîΩ} ‚Üí OC.Configuration F ‚Üí OC.Configuration F ‚Üí OC.Configuration F
_‚àß_ c‚ÇÅ c‚ÇÇ f = c‚ÇÅ f Bool.‚àß c‚ÇÇ f

implies-‚àß‚ÇÅ : {F : ùîΩ} {c‚ÇÅ c‚ÇÇ : OC.Configuration F} ‚Üí Implies (c‚ÇÅ ‚àß c‚ÇÇ) c‚ÇÅ
implies-‚àß‚ÇÅ {c‚ÇÅ = c‚ÇÅ} f p with c‚ÇÅ f
implies-‚àß‚ÇÅ f p | true = refl

implies-‚àß‚ÇÇ : {F : ùîΩ} {c‚ÇÅ c‚ÇÇ : OC.Configuration F} ‚Üí Implies (c‚ÇÅ ‚àß c‚ÇÇ) c‚ÇÇ
implies-‚àß‚ÇÇ {c‚ÇÅ = c‚ÇÅ} {c‚ÇÇ = c‚ÇÇ} f p with c‚ÇÅ f | c‚ÇÇ f
implies-‚àß‚ÇÇ f p | true | true = refl

-- In case we found a node corresponding to either `zero -< zero -< [] >- ‚à∑ [] >-`
-- or `zero -< suc zero -< [] >- ‚à∑ [] >-`, we choose the all true configuration
-- and proof that there is at least one more artifact in the resulting variant.
--
-- As discussed at the definition of `counter-example`, the order of the
-- artifact nodes is not uniquely determined. Hence, there are two distinct
-- cases in `induction`, which we abstract over using the `v` argument.
-- Moreover, we only prove that there is one more artifact in the variant.  In
-- addition, there can be additional options, only present in the all true
-- configuration, which is why we only prove that there is at least one more
-- artifact.
more-artifacts : ‚àÄ {F' : ùîΩ}
  ‚Üí (cs : List (OC.OC F' ‚àû A))
  ‚Üí (c‚Çô : OC.Configuration F')
  ‚Üí (v : Rose ‚àû A)
  ‚Üí zero -< v ‚à∑ [] >- ‚à∑ [] ‚â° OC.‚ü¶ cs ‚üß‚Çí-recurse c‚Çô
  ‚Üí 1 ‚â§ length (OC.‚ü¶ cs ‚üß‚Çí-recurse (all-oc true))
more-artifacts (a OC.-< cs' >- ‚à∑ cs) c‚Çô v p = s‚â§s z‚â§n
more-artifacts (e@(f OC.‚ù≤ e' ‚ù≥) ‚à∑ cs) c‚Çô v p with OC.‚ü¶ e ‚üß‚Çí (all-oc true) | ‚ü¶e‚üß‚Çítrue‚â°just e
more-artifacts (e@(f OC.‚ù≤ e' ‚ù≥) ‚à∑ cs) c‚Çô v p | .(just _) | _ , refl = s‚â§s z‚â§n

-- In this case, the relevant options are contained in the same, shared, option
-- `e`.  The goal is to proof that we can deselect all inner options and obtain
-- this shared artifact without any inner artifacts.
--
-- As configuration, we chose the intersection of the two given configurations.
-- This ensures that all options up to the shared artifact are included because
-- they must be included in both variants. Simultaneously, this excludes the
-- artifacts themselves because each configuration excludes one of them.
shared-artifact : ‚àÄ {F' : ùîΩ}
  ‚Üí (e : OC.OC F' ‚àû A)
  ‚Üí (c‚ÇÅ c‚ÇÇ : OC.Configuration F')
  ‚Üí just (zero -< rose-leaf      zero  ‚à∑ [] >-) ‚â° OC.‚ü¶ e ‚üß‚Çí c‚ÇÅ
  ‚Üí just (zero -< rose-leaf (suc zero) ‚à∑ [] >-) ‚â° OC.‚ü¶ e ‚üß‚Çí c‚ÇÇ
  ‚Üí just (zero -< [] >-) ‚â° OC.‚ü¶ e ‚üß‚Çí (c‚ÇÅ ‚àß c‚ÇÇ)
shared-artifact (zero OC.-< cs >-) c‚ÇÅ c‚ÇÇ p‚ÇÅ p‚ÇÇ with OC.‚ü¶ cs ‚üß‚Çí-recurse c‚ÇÅ | OC.‚ü¶ cs ‚üß‚Çí-recurse c‚ÇÇ | OC.‚ü¶ cs ‚üß‚Çí-recurse (c‚ÇÅ ‚àß c‚ÇÇ) | subtree‚Çí-recurse cs (c‚ÇÅ ‚àß c‚ÇÇ) c‚ÇÅ implies-‚àß‚ÇÅ | subtree‚Çí-recurse cs (c‚ÇÅ ‚àß c‚ÇÇ) c‚ÇÇ (implies-‚àß‚ÇÇ {c‚ÇÅ = c‚ÇÅ})
shared-artifact (zero OC.-< cs >-) c‚ÇÅ c‚ÇÇ refl refl | _ | _ | [] | _ | _ = refl
shared-artifact (zero OC.-< cs >-) c‚ÇÅ c‚ÇÇ refl refl | _ | _ | _ ‚à∑ _ | subtrees _ ‚à∑ _ | () ‚à∑ _
shared-artifact (f OC.‚ù≤ e ‚ù≥) c‚ÇÅ c‚ÇÇ p‚ÇÅ p‚ÇÇ with c‚ÇÅ f | c‚ÇÇ f
shared-artifact (f OC.‚ù≤ e ‚ù≥) c‚ÇÅ c‚ÇÇ p‚ÇÅ p‚ÇÇ | true | true = shared-artifact e c‚ÇÅ c‚ÇÇ p‚ÇÅ p‚ÇÇ

-- This is the main induction over the top most children of the OC expression.
-- It requires two configuration which evaluate to the two alternative variants.
-- For simplicity, though not actually required for the result, it also takes a
-- configuration showing that the semantics of the expression includes a variant
-- without children. This eliminates a bunch of proof cases (e.g. having an
-- unconditional artifact).
--
-- The idea is to find a child which exists in at least one of the variants
-- configured by `c‚ÇÅ` or `c‚ÇÇ`. Hence, we do a case analysis on whether a given
-- option exists when evaluated with the configurations `c‚ÇÅ` and `c‚ÇÇ` (we can
-- ignore artifacts because of `c‚ÇÉ`). Note that evaluating the configuration for
-- this option alone is not enough to guarantee that there is an artifact
-- because options can be nested arbitrarily deep without artifacts in between.
--
-- If an option evaluates to an artifact in exactly one of the configurations,
-- we know there must be a second option in `cs` evaluating to the an artifact
-- in the other configuration. In this case, called `more-artifacts`, we count
-- the top level child artifacts when the OC expression is evaluated using the
-- all true configuration.
--
-- If an option evaluates to an artifact for both `c‚ÇÅ` and `c‚ÇÇ` it must also
-- evaluate to an artifact for the intersection of these configurations. The
-- resulting variant can't include the child artifacts of the `c‚ÇÅ` and `c‚ÇÇ`
-- variants forcing it to have exactly one shape. In this case, called
-- `shared-artifact`, we return the exact variant to which the expression
-- evaluates under the intersection of `c‚ÇÅ` and `c‚ÇÇ`.
induction : ‚àÄ {F' : ùîΩ}
  ‚Üí (cs : List (OC.OC F' ‚àû A))
  ‚Üí (c‚ÇÅ c‚ÇÇ c‚ÇÉ : OC.Configuration F')
  ‚Üí zero -< rose-leaf      zero  ‚à∑ [] >- ‚à∑ [] ‚â° OC.‚ü¶ cs ‚üß‚Çí-recurse c‚ÇÅ
  ‚Üí zero -< rose-leaf (suc zero) ‚à∑ [] >- ‚à∑ [] ‚â° OC.‚ü¶ cs ‚üß‚Çí-recurse c‚ÇÇ
  ‚Üí [] ‚â° OC.‚ü¶ cs ‚üß‚Çí-recurse c‚ÇÉ
  ‚Üí 2 ‚â§ length (OC.‚ü¶ cs ‚üß‚Çí-recurse (all-oc true))
  ‚äé zero -< [] >- ‚à∑ [] ‚â° OC.‚ü¶ cs ‚üß‚Çí-recurse (c‚ÇÅ ‚àß c‚ÇÇ)
induction (_ OC.-< _ >- ‚à∑ cs) c‚ÇÅ c‚ÇÇ c‚ÇÉ p‚ÇÅ p‚ÇÇ ()
induction (e@(_ OC.‚ù≤ _ ‚ù≥) ‚à∑ cs) c‚ÇÅ c‚ÇÇ c‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ with OC.‚ü¶ e ‚üß‚Çí c‚ÇÅ in ‚ü¶e‚üßc‚ÇÅ | OC.‚ü¶ e ‚üß‚Çí c‚ÇÇ in ‚ü¶e‚üßc‚ÇÇ | OC.‚ü¶ e ‚üß‚Çí c‚ÇÉ
induction (e@(_ OC.‚ù≤ _ ‚ù≥) ‚à∑ cs) c‚ÇÅ c‚ÇÇ c‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ | nothing | nothing | nothing with induction cs c‚ÇÅ c‚ÇÇ c‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ
induction (e@(_ OC.‚ù≤ _ ‚ù≥) ‚à∑ cs) c‚ÇÅ c‚ÇÇ c‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ | nothing | nothing | nothing | inj‚ÇÅ p with OC.‚ü¶ e ‚üß‚Çí (all-oc true)
induction (e@(_ OC.‚ù≤ _ ‚ù≥) ‚à∑ cs) c‚ÇÅ c‚ÇÇ c‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ | nothing | nothing | nothing | inj‚ÇÅ p | just _ = inj‚ÇÅ (‚Ñï.‚â§-trans p (‚Ñï.n‚â§1+n _))
induction (e@(_ OC.‚ù≤ _ ‚ù≥) ‚à∑ cs) c‚ÇÅ c‚ÇÇ c‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ | nothing | nothing | nothing | inj‚ÇÅ p | nothing = inj‚ÇÅ p
induction (e@(_ OC.‚ù≤ _ ‚ù≥) ‚à∑ cs) c‚ÇÅ c‚ÇÇ c‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ | nothing | nothing | nothing | inj‚ÇÇ p with OC.‚ü¶ e ‚üß‚Çí (c‚ÇÅ ‚àß c‚ÇÇ) | OC.‚ü¶ e ‚üß‚Çí c‚ÇÅ | subtree‚Çí e (c‚ÇÅ ‚àß c‚ÇÇ) c‚ÇÅ implies-‚àß‚ÇÅ
induction (e@(_ OC.‚ù≤ _ ‚ù≥) ‚à∑ cs) c‚ÇÅ c‚ÇÇ c‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ | nothing | nothing | nothing | inj‚ÇÇ p | nothing | nothing | neither = inj‚ÇÇ p
induction (e@(_ OC.‚ù≤ _ ‚ù≥) ‚à∑ cs) c‚ÇÅ c‚ÇÇ c‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ | nothing | just _  | nothing with OC.‚ü¶ e ‚üß‚Çí c‚ÇÇ | ‚ü¶e‚üßc‚ÇÇ | OC.‚ü¶ e ‚üß‚Çí (all-oc true) | subtree‚Çí e c‚ÇÇ (all-oc true) (Œª f p ‚Üí refl)
induction (e@(_ OC.‚ù≤ _ ‚ù≥) ‚à∑ cs) c‚ÇÅ c‚ÇÇ c‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ | nothing | just _  | nothing | just _ | _ | .(just _) | both _ = inj‚ÇÅ (s‚â§s (more-artifacts cs c‚ÇÅ (rose-leaf zero) p‚ÇÅ))
induction (e@(_ OC.‚ù≤ _ ‚ù≥) ‚à∑ cs) c‚ÇÅ c‚ÇÇ c‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ | just _  | nothing | nothing with OC.‚ü¶ e ‚üß‚Çí c‚ÇÅ | ‚ü¶e‚üßc‚ÇÅ | OC.‚ü¶ e ‚üß‚Çí (all-oc true) | subtree‚Çí e c‚ÇÅ (all-oc true) (Œª f p ‚Üí refl)
induction (e@(_ OC.‚ù≤ _ ‚ù≥) ‚à∑ cs) c‚ÇÅ c‚ÇÇ c‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ | just _  | nothing | nothing | just _ | _ | .(just _) | both _ = inj‚ÇÅ (s‚â§s (more-artifacts cs c‚ÇÇ (rose-leaf (suc zero)) p‚ÇÇ))
induction (e@(_ OC.‚ù≤ _ ‚ù≥) ‚à∑ cs) c‚ÇÅ c‚ÇÇ c‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ | just _  | just _  | nothing with List.‚à∑-injective ≥ p‚ÇÅ
induction (e@(_ OC.‚ù≤ _ ‚ù≥) ‚à∑ cs) c‚ÇÅ c‚ÇÇ c‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ | just _  | just _  | nothing | _ with OC.‚ü¶ cs ‚üß‚Çí-recurse (c‚ÇÅ ‚àß c‚ÇÇ) in ‚ü¶cs‚üßc‚ÇÅ‚àßc‚ÇÇ | OC.‚ü¶ cs ‚üß‚Çí-recurse c‚ÇÅ | subtree‚Çí-recurse cs (c‚ÇÅ ‚àß c‚ÇÇ) c‚ÇÅ implies-‚àß‚ÇÅ
induction (e@(_ OC.‚ù≤ _ ‚ù≥) ‚à∑ cs) c‚ÇÅ c‚ÇÇ c‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ | just _  | just _  | nothing | _ | .[] | .[] | [] = inj‚ÇÇ (
    zero -< [] >- ‚à∑ []
  ‚â°‚ü® Eq.cong‚ÇÇ _‚à∑_ refl ‚ü¶cs‚üßc‚ÇÅ‚àßc‚ÇÇ ‚ü®
    zero -< [] >- ‚à∑ OC.‚ü¶ cs ‚üß‚Çí-recurse (c‚ÇÅ ‚àß c‚ÇÇ)
  ‚â°‚ü®‚ü©
    catMaybes (just (zero -< [] >-) ‚à∑ List.map (flip OC.‚ü¶_‚üß‚Çí (c‚ÇÅ ‚àß c‚ÇÇ)) cs)
  ‚â°‚ü® Eq.cong catMaybes (Eq.cong‚ÇÇ _‚à∑_ (shared-artifact e c‚ÇÅ c‚ÇÇ
                                                      (Eq.trans (Eq.cong just (List.‚à∑-injectiveÀ° p‚ÇÅ)) (Eq.sym ‚ü¶e‚üßc‚ÇÅ))
                                                      (Eq.trans (Eq.cong just (List.‚à∑-injectiveÀ° p‚ÇÇ)) (Eq.sym ‚ü¶e‚üßc‚ÇÇ)))
                                      refl) ‚ü©
    catMaybes (OC.‚ü¶ e ‚üß‚Çí (c‚ÇÅ ‚àß c‚ÇÇ) ‚à∑ List.map (flip OC.‚ü¶_‚üß‚Çí (c‚ÇÅ ‚àß c‚ÇÇ)) cs)
  ‚â°‚ü®‚ü©
    OC.‚ü¶ e ‚à∑ cs ‚üß‚Çí-recurse (c‚ÇÅ ‚àß c‚ÇÇ)
  ‚àé)

-- The results of the `induction` show that OC has no equivalent to the FST
-- expression. The proof evaluates the FST expression on all relevant
-- configurations which results in contradictions in every case.
impossible : ‚àÄ {F' : ùîΩ}
  ‚Üí (cs : List (OC.OC F' ‚àû A))
  ‚Üí (c‚ÇÅ c‚ÇÇ : OC.Configuration F')
  ‚Üí ((c : OC.Configuration F') ‚Üí ‚àÉ[ c' ] OC.‚ü¶ Root zero cs ‚üß c ‚â° FSTL-Sem F counter-example c')
  ‚Üí 2 ‚â§ length (OC.‚ü¶ cs ‚üß‚Çí-recurse (all-oc true))
  ‚äé zero -< [] >- ‚à∑ [] ‚â° OC.‚ü¶ cs ‚üß‚Çí-recurse (c‚ÇÅ ‚àß c‚ÇÇ)
  ‚Üí ‚ä•
impossible cs c‚ÇÅ c‚ÇÇ alternative‚äÜe (inj‚ÇÅ p) with alternative‚äÜe (all-oc true)
impossible cs c‚ÇÅ c‚ÇÇ alternative‚äÜe (inj‚ÇÅ p) | c' , e' with OC.‚ü¶ cs ‚üß‚Çí-recurse (all-oc true) | c' f‚ÇÅ | c' f‚ÇÇ
impossible cs c‚ÇÅ c‚ÇÇ alternative‚äÜe (inj‚ÇÅ (s‚â§s ())) | c' , e' | _ ‚à∑ [] | _ | _
impossible cs c‚ÇÅ c‚ÇÇ alternative‚äÜe (inj‚ÇÅ p) | c' , () | _ ‚à∑ _ ‚à∑ _ | false | false
impossible cs c‚ÇÅ c‚ÇÇ alternative‚äÜe (inj‚ÇÅ p) | c' , () | _ ‚à∑ _ ‚à∑ _ | false | true
impossible cs c‚ÇÅ c‚ÇÇ alternative‚äÜe (inj‚ÇÅ p) | c' , () | _ ‚à∑ _ ‚à∑ _ | true  | false
impossible cs c‚ÇÅ c‚ÇÇ alternative‚äÜe (inj‚ÇÅ p) | c' , () | _ ‚à∑ _ ‚à∑ _ | true  | true
impossible cs c‚ÇÅ c‚ÇÇ alternative‚äÜe (inj‚ÇÇ p) with alternative‚äÜe (c‚ÇÅ ‚àß c‚ÇÇ)
impossible cs c‚ÇÅ c‚ÇÇ alternative‚äÜe (inj‚ÇÇ p) | c' , e' with c' f‚ÇÅ | c' f‚ÇÇ | Eq.trans (Eq.cong (zero -<_>-) p) e'
impossible cs c‚ÇÅ c‚ÇÇ alternative‚äÜe (inj‚ÇÇ p) | c' , e' | false | false | ()
impossible cs c‚ÇÅ c‚ÇÇ alternative‚äÜe (inj‚ÇÇ p) | c' , e' | false | true  | ()
impossible cs c‚ÇÅ c‚ÇÇ alternative‚äÜe (inj‚ÇÇ p) | c' , e' | true  | false | ()
impossible cs c‚ÇÅ c‚ÇÇ alternative‚äÜe (inj‚ÇÇ p) | c' , e' | true  | true  | ()

-- With a little plumbing we can now conclude that there are Feature Structure
-- Trees (FST) with no Option Calculus (OC) equivalent.
WFOCL‚ã°FSTL : ‚àÄ {F' : ùîΩ} ‚Üí WFOCL F' ‚ã° FSTL F
WFOCL‚ã°FSTL WFOCL‚âΩFSTL with WFOCL‚âΩFSTL counter-example
WFOCL‚ã°FSTL WFOCL‚âΩFSTL | Root a cs , e‚äÜalternative , alternative‚äÜe with e‚äÜalternative c‚ÇÅ | e‚äÜalternative c‚ÇÇ | e‚äÜalternative (all-oc false)
WFOCL‚ã°FSTL {F'} WFOCL‚âΩFSTL | Root zero cs , e‚äÜalternative , alternative‚äÜe | (c‚ÇÅ , p‚ÇÅ) | (c‚ÇÇ , p‚ÇÇ) | (c‚ÇÉ , p‚ÇÉ) =
  impossible cs c‚ÇÅ c‚ÇÇ alternative‚äÜe
    (induction cs c‚ÇÅ c‚ÇÇ c‚ÇÉ (children-equality (compute-counter-example-c‚ÇÅ p‚ÇÅ))
                           (children-equality (compute-counter-example-c‚ÇÇ p‚ÇÇ))
                           (children-equality p‚ÇÉ))
