{-# OPTIONS --sized-types #-}

open import Framework.Definitions using (ùïç; atoms)
open import Framework.Construct using (_‚àà‚Çõ_; cons)
open import Construct.Artifact as At using () renaming (Syntax to Artifact; _-<_>- to artifact-constructor)

{-
This module defines a compiler from NCC to NCC where the number N of alternatives per
choice grows. The compiler duplicates the last alternative in each choice to grow the vector
of alternatives to match a desired larger size.
-}
module Translation.Lang.NCC.Grow (Variant : ùïç) (Artifact‚àà‚ÇõVariant : Artifact ‚àà‚Çõ Variant) where

open import Data.Empty using (‚ä•-elim)
import Data.EqIndexedSet as IndexedSet
open import Data.Fin as Fin using (Fin; zero; suc)
import Data.Fin.Properties as Fin
open import Data.List as List using (List; []; _‚à∑_)
import Data.List.Properties as List
open import Data.Nat using (‚Ñï; zero; suc; _<_; s‚â§s; z‚â§n; _+_; _‚à∏_)
open import Data.Nat.Properties as ‚Ñï using (‚â§-refl; ‚â§-reflexive; ‚â§-trans; <-trans)
open import Data.Product using (_√ó_; _,_)
open import Data.Vec as Vec using (Vec; []; _‚à∑_)
import Data.Vec.Properties as Vec
open import Framework.Compiler using (LanguageCompiler; _‚äï_)
open import Framework.Definitions using (ùî∏; ùîΩ)
open import Framework.Relation.Function using (from; to)
open import Function using (id; _‚àò_)
open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_; _‚â¢_; refl; _‚âó_)
open import Relation.Nullary.Decidable using (yes; no)
open import Size using (Size; ‚àû)
import Util.AuxProofs as ‚Ñï
open import Util.Nat.AtLeast as ‚Ñï‚â• using (‚Ñï‚â•; sucs)
import Util.Vec as Vec

open Eq.‚â°-Reasoning using (step-‚â°; step-‚â°Àò; _‚â°‚ü®‚ü©_; _‚àé)
open IndexedSet using (_‚âÖ[_][_]_; _‚äÜ[_]_; ‚âÖ[]-sym)

open import Lang.All.Generic Variant Artifact‚àà‚ÇõVariant
open NCC using (NCC; NCCL; _-<_>-; _‚ü®_‚ü©)

artifact : {A : ùî∏} ‚Üí atoms A ‚Üí List (Variant A) ‚Üí Variant A
artifact a cs = cons Artifact‚àà‚ÇõVariant (artifact-constructor a cs)

-- Increasing the arity is straightforward. We have to duplicate one element (we choose the last one to be consistent with the saturation semantic of `CCC`, see `find-or-last`) until the arity difference is zero.
-- For symmetry, this module provides a translation from the 2-ary `NCC`, because, for simplicity of the proof, ShrinkTo2 translates to the 2-ary `NCC`.
-- However, the proof of the generalizaton is almost identical so we prove the generalization directly and then specialize the proof.
grow : ‚àÄ {i : Size} {D : ùîΩ} {A : ùî∏}
  ‚Üí (n m : ‚Ñï‚â• 2)
  ‚Üí n ‚Ñï‚â•.‚â§ m
  ‚Üí NCC n D i A
  ‚Üí NCC m D i A
grow n m n‚â§m (a -< cs >-) = a -< List.map (grow n m n‚â§m) cs >-
grow (sucs n) m n‚â§m (d ‚ü® cs ‚ü©) = d ‚ü® Vec.saturate n‚â§m (Vec.map (grow (sucs n) m n‚â§m) cs) ‚ü©

conf : ‚àÄ {D : ùîΩ}
  ‚Üí (n m : ‚Ñï‚â• 2)
  ‚Üí n ‚Ñï‚â•.‚â§ m
  ‚Üí NCC.Configuration n D
  ‚Üí NCC.Configuration m D
conf (sucs n) (sucs m) n‚â§m config d = Fin.inject‚â§ (config d) n‚â§m

fnoc : ‚àÄ {D : ùîΩ}
  ‚Üí (n m : ‚Ñï‚â• 2)
  ‚Üí n ‚Ñï‚â•.‚â§ m
  ‚Üí NCC.Configuration m D
  ‚Üí NCC.Configuration n D
fnoc (sucs n) (sucs m) n‚â§m config d = ‚Ñï‚â•.cappedFin (Fin.to‚Ñï (config d))

preserves-‚äÜ : ‚àÄ {i : Size} {D : ùîΩ} {A : ùî∏}
  ‚Üí (n m : ‚Ñï‚â• 2)
  ‚Üí (n‚â§m : n ‚Ñï‚â•.‚â§ m)
  ‚Üí (expr : NCC n D i A)
  ‚Üí NCC.‚ü¶ grow n m n‚â§m expr ‚üß ‚äÜ[ fnoc n m n‚â§m ] NCC.‚ü¶ expr ‚üß
preserves-‚äÜ n m n‚â§m (a -< cs >-) config =
    NCC.‚ü¶ grow n m n‚â§m (a -< cs >-) ‚üß config
  ‚â°‚ü®‚ü©
    NCC.‚ü¶ a -< List.map (grow n m n‚â§m) cs >- ‚üß config
  ‚â°‚ü®‚ü©
    artifact a (List.map (Œª e ‚Üí NCC.‚ü¶ e ‚üß config) (List.map (grow n m n‚â§m) cs))
  ‚â°Àò‚ü® Eq.cong‚ÇÇ artifact Eq.refl (List.map-‚àò cs) ‚ü©
    artifact a (List.map (Œª e ‚Üí NCC.‚ü¶ grow n m n‚â§m e ‚üß config) cs)
  ‚â°‚ü® Eq.cong‚ÇÇ artifact Eq.refl (List.map-cong (Œª e ‚Üí preserves-‚äÜ n m n‚â§m e config) cs) ‚ü©
    artifact a (List.map (Œª e ‚Üí NCC.‚ü¶ e ‚üß (fnoc n m n‚â§m config)) cs)
  ‚â°‚ü®‚ü©
    NCC.‚ü¶ a -< cs >- ‚üß (fnoc n m n‚â§m config)
  ‚àé
preserves-‚äÜ (sucs n) (sucs m) n‚â§m (d ‚ü® cs ‚ü©) config =
    NCC.‚ü¶ grow (sucs n) (sucs m) n‚â§m (d ‚ü® cs ‚ü©) ‚üß config
  ‚â°‚ü®‚ü©
    NCC.‚ü¶ d ‚ü® Vec.saturate n‚â§m (Vec.map (grow (sucs n) (sucs m) n‚â§m) cs) ‚ü© ‚üß config
  ‚â°‚ü®‚ü©
    NCC.‚ü¶ Vec.lookup (Vec.saturate n‚â§m (Vec.map (grow (sucs n) (sucs m) n‚â§m) cs)) (config d) ‚üß config
  ‚â°‚ü® Eq.cong‚ÇÇ NCC.‚ü¶_‚üß (Eq.cong‚ÇÇ Vec.lookup (Vec.saturate-map n‚â§m (grow (sucs n) (sucs m) n‚â§m) cs) refl) refl ‚ü©
    NCC.‚ü¶ Vec.lookup (Vec.map (grow (sucs n) (sucs m) n‚â§m) (Vec.saturate n‚â§m cs)) (config d) ‚üß config
  ‚â°‚ü® Eq.cong‚ÇÇ NCC.‚ü¶_‚üß (Vec.lookup-map (config d) (grow (sucs n) (sucs m) n‚â§m) (Vec.saturate n‚â§m cs)) refl ‚ü©
    NCC.‚ü¶ (grow (sucs n) (sucs m) n‚â§m) (Vec.lookup (Vec.saturate n‚â§m cs) (config d)) ‚üß config
  ‚â°‚ü® preserves-‚äÜ (sucs n) (sucs m) n‚â§m (Vec.lookup (Vec.saturate n‚â§m cs) (config d)) config ‚ü©
    NCC.‚ü¶ Vec.lookup (Vec.saturate n‚â§m cs) (config d) ‚üß (fnoc (sucs n) (sucs m) n‚â§m config)
  ‚â°‚ü® Eq.cong‚ÇÇ NCC.‚ü¶_‚üß (Vec.lookup-saturate n‚â§m cs (config d)) refl ‚ü©
    NCC.‚ü¶ Vec.lookup cs (fnoc (sucs n) (sucs m) n‚â§m config d) ‚üß (fnoc (sucs n) (sucs m) n‚â§m config)
  ‚â°‚ü®‚ü©
    NCC.‚ü¶ d ‚ü® cs ‚ü© ‚üß (fnoc (sucs n) (sucs m) n‚â§m config)
  ‚àé

preserves-‚äá : ‚àÄ {i : Size} {D : ùîΩ} {A : ùî∏}
  ‚Üí (n m : ‚Ñï‚â• 2)
  ‚Üí (n‚â§m : n ‚Ñï‚â•.‚â§ m)
  ‚Üí (expr : NCC n D i A)
  ‚Üí NCC.‚ü¶ expr ‚üß ‚äÜ[ conf n m n‚â§m ] NCC.‚ü¶ grow n m n‚â§m expr ‚üß
preserves-‚äá n m n‚â§m (a -< cs >-) config =
    artifact a (List.map (Œª e ‚Üí NCC.‚ü¶ e ‚üß config) cs)
  ‚â°‚ü® Eq.cong‚ÇÇ artifact Eq.refl (List.map-cong (Œª e ‚Üí preserves-‚äá n m n‚â§m e config) cs) ‚ü©
    artifact a (List.map (Œª e ‚Üí NCC.‚ü¶ grow n m n‚â§m e ‚üß (conf n m n‚â§m config)) cs)
  ‚â°‚ü® Eq.cong‚ÇÇ artifact Eq.refl (List.map-‚àò cs) ‚ü©
    NCC.‚ü¶ a -< List.map (grow n m n‚â§m) cs >- ‚üß (conf n m n‚â§m config)
  ‚â°‚ü®‚ü©
    artifact a (List.map (Œª e ‚Üí NCC.‚ü¶ e ‚üß (conf n m n‚â§m config)) (List.map (grow n m n‚â§m) cs))
  ‚àé
preserves-‚äá (sucs n) (sucs m) n‚â§m (d ‚ü® cs ‚ü©) config =
    NCC.‚ü¶ d ‚ü® cs ‚ü© ‚üß config
  ‚â°‚ü®‚ü©
    NCC.‚ü¶ Vec.lookup cs (config d) ‚üß config
  ‚â°Àò‚ü® Eq.cong‚ÇÇ NCC.‚ü¶_‚üß (Eq.cong‚ÇÇ Vec.lookup (refl {x = cs}) (‚Ñï‚â•.cappedFin-to‚Ñï (config d))) refl ‚ü©
    NCC.‚ü¶ Vec.lookup cs (‚Ñï‚â•.cappedFin (Fin.to‚Ñï (config d))) ‚üß config
  ‚â°Àò‚ü® Eq.cong‚ÇÇ NCC.‚ü¶_‚üß (Eq.cong‚ÇÇ Vec.lookup (refl {x = cs}) (Eq.cong ‚Ñï‚â•.cappedFin (Fin.to‚Ñï-inject‚â§ (config d) n‚â§m))) refl ‚ü©
    NCC.‚ü¶ Vec.lookup cs (‚Ñï‚â•.cappedFin (Fin.to‚Ñï (Fin.inject‚â§ (config d) n‚â§m))) ‚üß config
  ‚â°Àò‚ü® Eq.cong‚ÇÇ NCC.‚ü¶_‚üß (Vec.lookup-saturate n‚â§m cs (Fin.inject‚â§ (config d) n‚â§m)) refl ‚ü©
    NCC.‚ü¶ Vec.lookup (Vec.saturate n‚â§m cs) (Fin.inject‚â§ (config d) n‚â§m) ‚üß config
  ‚â°‚ü®‚ü©
    NCC.‚ü¶ Vec.lookup (Vec.saturate n‚â§m cs) (conf (sucs n) (sucs m) n‚â§m config d) ‚üß config
  ‚â°‚ü® preserves-‚äá (sucs n) (sucs m) n‚â§m (Vec.lookup (Vec.saturate n‚â§m cs) (conf (sucs n) (sucs m) n‚â§m config d)) config ‚ü©
    NCC.‚ü¶ (grow (sucs n) (sucs m) n‚â§m) (Vec.lookup (Vec.saturate n‚â§m cs) (conf (sucs n) (sucs m) n‚â§m config d)) ‚üß (conf (sucs n) (sucs m) n‚â§m config)
  ‚â°Àò‚ü® Eq.cong‚ÇÇ NCC.‚ü¶_‚üß (Vec.lookup-map (conf (sucs n) (sucs m) n‚â§m config d) (grow (sucs n) (sucs m) n‚â§m) (Vec.saturate n‚â§m cs)) refl ‚ü©
    NCC.‚ü¶ Vec.lookup (Vec.map (grow (sucs n) (sucs m) n‚â§m) (Vec.saturate n‚â§m cs)) (conf (sucs n) (sucs m) n‚â§m config d) ‚üß (conf (sucs n) (sucs m) n‚â§m config)
  ‚â°Àò‚ü® Eq.cong‚ÇÇ NCC.‚ü¶_‚üß (Eq.cong‚ÇÇ Vec.lookup (Vec.saturate-map n‚â§m (grow (sucs n) (sucs m) n‚â§m) cs) refl) refl ‚ü©
    NCC.‚ü¶ Vec.lookup (Vec.saturate n‚â§m (Vec.map (grow (sucs n) (sucs m) n‚â§m) cs)) (conf (sucs n) (sucs m) n‚â§m config d) ‚üß (conf (sucs n) (sucs m) n‚â§m config)
  ‚â°‚ü®‚ü©
    NCC.‚ü¶ d ‚ü® Vec.saturate n‚â§m (Vec.map (grow (sucs n) (sucs m) n‚â§m) cs) ‚ü© ‚üß (conf (sucs n) (sucs m) n‚â§m config)
  ‚â°‚ü®‚ü©
    NCC.‚ü¶ grow (sucs n) (sucs m) n‚â§m (d ‚ü® cs ‚ü©) ‚üß (conf (sucs n) (sucs m) n‚â§m config)
  ‚àé

preserves : ‚àÄ {i : Size} {D : ùîΩ} {A : ùî∏}
  ‚Üí (n m : ‚Ñï‚â• 2)
  ‚Üí (n‚â§m : n ‚Ñï‚â•.‚â§ m)
  ‚Üí (expr : NCC n D i A)
  ‚Üí NCC.‚ü¶ grow n m n‚â§m expr ‚üß ‚âÖ[ fnoc n m n‚â§m ][ conf n m n‚â§m ] NCC.‚ü¶ expr ‚üß
preserves n m n‚â§m expr = preserves-‚äÜ n m n‚â§m expr , preserves-‚äá n m n‚â§m expr

growCompiler : ‚àÄ {i : Size} {D : ùîΩ}
  ‚Üí (n m : ‚Ñï‚â• 2)
  ‚Üí n ‚Ñï‚â•.‚â§ m
  ‚Üí LanguageCompiler (NCCL {i} n D) (NCCL {i} m D)
growCompiler n m n‚â§m .LanguageCompiler.compile = grow n m n‚â§m
growCompiler n m n‚â§m .LanguageCompiler.config-compiler expr .to = conf n m n‚â§m
growCompiler n m n‚â§m .LanguageCompiler.config-compiler expr .from = fnoc n m n‚â§m
growCompiler n m n‚â§m .LanguageCompiler.preserves expr = ‚âÖ[]-sym (preserves n m n‚â§m expr)

growFrom2Compiler : ‚àÄ {i : Size} {D : ùîΩ} ‚Üí (n : ‚Ñï‚â• 2) ‚Üí LanguageCompiler (NCCL {i} (sucs zero) D) (NCCL {i} n D)
growFrom2Compiler (sucs n) = growCompiler (sucs zero) (sucs n) (‚Ñï‚â•.lift‚â§ z‚â§n)
