open import Framework.V2.Definitions

module Framework.V2.Translation.2Choice-to-NChoice-VL {F : ùîΩ} where

open import Data.Bool using (Bool; false; true)
open import Data.List using (List; _‚à∑_; [])
open import Data.List.NonEmpty using (List‚Å∫; _‚à∑_)
open import Data.Nat using (‚Ñï; suc; zero)
open import Data.Product using (proj‚ÇÅ; proj‚ÇÇ) renaming (_,_ to _and_)
open import Function using (_‚àò_)

-- open import Relation.Binary using (Setoid; IsEquivalence)
open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_; refl)

import Data.IndexedSet

import Framework.V2.Translation.2Choice-to-NChoice as 2‚ÜíN
open 2‚ÜíN using (ConfSpec; FnocSpec)

open import Framework.V2.Constructs.Choices as Chc
open Chc.Choice‚ÇÇ using (_‚ü®_,_‚ü©) renaming (Config to Config‚ÇÇ; map to map‚ÇÇ)
open Chc.Choice‚Çô using (_‚ü®_‚ü©) renaming (Config to Config‚Çô; map to map‚Çô)

module Translate {F : ùîΩ} {V : ùïç} {A : ùî∏}
  (Œì‚ÇÅ : VariabilityLanguage V F Bool)
  (Œì‚ÇÇ : VariabilityLanguage V F ‚Ñï)
  (t : Expression Œì‚ÇÅ A ‚Üí Expression Œì‚ÇÇ A)
  where
  private
    ‚ü¶_‚üß‚ÇÅ = Semantics Œì‚ÇÅ
    ‚ü¶_‚üß‚ÇÇ = Semantics Œì‚ÇÇ
    L‚ÇÅ = Expression Œì‚ÇÅ
    L‚ÇÇ = Expression Œì‚ÇÇ
  open VariabilityConstruct (Chc.VLChoice‚ÇÇ.Construct V F)
    renaming (Construct to 2Choice; _‚ä¢‚ü¶_‚üß to _‚ä¢‚ü¶_‚üß‚ÇÇ)
  open VariabilityConstruct (Chc.VLChoice‚Çô.Construct V F)
    renaming (Construct to NChoice; _‚ä¢‚ü¶_‚üß to _‚ä¢‚ü¶_‚üß‚Çô)

  -- todo: generalize to any setoid for L‚ÇÅ
  module 2‚ÜíN-T = 2‚ÜíN.Translate {Q = F} (Eq.setoid (L‚ÇÅ A))
  open 2‚ÜíN-T using (convert)

  -- Composition of two compilers:
  -- first: We convert the binary choice to an n-ary choice via convert, not changing any data
  -- second: We convert all alternatives from one language to another using `map‚Çô t`.
  -- This composition is commutative; there is a commuting square
  --   map‚Çô t ‚àò convert ‚âÖ convert ‚àò map‚ÇÇ t
  -- TODO: Prove this commutativity.
  convert-vl : 2Choice L‚ÇÅ A ‚Üí NChoice L‚ÇÇ A
  convert-vl = map‚Çô t ‚àò convert

  module Preservation
    (conf : Config‚ÇÇ F ‚Üí Config‚Çô F)
    (fnoc : Config‚Çô F ‚Üí Config‚ÇÇ F)
    (D : F)
    (l r : L‚ÇÅ A)
    where
    open import Framework.V2.Variants using (VariantSetoid)
    open 2‚ÜíN-T.Preservation conf fnoc D l r using (convert-preserves; preserves-conf)

    open import Framework.V2.V1Compat using (Conf-Preserves; Fnoc-Preserves; _,_‚ä¢_‚âö_)

    module IVSet = Data.IndexedSet (VariantSetoid V A)
    module ILSet = Data.IndexedSet (Eq.setoid (L‚ÇÅ A))
    open ILSet using () renaming (_‚âÖ_ to _‚âã_)
    open IVSet using (‚äÜ-by-index-translation; _‚âÖ_; ‚âê‚Üí‚âÖ)
    open IVSet.‚âÖ-Reasoning

    -- preserves-conf :
    --     ConfSpec D conf
    --   ‚Üí (c : Config‚ÇÇ F)
    --   ‚Üí   (Œì‚ÇÅ ‚ä¢‚ü¶ D ‚ü® l , r ‚ü© ‚üß‚ÇÇ) c
    --     ‚â° (Œì‚ÇÇ ‚ä¢‚ü¶ convert-vl (D ‚ü® l , r ‚ü©) ‚üß‚Çô) (conf c)
    -- preserves-conf conv c = {!!}

    -- preserves-fnoc :
    --     FnocSpec D fnoc
    --   ‚Üí (c : Config‚Çô F)
    --   ‚Üí   (Œì‚ÇÇ ‚ä¢‚ü¶ convert-vl (D ‚ü® l , r ‚ü©) ‚üß‚Çô) c
    --     ‚â° (Œì‚ÇÅ ‚ä¢‚ü¶ D ‚ü® l , r ‚ü© ‚üß‚ÇÇ) (fnoc c)
    -- preserves-fnoc vnoc c = {!!}

    convert-vl-preserves :
      ‚àÄ (conv : ConfSpec D conf)
      ‚Üí (vnoc : FnocSpec D fnoc)
      -- Generalize this so that t satisfies a predicate that its semantics preserving
      -- In Framework V1 we have this for translations which are a bit more involved.
      -- But maybe we do not even need the concrete conf translations in the Translation record.
      ‚Üí (‚àÄ e ‚Üí Œì‚ÇÅ , Œì‚ÇÇ ‚ä¢ e ‚âö t e)
      -- ‚Üí Conf-Preserves Œì‚ÇÅ Œì‚ÇÇ l (t l) conf
      -- ‚Üí Fnoc-Preserves Œì‚ÇÅ Œì‚ÇÇ l (t l) fnoc
      -- ‚Üí Conf-Preserves Œì‚ÇÅ Œì‚ÇÇ r (t r) conf
      -- ‚Üí Fnoc-Preserves Œì‚ÇÅ Œì‚ÇÇ r (t r) fnoc
      ‚Üí   Œì‚ÇÅ ‚ä¢‚ü¶ D ‚ü® l , r ‚ü© ‚üß‚ÇÇ
        ‚âÖ Œì‚ÇÇ ‚ä¢‚ü¶ convert-vl (D ‚ü® l , r ‚ü©) ‚üß‚Çô
    proj‚ÇÅ (convert-vl-preserves conv vnoc t-is-nice) = ‚äÜ-by-index-translation conf left
      where open Eq.‚â°-Reasoning
            left : (c : Config‚ÇÇ F)
              ‚Üí   (Œì‚ÇÅ ‚ä¢‚ü¶ D ‚ü® l , r ‚ü© ‚üß‚ÇÇ) c
                ‚â° (Œì‚ÇÇ ‚ä¢‚ü¶ convert-vl (D ‚ü® l , r ‚ü©) ‚üß‚Çô) (conf c)
            left c =
              begin
                (Œì‚ÇÅ ‚ä¢‚ü¶ D ‚ü® l , r ‚ü© ‚üß‚ÇÇ) c
              ‚â°‚ü®‚ü©
                ‚ü¶ Choice‚ÇÇ.Standard-Semantics (D ‚ü® l , r ‚ü©) c ‚üß‚ÇÅ c
              ‚â°‚ü® Eq.cong (Œª x ‚Üí ‚ü¶ x ‚üß‚ÇÅ c) (preserves-conf conv c) ‚ü©
                ‚ü¶ Choice‚Çô.Standard-Semantics (convert (D ‚ü® l , r ‚ü©)) (conf c) ‚üß‚ÇÅ c
              ‚â°‚ü® {!!} ‚ü© -- t validity here
                ‚ü¶ t (Choice‚Çô.Standard-Semantics (convert (D ‚ü® l , r ‚ü©)) (conf c)) ‚üß‚ÇÇ (conf c)
              ‚â°Àò‚ü® Eq.cong (Œª x ‚Üí ‚ü¶ x ‚üß‚ÇÇ (conf c)) (Choice‚Çô.map-preserves t (convert (D ‚ü® l , r ‚ü©)) (conf c)) ‚ü©
                ‚ü¶ Choice‚Çô.Standard-Semantics (map‚Çô t (convert (D ‚ü® l , r ‚ü©))) (conf c) ‚üß‚ÇÇ (conf c)
              ‚â°‚ü®‚ü©
                (Œì‚ÇÇ ‚ä¢‚ü¶ convert-vl (D ‚ü® l , r ‚ü©) ‚üß‚Çô) (conf c)
              ‚àé
    proj‚ÇÇ (convert-vl-preserves conv vnoc t-is-nice) = ‚äÜ-by-index-translation fnoc {!!}
      -- ‚âÖ-begin
      --   Œì‚ÇÅ ‚ä¢‚ü¶ D ‚ü® l , r ‚ü© ‚üß‚ÇÇ
      -- ‚âÖ‚ü®‚ü©
      --   (Œª c ‚Üí ‚ü¶ Choice‚ÇÇ.Standard-Semantics (D ‚ü® l , r ‚ü©) c ‚üß‚ÇÅ c)
      -- ‚âê[ c ]‚ü® Eq.cong (Œª x ‚Üí ‚ü¶ x ‚üß‚ÇÅ c) (preserves-conf conv c) ‚ü©
      --   (Œª c ‚Üí ‚ü¶ Choice‚Çô.Standard-Semantics (convert (D ‚ü® l , r ‚ü©)) (conf c) ‚üß‚ÇÅ c)
      -- -- ‚âÖ‚ü® {!!} ‚ü©
      --   -- (Œª c ‚Üí ‚ü¶ t (Choice‚ÇÇ.Standard-Semantics (D ‚ü® l , r ‚ü©) c) ‚üß‚ÇÇ (conf c))
      -- -- ‚âÖ‚ü® {!!} and ‚äÜ-by-index-translation fnoc {!!} ‚ü© -- eliminate t because it preserves by assumption
      --   -- (Œª c ‚Üí ‚ü¶ Choice‚Çô.Standard-Semantics (convert (D ‚ü® l , r ‚ü©)) c ‚üß‚ÇÅ c)
      -- ‚âê[ c ]‚ü® t-is-nice (Choice‚Çô.Standard-Semantics (convert (D ‚ü® l , r ‚ü©)) (conf c)) ‚ü©
      --   (Œª c ‚Üí ‚ü¶ t (Choice‚Çô.Standard-Semantics (convert (D ‚ü® l , r ‚ü©)) (conf c)) ‚üß‚ÇÇ (conf c))
      -- ‚âÖ‚ü® ? ‚ü©
      --   (Œª c ‚Üí ‚ü¶ t (Choice‚Çô.Standard-Semantics (convert (D ‚ü® l , r ‚ü©)) (conf c)) ‚üß‚ÇÇ c)
      -- ‚âêÀò[ c ]‚ü® Eq.cong (Œª x ‚Üí ‚ü¶ x ‚üß‚ÇÇ c) (Choice‚Çô.map-preserves t (convert (D ‚ü® l , r ‚ü©)) c) ‚ü©
      --   (Œª c ‚Üí ‚ü¶ Choice‚Çô.Standard-Semantics (map‚Çô t (convert (D ‚ü® l , r ‚ü©))) c ‚üß‚ÇÇ c)
      -- ‚âÖ‚ü®‚ü©
      --   Œì‚ÇÇ ‚ä¢‚ü¶ (map‚Çô t ‚àò convert) (D ‚ü® l , r ‚ü©)) ‚üß‚Çô
      -- ‚âÖ‚ü®‚ü©
      --   Œì‚ÇÇ ‚ä¢‚ü¶ convert-vl (D ‚ü® l , r ‚ü©) ‚üß‚Çô
      -- ‚àé-‚âÖ
      -- where open Eq.‚â°-Reasoning

      --       chc-eq : Choice‚ÇÇ.Standard-Semantics (D ‚ü® l , r ‚ü©) ‚âã Choice‚Çô.Standard-Semantics (convert (D ‚ü® l , r ‚ü©))
      --       chc-eq = convert-preserves conv vnoc
      --       left : (c : Config‚ÇÇ F)
      --            ‚Üí   ‚ü¶ Choice‚ÇÇ.Standard-Semantics (D ‚ü® l , r ‚ü©) c ‚üß‚ÇÅ c
      --              ‚â° ‚ü¶ t (Choice‚Çô.Standard-Semantics (convert (D ‚ü® l , r ‚ü©)) (conf c)) ‚üß‚ÇÇ (conf c)
      --       left c =
      --         begin
      --           ‚ü¶ Choice‚ÇÇ.Standard-Semantics (D ‚ü® l , r ‚ü©) c ‚üß‚ÇÅ c
      --         ‚â°‚ü® Eq.cong (Œª x ‚Üí ‚ü¶ x ‚üß‚ÇÅ c) {!proj‚ÇÅ chc-eq c !} ‚ü©
      --           ‚ü¶ Choice‚Çô.Standard-Semantics (convert (D ‚ü® l , r ‚ü©)) (conf c) ‚üß‚ÇÅ c
      --         ‚â°‚ü® {!!} ‚ü©
      --           ‚ü¶ t (Choice‚Çô.Standard-Semantics (convert (D ‚ü® l , r ‚ü©)) (conf c)) ‚üß‚ÇÇ (conf c)
      --         ‚àé
