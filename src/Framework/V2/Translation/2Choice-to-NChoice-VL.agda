open import Framework.V2.Definitions

module Framework.V2.Translation.2Choice-to-NChoice-VL {F : ùîΩ} where

open import Data.Bool using (Bool)
open import Data.Nat using (‚Ñï)
open import Data.Product using (proj‚ÇÅ; proj‚ÇÇ)
open import Function using (_‚àò_)

-- open import Relation.Binary using (Setoid; IsEquivalence)
open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_; refl)

import Data.IndexedSet

open import Framework.V2.Variants
open import Framework.V2.Compiler using (LanguageCompiler; Stable)

import Framework.V2.Translation.2Choice-to-NChoice as 2‚ÜíN
open 2‚ÜíN using (ConfSpec; FnocSpec)

open import Framework.V2.Constructs.Choices as Chc
open Chc.Choice‚ÇÇ using (_‚ü®_,_‚ü©) renaming (Config to Config‚ÇÇ; map to map‚ÇÇ)

module Translate {F : ùîΩ} {V : ùïç} {A : ùî∏}
  (Œì‚ÇÅ : VariabilityLanguage V F Bool)
  (Œì‚ÇÇ : VariabilityLanguage V F ‚Ñï)
  (t : LanguageCompiler Œì‚ÇÅ Œì‚ÇÇ)
  where
  private
    L‚ÇÅ   = Expression Œì‚ÇÅ
    ‚ü¶_‚üß‚ÇÅ = Semantics  Œì‚ÇÅ
    L‚ÇÇ   = Expression Œì‚ÇÇ
    ‚ü¶_‚üß‚ÇÇ = Semantics  Œì‚ÇÇ
    open LanguageCompiler t

  open VariabilityConstruct (Chc.VLChoice‚ÇÇ.Construct F)
    renaming (Construct to 2Choice; _‚ä¢‚ü¶_‚üß to _‚ä¢‚ü¶_‚üß‚ÇÅ)
  open VariabilityConstruct (Chc.VLChoice‚Çô.Construct F)
    renaming (Construct to NChoice; _‚ä¢‚ü¶_‚üß to _‚ä¢‚ü¶_‚üß‚ÇÇ)

  -- TODO: Generalize to any setoid for L‚ÇÅ.
  module 2‚ÜíN-T = 2‚ÜíN.Translate {Q = F} (Eq.setoid (L‚ÇÇ A))
  open 2‚ÜíN-T using (convert)

  -- Composition of two compilers:
  -- First, we convert all alternatives from one language to another using `map‚ÇÇ compile`.
  -- Second, we convert the binary choice to an n-ary choice via convert, not changing any data.
  -- This composition is commutative; there is a commuting square:
  --   map‚Çô compile ‚àò convert ‚âÖ convert ‚àò map‚ÇÇ compile
  -- TODO: Prove this commutativity.
  convert-vl : 2Choice F L‚ÇÅ A ‚Üí NChoice F L‚ÇÇ A
  convert-vl = convert ‚àò map‚ÇÇ compile

  module Preservation
    (D : F)
    (l r : L‚ÇÅ A)
    where
    open 2‚ÜíN-T.Preservation conf fnoc using (convert-preserves)

    module VSet = IVSet V A
    open VSet using (_‚âÖ[_][_]_)
    open VSet.‚âÖ[]-Reasoning

    convert-vl-preserves :
      ‚àÄ (conv : ConfSpec D conf)
      ‚Üí (vnoc : FnocSpec D fnoc)
      ‚Üí Stable config-compiler
      ‚Üí (Œì‚ÇÅ ‚ä¢‚ü¶ D ‚ü® l , r ‚ü© ‚üß‚ÇÅ) ‚âÖ[ conf ][ fnoc ] (Œì‚ÇÇ ‚ä¢‚ü¶ convert-vl (D ‚ü® l , r ‚ü©) ‚üß‚ÇÇ)
    convert-vl-preserves conv vnoc stable =
      ‚âÖ[]-begin
        Œì‚ÇÅ ‚ä¢‚ü¶ D ‚ü® l , r ‚ü© ‚üß‚ÇÅ
      ‚âÖ[]‚ü®‚ü©
        (Œª c ‚Üí ‚ü¶ Choice‚ÇÇ.Standard-Semantics (D ‚ü® l , r ‚ü©) c ‚üß‚ÇÅ c)
      ‚âÖ[]‚ü® VLChoice‚ÇÇ.map-compile-preserves t (D ‚ü® l , r ‚ü©) stable ‚ü©
        (Œª c ‚Üí ‚ü¶ Choice‚ÇÇ.Standard-Semantics (map‚ÇÇ compile (D ‚ü® l , r ‚ü©)) (fnoc c) ‚üß‚ÇÇ c)
      ‚âÖ[]‚ü®‚ü©
        (Œª c ‚Üí ‚ü¶ Choice‚ÇÇ.Standard-Semantics (D ‚ü® compile l , compile r ‚ü©) (fnoc c) ‚üß‚ÇÇ c)
        -- TODO: Figure out why we need only proj‚ÇÇ and not also proj‚ÇÅ in this proof.
      ‚âêÀò[ c ]‚ü® Eq.cong (Œª x ‚Üí ‚ü¶ x ‚üß‚ÇÇ c) (proj‚ÇÇ (convert-preserves D (compile l) (compile r) conv vnoc) c) ‚ü©
        (Œª c ‚Üí ‚ü¶ Choice‚Çô.Standard-Semantics (convert (D ‚ü® compile l , compile r ‚ü©)) c ‚üß‚ÇÇ c)
      ‚âÖ[]‚ü®‚ü©
        (Œª c ‚Üí ‚ü¶ Choice‚Çô.Standard-Semantics (convert (map‚ÇÇ compile (D ‚ü® l , r ‚ü©))) c ‚üß‚ÇÇ c)
      ‚âÖ[]‚ü®‚ü©
        Œì‚ÇÇ ‚ä¢‚ü¶ convert (map‚ÇÇ compile (D ‚ü® l , r ‚ü©)) ‚üß‚ÇÇ
      ‚âÖ[]‚ü®‚ü©
        Œì‚ÇÇ ‚ä¢‚ü¶ convert-vl (D ‚ü® l , r ‚ü©) ‚üß‚ÇÇ
      ‚âÖ[]-‚àé
