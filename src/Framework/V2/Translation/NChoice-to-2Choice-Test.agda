{-# OPTIONS --allow-unsolved-metas #-}
{-# OPTIONS --sized-types #-}

open import Framework.V2.Definitions
module Framework.V2.Translation.NChoice-to-2Choice-Test (F : ùîΩ) where

open import Data.Bool using (Bool; true; false; if_then_else_)
open import Data.Nat using (‚Ñï; zero; suc; _‚âü_; _‚â°·µá_; _‚â§_; z‚â§n; s‚â§s; _<_; _‚à∏_)
open import Data.List using (List; _‚à∑_; []; map)
open import Data.List.NonEmpty using (List‚Å∫; _‚à∑_; length; toList) renaming (map to map‚Å∫)
open import Data.Product using (proj‚ÇÅ; proj‚ÇÇ) renaming (_,_ to _and_)
open import Level using (_‚äî_)

open import Framework.V2.Compiler using (ConstructCompiler)

open import Framework.V2.Constructs.Choices as Chc
open Chc.Choice‚ÇÇ using (_‚ü®_,_‚ü©) renaming (Syntax to 2Choice; Standard-Semantics to ‚ü¶_‚üß‚ÇÇ; Config to Config‚ÇÇ)
open Chc.Choice‚Çô using (_‚ü®_‚ü©) renaming (Syntax to NChoice; Standard-Semantics to ‚ü¶_‚üß‚Çô; Config to Config‚Çô)
open Chc.VLChoice‚ÇÇ using () renaming (Construct to C‚ÇÇ)
open Chc.VLChoice‚Çô using () renaming (Construct to C‚Çô)

open import Framework.V2.Translation.NChoice-to-2Choice {Q = F} as BLUB
module Trans = BLUB.Translate ‚Ñï
open Trans
open IndexedDimension

-- example : ‚àÄ {D : F} ‚Üí D ‚ü® 1 , 2 ‚à∑ [] ‚ü©‚áù (D ‚àô 0) ‚ü® val 1 , chc ((D ‚àô 1) ‚ü® val 2 , val 2 ‚ü©) ‚ü©
-- example = step base

-- example' : ‚àÄ {D : F}
--   ‚Üí D ‚ü® 1 , 2 ‚à∑ 3 ‚à∑ [] ‚ü©‚áù (D ‚àô 0) ‚ü® val 1 , chc ((D ‚àô 1) ‚ü® val 2 , chc ((D ‚àô 2) ‚ü® val 3 , val 3 ‚ü©) ‚ü©) ‚ü©
-- example' = step (step base)

-- module Pres = Trans.Preservation
-- open Pres

-- open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_; _‚âó_; refl)
-- import Data.IndexedSet
-- module ISN = Data.IndexedSet (Eq.setoid ‚Ñï)
-- open ISN using (_‚àà_at_; _‚äÜ[_]_; _‚âÖ[_][_]_)

-- Conf : ‚àÄ {‚Ñì} (Q : Set ‚Ñì) ‚Üí Set ‚Ñì
-- Conf Q = Config‚Çô Q ‚Üí Config‚ÇÇ (IndexedDimension Q)

-- Fnoc : ‚àÄ {‚Ñì‚ÇÅ ‚Ñì‚ÇÇ} (Q : Set ‚Ñì‚ÇÅ) (A : Set ‚Ñì‚ÇÇ) ‚Üí Set (‚Ñì‚ÇÅ ‚äî ‚Ñì‚ÇÇ)
-- Fnoc Q A = NChoice Q A ‚Üí Config‚ÇÇ (IndexedDimension Q) ‚Üí Config‚Çô Q

-- un-conf : ‚àÄ {‚Ñì} {Q : Set ‚Ñì} ‚Üí Conf Q
-- un-conf c‚Çô (D ‚àô i) = true

-- un-fnoc : ‚àÄ {‚Ñì‚ÇÅ ‚Ñì‚ÇÇ} {Q : Set ‚Ñì‚ÇÅ} {A : Set ‚Ñì‚ÇÇ} ‚Üí Fnoc Q A
-- un-fnoc _ c‚ÇÇ D = 0

-- un : ‚àÄ {D : F} ‚Üí Preserved (D ‚ü® 1 ‚à∑ [] ‚ü©) un-conf (un-fnoc (D ‚ü® 1 ‚à∑ [] ‚ü©))
-- proj‚ÇÅ (un {D}) c with c D in eq
-- ... | zero = refl
-- ... | suc x = refl
-- proj‚ÇÇ (un {D}) c with c (D ‚àô 0) in eq
-- ... | false = refl
-- ... | true = refl

-- bi-conf : ‚àÄ {‚Ñì} {Q : Set ‚Ñì} ‚Üí Conf Q
-- bi-conf c‚Çô (D ‚àô i) with c‚Çô D
-- ... | zero = true
-- ... | suc x = false

-- bi-fnoc : ‚àÄ {‚Ñì‚ÇÅ ‚Ñì‚ÇÇ} {Q : Set ‚Ñì‚ÇÅ} {A : Set ‚Ñì‚ÇÇ} ‚Üí Fnoc Q A
-- bi-fnoc _ c‚ÇÇ D with c‚ÇÇ (D ‚àô 0)
-- ... | false = 1
-- ... | true = 0

-- bi : ‚àÄ {D : F} ‚Üí Preserved (D ‚ü® 1 ‚à∑ 2 ‚à∑ [] ‚ü©) bi-conf (bi-fnoc (D ‚ü® 1 ‚à∑ 2 ‚à∑ [] ‚ü©))
-- proj‚ÇÅ (bi {D}) c with c D
-- ... | zero = refl
-- ... | suc x with bi-conf c (D ‚àô 1)
-- ...         | false = refl
-- ...         | true  = refl
-- proj‚ÇÇ (bi {D}) c with c (D ‚àô 0)
-- ... | true = refl
-- ... | false with c (D ‚àô 1)
-- ...         | false = refl
-- ...         | true  = refl

-- open import Relation.Nullary.Negation using (¬¨_)
-- open import Relation.Nullary.Reflects using (of‚Åø; of ∏)
-- open import Relation.Nullary.Decidable using (_because_; does)

-- tri-conf : ‚àÄ {‚Ñì} {Q : Set ‚Ñì} ‚Üí Conf Q
-- tri-conf c‚Çô (D ‚àô i) = c‚Çô D ‚â°·µá i

-- -- correct : ‚àÄ (c : 2Config) (i : ‚Ñï)
-- --   ‚Üí c (D ‚àô i) ‚â° true
-- --   ‚Üí (‚àÄ (j : ‚Ñï) ‚Üí j < i ‚Üí c (D ‚àô j) ‚â° false)
-- --   ‚Üí (fnoc c) D ‚â° i
-- tri-fnoc-find-true : ‚àÄ {‚Ñì} {Q : Set ‚Ñì} ‚Üí Config‚ÇÇ (IndexedDimension Q) ‚Üí Q ‚Üí (cur : ‚Ñï) ‚Üí (max : ‚Ñï) ‚Üí ‚Ñï
-- tri-fnoc-find-true c‚ÇÇ D zero max = max
-- tri-fnoc-find-true c‚ÇÇ D (suc cur) max =
--   let i = max ‚à∏ suc cur in
--   if c‚ÇÇ (D ‚àô i)
--   then i
--   else tri-fnoc-find-true c‚ÇÇ D cur max

-- -- tri-fnoc-find-true-nice : ‚àÄ {‚Ñì} {Q : Set ‚Ñì} {c‚ÇÇ : Config‚ÇÇ (IndexedDimension Q)} {D : Q}
-- --   ‚Üí (cur : ‚Ñï) ‚Üí (max : ‚Ñï)
-- --   ‚Üí c (max ‚à∏ cur) ‚â° true
-- -- tri-fnoc-find-true c‚ÇÇ D zero max = max

-- tri-fnoc : ‚àÄ {‚Ñì‚ÇÅ ‚Ñì‚ÇÇ} {Q : Set ‚Ñì‚ÇÅ} {A : Set ‚Ñì‚ÇÇ} ‚Üí Fnoc Q A
-- tri-fnoc (_ ‚ü® es ‚ü©) c‚ÇÇ D = tri-fnoc-find-true c‚ÇÇ D (length es) (length es)

-- open ConfSpec
-- open FnocSpec
-- open Eq.‚â°-Reasoning

-- ‚â°·µá-refl : ‚àÄ (x : ‚Ñï) ‚Üí (x ‚â°·µá x) ‚â° true
-- ‚â°·µá-refl zero = refl
-- ‚â°·µá-refl (suc x) = ‚â°·µá-refl x

-- tri-conf-nice : ‚àÄ (D : F) ‚Üí ConfSpec D tri-conf
-- select-n (tri-conf-nice D) c refl =
--   begin
--     tri-conf c (D ‚àô c D)
--   ‚â°‚ü®‚ü©
--     c D ‚â°·µá c D
--   ‚â°‚ü® ‚â°·µá-refl (c D) ‚ü©
--     true
--   ‚àé
-- deselect-<n (tri-conf-nice D) c {i} x with c D in eq
-- deselect-<n (tri-conf-nice D) c {i} (s‚â§s x) | suc y =
--   begin
--     suc y ‚â°·µá i
--   ‚â°‚ü® nono x ‚ü©
--     false
--   ‚àé
--   where
--     nono : ‚àÄ {m n} ‚Üí m ‚â§ n ‚Üí (suc n ‚â°·µá m) ‚â° false
--     nono z‚â§n = refl
--     nono (s‚â§s x) = nono x

-- open import Data.Nat.Properties using (‚â§-refl; n‚à∏n‚â°0) --; m‚à∏n‚â§m; m‚à∏n‚â¢0‚áín<m; 0‚à∏n‚â°0; n‚à∏n‚â°0; m‚â§n‚áím‚à∏n‚â°0)
-- tri-fnoc-nice : ‚àÄ {‚Ñì‚ÇÇ} {A : Set ‚Ñì‚ÇÇ} ‚Üí (D : F) (es : List‚Å∫ A) ‚Üí FnocSpec D (tri-fnoc (D ‚ü® es ‚ü©))
-- correct (tri-fnoc-nice D es) c‚ÇÇ zero    cDi‚â°true <-false rewrite n‚à∏n‚â°0 (length es) | cDi‚â°true = refl
-- correct (tri-fnoc-nice D es) c‚ÇÇ (suc i) cDi‚â°true <-false rewrite n‚à∏n‚â°0 (length es) = {!!}

-- tri : ‚àÄ {D : F} ‚Üí Preserved (D ‚ü® 1 ‚à∑ 2 ‚à∑ 3 ‚à∑ [] ‚ü©) tri-conf (tri-fnoc (D ‚ü® 1 ‚à∑ 2 ‚à∑ 3 ‚à∑ [] ‚ü©))
-- proj‚ÇÅ (tri {D}) c with tri-conf c (D ‚àô 0)
-- ... | true = {!!} -- is true
-- ... | false with tri-conf c (D ‚àô 1)
-- ...         | true = {!!} -- is true
-- ...         | false with tri-conf c (D ‚àô 2)
-- ...                 | true = {!!} -- true
-- ...                 | false = {!!} -- true
-- proj‚ÇÇ (tri {D}) c = {!!}
