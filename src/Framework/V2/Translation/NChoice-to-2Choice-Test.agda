{-# OPTIONS --allow-unsolved-metas #-}
{-# OPTIONS --sized-types #-}

open import Framework.V2.Definitions
module Framework.V2.Translation.NChoice-to-2Choice-Test (F : ùîΩ) where

open import Data.Bool using (Bool; true; false)
open import Data.Nat using (‚Ñï; zero; suc)
open import Data.List using (List; _‚à∑_; []; map)
open import Data.List.NonEmpty using (List‚Å∫; _‚à∑_)
open import Data.Product using (proj‚ÇÅ; proj‚ÇÇ) renaming (_,_ to _and_)
open import Framework.V2.Compiler using (ConstructCompiler)
open import Framework.V2.Constructs.Choices as Chc
open Chc.Choice‚ÇÇ using (_‚ü®_,_‚ü©) renaming (Syntax to 2Choice; Standard-Semantics to ‚ü¶_‚üß‚ÇÇ; Config to Config‚ÇÇ)
open Chc.Choice‚Çô using (_‚ü®_‚ü©) renaming (Syntax to NChoice; Standard-Semantics to ‚ü¶_‚üß‚Çô; Config to Config‚Çô)
open Chc.VLChoice‚ÇÇ using () renaming (Construct to C‚ÇÇ)
open Chc.VLChoice‚Çô using () renaming (Construct to C‚Çô)

open import Framework.V2.Translation.NChoice-to-2Choice {Q = F} as BLUB
module Trans = BLUB.Translate ‚Ñï
open Trans
open IndexedDimension

example : ‚àÄ {D : F} ‚Üí D ‚ü® 1 , 2 ‚à∑ [] ‚ü©‚áù (D ‚àô 0) ‚ü® val 1 , chc ((D ‚àô 1) ‚ü® val 2 , val 2 ‚ü©) ‚ü©
example = step base

example' : ‚àÄ {D : F}
  ‚Üí D ‚ü® 1 , 2 ‚à∑ 3 ‚à∑ [] ‚ü©‚áù (D ‚àô 0) ‚ü® val 1 , chc ((D ‚àô 1) ‚ü® val 2 , chc ((D ‚àô 2) ‚ü® val 3 , val 3 ‚ü©) ‚ü©) ‚ü©
example' = step (step base)

module Pres = Trans.Preservation
open Pres

open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_; _‚âó_; refl)
import Data.IndexedSet
module ISN = Data.IndexedSet (Eq.setoid ‚Ñï)
open ISN using (_‚àà_at_; _‚äÜ[_]_; _‚âÖ[_][_]_)

Conf : ‚àÄ {‚Ñì} (Q : Set ‚Ñì) ‚Üí Set ‚Ñì
Conf Q = Config‚Çô Q ‚Üí Config‚ÇÇ (IndexedDimension Q)

Fnoc : ‚àÄ {‚Ñì} (Q : Set ‚Ñì) ‚Üí Set ‚Ñì
Fnoc Q = Config‚ÇÇ (IndexedDimension Q) ‚Üí Config‚Çô Q

un-conf : ‚àÄ {‚Ñì} {Q : Set ‚Ñì} ‚Üí Conf Q
un-conf c‚Çô (D ‚àô i) = true

un-fnoc : ‚àÄ {‚Ñì} {Q : Set ‚Ñì} ‚Üí Fnoc Q
un-fnoc c‚ÇÇ D = 0

un : ‚àÄ {D : F} ‚Üí Preserved (D ‚ü® 1 ‚à∑ [] ‚ü©) un-conf un-fnoc
proj‚ÇÅ (un {D}) c with c D in eq
... | zero = refl
... | suc x = refl
proj‚ÇÇ (un {D}) c with c (D ‚àô 0) in eq
... | false = refl
... | true = refl

bi-conf : ‚àÄ {‚Ñì} {Q : Set ‚Ñì} ‚Üí Conf Q
bi-conf c‚Çô (D ‚àô i) with c‚Çô D
... | zero = true
... | suc x = false

bi-fnoc : ‚àÄ {‚Ñì} {Q : Set ‚Ñì} ‚Üí Fnoc Q
bi-fnoc c‚ÇÇ D with c‚ÇÇ (D ‚àô 0)
... | false = 1
... | true = 0

bi : ‚àÄ {D : F} ‚Üí Preserved (D ‚ü® 1 ‚à∑ 2 ‚à∑ [] ‚ü©) bi-conf bi-fnoc
proj‚ÇÅ (bi {D}) c with c D
... | zero = refl
... | suc x with bi-conf c (D ‚àô 1)
...         | false = refl
...         | true  = refl
proj‚ÇÇ (bi {D}) c with c (D ‚àô 0)
... | true = refl
... | false with c (D ‚àô 1)
...         | false = refl
...         | true  = refl
