module Framework.V2.Translation.2Choice-to-NChoice where

open import Data.Bool using (Bool; false; true)
open import Data.List using (List; _‚à∑_; []; map)
open import Data.List.NonEmpty using (List‚Å∫; _‚à∑_)
open import Data.Nat using (‚Ñï; suc; zero)
open import Data.Product using (_√ó_; Œ£-syntax; proj‚ÇÅ; proj‚ÇÇ) renaming (_,_ to _and_)

open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_; refl)

import Data.IndexedSet

open import Framework.V2.Definitions
open import Framework.V2.Variants using (VariantSetoid)
open import Framework.V2.V1Compat
open import Framework.V2.Constructs.Choices as Chc
open Chc.Choice‚ÇÇ using (_‚ü®_,_‚ü©)
open Chc.Choice‚Çô using (_‚ü®_‚ü©)

private
  variable
    A : ùî∏

  BinaryChoice = VLChoice‚ÇÇ.Syntax
  BinaryChoice-Semantics = VLChoice‚ÇÇ.Semantics
  Choice = VLChoice‚Çô.Syntax
  Choice-Semantics = VLChoice‚Çô.Semantics

module 2‚ÜíN-Choice {F : ùîΩ} where
  {-|
  ConfSpec and FnocSpec define the requirements we have on translated configurations
  to prove preservation of the conversion from binary to n-ary choices.
  -}
  record ConfSpec (f : F) (conf : Config F Bool ‚Üí Config F ‚Ñï) : Set where
    field
      false‚Üí1 : ‚àÄ (c : Config F Bool)
        ‚Üí c f ‚â° false
        ‚Üí (conf c) f ‚â° 1
      true‚Üí0 : ‚àÄ (c : Config F Bool)
        ‚Üí c f ‚â° true
        ‚Üí (conf c) f ‚â° 0
  open ConfSpec

  record FnocSpec (f : F) (fnoc : Config F ‚Ñï ‚Üí Config F Bool) : Set where
    field
      suc‚Üífalse : ‚àÄ {n} (c : Config F ‚Ñï)
        ‚Üí c f ‚â° suc n
        ‚Üí (fnoc c) f ‚â° false
      zero‚Üítrue : ‚àÄ (c : Config F ‚Ñï)
        ‚Üí c f ‚â° zero
        ‚Üí (fnoc c) f ‚â° true
  open FnocSpec

  default-conf : Config F Bool ‚Üí Config F ‚Ñï
  (default-conf cb) f with cb f
  ... | false = 1
  ... | true  = 0

  default-fnoc : Config F ‚Ñï ‚Üí Config F Bool
  (default-fnoc cn) f with cn f
  ... | zero    = true
  ... | (suc _) = false

  default-conf-satisfies-spec : ‚àÄ (f : F) ‚Üí ConfSpec f default-conf
  false‚Üí1 (default-conf-satisfies-spec f) c cf‚â°false rewrite cf‚â°false = refl
  true‚Üí0  (default-conf-satisfies-spec f) c cf‚â°true  rewrite cf‚â°true  = refl

  default-fnoc-satisfies-spec : ‚àÄ (f : F) ‚Üí FnocSpec f default-fnoc
  suc‚Üífalse (default-fnoc-satisfies-spec f) c cf‚â°suc  rewrite cf‚â°suc  = refl
  zero‚Üítrue (default-fnoc-satisfies-spec f) c cf‚â°zero rewrite cf‚â°zero = refl

  module Translate {V}
    (VL‚ÇÅ : VariabilityLanguage V F Bool)
    (VL‚ÇÇ : VariabilityLanguage V F ‚Ñï)
    (t : expression-set VL‚ÇÅ A ‚Üí expression-set VL‚ÇÇ A)
    where
    private
      L‚ÇÅ   = expression-set VL‚ÇÅ
      L‚ÇÇ   = expression-set VL‚ÇÇ
      ‚ü¶_‚üß‚ÇÅ = semantics VL‚ÇÅ {A}
      ‚ü¶_‚üß‚ÇÇ = semantics VL‚ÇÇ {A}

    convert : BinaryChoice F L‚ÇÅ A ‚Üí Choice F L‚ÇÇ A
    convert (D ‚ü® l , r ‚ü©) = D ‚ü® t l ‚à∑ t r ‚à∑ [] ‚ü©

    module Preservation
      (confi : Config F Bool ‚Üí Config F ‚Ñï)
      (fnoci : Config F ‚Ñï ‚Üí Config F Bool)
      (D : F)
      (l r : expression-set VL‚ÇÅ A)
      where
      open Data.IndexedSet (VariantSetoid V A) using (‚äÜ-by-index-translation) renaming (_‚âÖ_ to _‚âã_)

      private
        2Config = Config F Bool
        NConfig = Config F ‚Ñï

      preserves-conf :
          ConfSpec D confi
        ‚Üí Conf-Preserves VL‚ÇÅ VL‚ÇÇ l (t l) confi
        ‚Üí Conf-Preserves VL‚ÇÅ VL‚ÇÇ r (t r) confi
        ‚Üí (c : 2Config)
        ‚Üí   BinaryChoice-Semantics VL‚ÇÅ (D ‚ü® l , r ‚ü©) c
          ‚â° Choice-Semantics       VL‚ÇÇ (convert (D ‚ü® l , r ‚ü©)) (confi c)
      preserves-conf conv t-l t-r c with c D in eq
      ... | false rewrite false‚Üí1 conv c eq = t-r c
      ... | true  rewrite true‚Üí0  conv c eq = t-l c

      preserves-fnoc :
          FnocSpec D fnoci
        ‚Üí Fnoc-Preserves VL‚ÇÅ VL‚ÇÇ l (t l) fnoci
        ‚Üí Fnoc-Preserves VL‚ÇÅ VL‚ÇÇ r (t r) fnoci
        ‚Üí (c : NConfig)
        ‚Üí   Choice-Semantics       VL‚ÇÇ (convert (D ‚ü® l , r ‚ü©)) c
          ‚â° BinaryChoice-Semantics VL‚ÇÅ (D ‚ü® l , r ‚ü©) (fnoci c)
      preserves-fnoc vnoc t-l t-r c with c D in eq
      ... | zero  rewrite zero‚Üítrue vnoc c eq = t-l c
      ... | suc _ rewrite suc‚Üífalse vnoc c eq = t-r c

      convert-preserves :
        ‚àÄ (conv : ConfSpec D confi)
        ‚Üí (vnoc : FnocSpec D fnoci)
        -- boilerplaty induction hypothesis
        ‚Üí Conf-Preserves VL‚ÇÅ VL‚ÇÇ l (t l) confi
        ‚Üí Fnoc-Preserves VL‚ÇÅ VL‚ÇÇ l (t l) fnoci
        ‚Üí Conf-Preserves VL‚ÇÅ VL‚ÇÇ r (t r) confi
        ‚Üí Fnoc-Preserves VL‚ÇÅ VL‚ÇÇ r (t r) fnoci
        ‚Üí   BinaryChoice-Semantics VL‚ÇÅ (D ‚ü® l , r ‚ü©)
          ‚âã Choice-Semantics       VL‚ÇÇ (convert (D ‚ü® l , r ‚ü©))
      convert-preserves conv vnoc conf-l fnoc-l conf-r fnoc-r =
            ‚äÜ-by-index-translation confi (preserves-conf conv conf-l conf-r)
        and ‚äÜ-by-index-translation fnoci (preserves-fnoc vnoc fnoc-l fnoc-r)
