{-# OPTIONS --allow-unsolved-metas #-}
{-# OPTIONS --sized-types #-}
module Framework.V2.Translation.NChoice-to-2Choice {‚Ñì‚ÇÅ} {Q : Set ‚Ñì‚ÇÅ} where

open import Data.Bool using (Bool; false; true; if_then_else_)
open import Data.List using (List; _‚à∑_; []; map; length)
open import Data.List.NonEmpty using (List‚Å∫; _‚à∑_)
open import Data.Nat using (‚Ñï; suc; zero; _+_; _‚à∏_)
open import Data.Nat.Show renaming (show to show-‚Ñï)
open import Data.Product using (‚àÉ-syntax; proj‚ÇÅ; proj‚ÇÇ) renaming (_,_ to _and_)

open import Size using (Size; ‚Üë_; ‚àû)

open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_; _‚âó_; refl)

import Data.IndexedSet
open import Util.List using (find-or-last)

open import Relation.Binary using (Setoid; IsEquivalence)

open import Framework.V2.Definitions using (ùîΩ)
open import Framework.V2.Compiler using (ConstructCompiler)
open import Framework.V2.Constructs.Choices as Chc
open Chc.Choice‚ÇÇ using (_‚ü®_,_‚ü©) renaming (Syntax to 2Choice; Standard-Semantics to ‚ü¶_‚üß‚ÇÇ; Config to Config‚ÇÇ; show to show-2choice)
open Chc.Choice‚Çô using (_‚ü®_‚ü©) renaming (Syntax to NChoice; Standard-Semantics to ‚ü¶_‚üß‚Çô; Config to Config‚Çô)
open Chc.VLChoice‚ÇÇ using () renaming (Construct to C‚ÇÇ)
open Chc.VLChoice‚Çô using () renaming (Construct to C‚Çô)

open import Data.String using (String; _++_)
record IndexedDimension {‚Ñì} (Q : Set ‚Ñì) : Set ‚Ñì where
  constructor _‚àô_
  field
    dim : Q
    index : ‚Ñï

show-indexed-dimension : (Q ‚Üí String) ‚Üí IndexedDimension Q ‚Üí String
show-indexed-dimension show-q (D ‚àô i) = show-q D ++ "‚àô" ++ show-‚Ñï i

private
  I = IndexedDimension Q
  NConfig = Config‚Çô Q
  2Config = Config‚ÇÇ I

open Data.Nat using (_<_; _‚â§_; s‚â§s; z‚â§n)
record ConfSpec (D : Q) (conf : NConfig ‚Üí 2Config) : Set ‚Ñì‚ÇÅ where
  field
    {-|
    A translated, binary configuration (conf c)
    has to pick the same alternative as the original configuration c.
    This alternative is nested in the binary term.
    The nesting depth is exactly equal to the alternative index:
    - the first alternative (0) is the left alternative of the root choice at level 0
    - the second alternative (1) is the left alternative of the choice (1) in the right alternative of the root choice 0
    - and so on.
    Hence the translated, binary configuration (conf c)
    has to pick the left alternative (true)
    in the choice at nesting level (c D).
    -}
    select-n : ‚àÄ (c : NConfig) {i : ‚Ñï}
      ‚Üí c D ‚â° i
      ‚Üí (conf c) (D ‚àô i) ‚â° true

    {-|
    All alternatives before the desired alternative must be deselected so
    that we go right until we find the correct alternative to pick.
    -}
    deselect-<n : ‚àÄ (c : NConfig) {i : ‚Ñï}
      ‚Üí i < c D
      ‚Üí (conf c) (D ‚àô i) ‚â° false

    {-|
    There is no third requirement because we do not care
    for the values of the translated configuration for dimensions
    deeper than (c D).
    These alternatives will never be reached upon configuration.
    -}
open ConfSpec

record FnocSpec (D : Q) (fnoc : 2Config ‚Üí NConfig) : Set ‚Ñì‚ÇÅ where
  field
    {-|
    The nary config must chose index i iff
    - the alternative at nesting depth i is chosen in the binary expression
    - and no other alternative at a higher nesting depth was chosen.
    -}
    correct : ‚àÄ (c : 2Config) (i : ‚Ñï)
      ‚Üí c (D ‚àô i) ‚â° true
      ‚Üí (‚àÄ (j : ‚Ñï) ‚Üí j < i ‚Üí c (D ‚àô j) ‚â° false)
      ‚Üí (fnoc c) D ‚â° i
open FnocSpec

-- module Translate {‚Ñì‚ÇÇ} (S : Setoid ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ) where
module Translate (Carrier : Set ‚Ñì‚ÇÅ) where
  -- open Setoid S renaming (refl to ‚âà-refl)
  _‚âà_ = _‚â°_
  open Eq.‚â°-Reasoning

  -- open import Data.Vec using (Vec; []; _‚à∑_; fromList)

  {-| A dialect of binary choice calculus in which all data is in leaves. -}
  -- TODO: Write eliminator for NestedChoice given a variability language with choices.
  --       Then prove that the eliminator preserves semantics.
  data NestedChoice : Size ‚Üí Set ‚Ñì‚ÇÅ where
    val : ‚àÄ {‚Öà} ‚Üí Carrier ‚Üí NestedChoice ‚Öà -- \ii
    chc : ‚àÄ {‚Öà} ‚Üí 2Choice I (NestedChoice ‚Öà) ‚Üí NestedChoice (‚Üë ‚Öà)

  show-nested-choice : ‚àÄ {‚Öà} ‚Üí (Q ‚Üí String) ‚Üí (Carrier ‚Üí String) ‚Üí NestedChoice ‚Öà ‚Üí String
  show-nested-choice show-q show-carrier (val v) = show-carrier v
  show-nested-choice show-q show-carrier (chc c) =
    show-2choice
      (show-indexed-dimension show-q)
      (show-nested-choice show-q show-carrier)
      c

  ‚ü¶_‚üß·µ£ : ‚àÄ {‚Öà} ‚Üí NestedChoice ‚Öà ‚Üí 2Config ‚Üí Carrier
  ‚ü¶ val v ‚üß·µ£ _ = v
  ‚ü¶ chc Œ≥ ‚üß·µ£ c = ‚ü¶ ‚ü¶ Œ≥ ‚üß‚ÇÇ c ‚üß·µ£ c

  inc-dim : ‚àÄ {‚Öà} ‚Üí NestedChoice ‚Öà ‚Üí NestedChoice ‚Öà
  inc-dim (val v) = val v
  -- TODO: Choices are always on the right-hand side, so it might be fine to simplify this function
  -- by applying inc-dim only to the right argument here.
  inc-dim (chc ((D ‚àô i) ‚ü® l , r ‚ü©)) = chc ((D ‚àô suc i) ‚ü® inc-dim l , inc-dim r ‚ü©)

  record Intermediate : Set ‚Ñì‚ÇÅ where
    constructor _‚â´_‚ü®_,_‚ü©
    field
      skip : ‚Ñï
      name : Q
      head : Carrier
      tail : List Carrier

  ‚ü¶_‚üß : Intermediate ‚Üí NConfig ‚Üí Carrier
  ‚ü¶ skip ‚â´ D ‚ü® e , es ‚ü© ‚üß c = find-or-last (skip + c D) (e ‚à∑ es)

  -- TODO: Do we actually need the name of the choice here?
  data _‚ü®_,_‚ü©‚áù_ : Q ‚Üí Carrier ‚Üí List Carrier ‚Üí 2Choice I (NestedChoice ‚àû) ‚Üí Set ‚Ñì‚ÇÅ
  infix 3 _‚ü®_,_‚ü©‚áù_
  data _‚ü®_,_‚ü©‚áù_ where
    base : ‚àÄ {D : Q} {e : Carrier}
        ----------------------------------------
      ‚Üí D ‚ü® e , [] ‚ü©‚áù (D ‚àô 0) ‚ü® val e , val e ‚ü©

    step : ‚àÄ {D : Q} {e‚ÇÅ e‚ÇÇ : Carrier} {es : List Carrier} {l r : NestedChoice ‚àû}
      ‚Üí      D ‚ü® e‚ÇÇ , es ‚ü©‚áù (D ‚àô 0) ‚ü® l , r ‚ü©
        ---------------------------------------------------------------------------
      ‚Üí D ‚ü® e‚ÇÅ , e‚ÇÇ ‚à∑ es ‚ü©‚áù (D ‚àô 0) ‚ü® val e‚ÇÅ , inc-dim (chc ((D ‚àô 0) ‚ü® l , r ‚ü©)) ‚ü©
    {-
    Example execution trace
    step: D ‚ü® 1 , 2 , 3 , 4 ‚ü© ‚áù D0 ‚ü® 1 , D1 ‚ü® 2 , D2 ‚ü® 3 , D3 ‚ü® 4 , 4 ‚ü© ‚ü© ‚ü© ‚ü©
    step:     D ‚ü® 2 , 3 , 4 ‚ü© ‚áù          D0 ‚ü® 2 , D1 ‚ü® 3 , D2 ‚ü® 4 , 4 ‚ü© ‚ü© ‚ü©
    step:         D ‚ü® 3 , 4 ‚ü© ‚áù                   D0 ‚ü® 3 , D1 ‚ü® 4 , 4 ‚ü© ‚ü©
    base:             D ‚ü® 4 ‚ü© ‚áù                            D0 ‚ü® 4 , 4 ‚ü©
    -}

  dim-constant : ‚àÄ {D D'} {e es l r} {i}
    ‚Üí D ‚ü® e , es ‚ü©‚áù (D' ‚àô i) ‚ü® l , r ‚ü©
    ‚Üí D ‚â° D'
  dim-constant base = refl
  dim-constant (step _) = refl

  determinism-l : ‚àÄ {D e es} {D‚ÇÅ l‚ÇÅ r‚ÇÅ} {D‚ÇÇ l‚ÇÇ r‚ÇÇ}
    ‚Üí D ‚ü® e , es ‚ü©‚áù (D‚ÇÅ ‚àô 0) ‚ü® l‚ÇÅ , r‚ÇÅ ‚ü©
    ‚Üí D ‚ü® e , es ‚ü©‚áù (D‚ÇÇ ‚àô 0) ‚ü® l‚ÇÇ , r‚ÇÇ ‚ü©
    ‚Üí l‚ÇÅ ‚â° l‚ÇÇ
  determinism-l base base = refl
  determinism-l (step x) (step y) rewrite determinism-l x y = refl

  determinism-r : ‚àÄ {D e es} {D‚ÇÅ l‚ÇÅ r‚ÇÅ} {D‚ÇÇ l‚ÇÇ r‚ÇÇ}
    ‚Üí D ‚ü® e , es ‚ü©‚áù (D‚ÇÅ ‚àô 0) ‚ü® l‚ÇÅ , r‚ÇÅ ‚ü©
    ‚Üí D ‚ü® e , es ‚ü©‚áù (D‚ÇÇ ‚àô 0) ‚ü® l‚ÇÇ , r‚ÇÇ ‚ü©
    ‚Üí r‚ÇÅ ‚â° r‚ÇÇ
  determinism-r base base = refl
  determinism-r (step x) (step y) rewrite determinism-r x y | determinism-l x y = refl

  determinism : ‚àÄ {D e es} {x y : 2Choice I (NestedChoice ‚àû)}
    ‚Üí D ‚ü® e , es ‚ü©‚áù x
    ‚Üí D ‚ü® e , es ‚ü©‚áù y
    ‚Üí x ‚â° y
  determinism base base = refl
  determinism (step ‚áùx) (step ‚áùy) rewrite determinism-r ‚áùx ‚áùy | determinism-l ‚áùx ‚áùy = refl

  Total' : Q ‚Üí Carrier ‚Üí List Carrier ‚Üí Set ‚Ñì‚ÇÅ
  Total' D e es = ‚àÉ[ x ] (D ‚ü® e , es ‚ü©‚áù x)

  Total : NChoice Q Carrier ‚Üí Set ‚Ñì‚ÇÅ
  Total (D ‚ü® e ‚à∑ es ‚ü©) = Total' D e es

  -- Smart constructor for Total‚Çí that does not require naming the expression explicitly.
  return : ‚àÄ {D e es x}
    ‚Üí D ‚ü® e , es ‚ü©‚áù x
      ------------
    ‚Üí Total (D ‚ü® e ‚à∑ es ‚ü©)
  return {x = x} ‚áùx = x and ‚áùx

  total : ‚àÄ (D : Q) ‚Üí (e : Carrier) (es : List Carrier)
    ‚Üí Total' D e es
  total D e [] = return base
  total D e‚ÇÅ (e‚ÇÇ ‚à∑ es) with total D e‚ÇÇ es
  -- ... | ((.D ‚àô 0) ‚ü® .(val e‚ÇÇ) , .(val e‚ÇÇ) ‚ü©) and base = return (step base)
  -- ... | ((.D ‚àô 0) ‚ü® .(val e‚ÇÇ) , .(inc-dim (chc ((D ‚àô 0) ‚ü® _ , _ ‚ü©))) ‚ü©) and step ‚áùe = return (step (step ‚áùe))
  ... | (.D ‚àô 0) ‚ü® .(val e‚ÇÇ) , .(val e‚ÇÇ) ‚ü© and base
    = (D ‚àô 0) ‚ü® val e‚ÇÅ , chc ((D ‚àô 1) ‚ü® val e‚ÇÇ , val e‚ÇÇ ‚ü©) ‚ü© and step base
  ... | (.D ‚àô 0) ‚ü® .(val e‚ÇÇ) , r ‚ü© and step ‚áùe
    = (D ‚àô 0) ‚ü® val e‚ÇÅ , chc ((D ‚àô 1) ‚ü® val e‚ÇÇ , inc-dim r ‚ü©) ‚ü© and (step (step ‚áùe))


  convert : NChoice Q Carrier ‚Üí 2Choice I (NestedChoice ‚àû)
  convert (D ‚ü® e ‚à∑ es ‚ü©) = proj‚ÇÅ (total D e es)

  module ISS = Data.IndexedSet (Eq.setoid Carrier)
  -- module ISS = Data.IndexedSet S
  open ISS using (_‚àà_at_; _‚äÜ[_]_; _‚âÖ[_][_]_; ‚âê‚Üí‚âÖ[]; irrelevant-index-‚äÜ; irrelevant-index-‚âÖ)
  open ISS.‚âÖ[]-Reasoning
  Preserved : NChoice Q Carrier ‚Üí (NConfig ‚Üí 2Config) ‚Üí (2Config ‚Üí NConfig) ‚Üí Set ‚Ñì‚ÇÅ
  Preserved (D ‚ü® es ‚ü©) confi fnoci = ‚ü¶ D ‚ü® es ‚ü© ‚üß‚Çô ‚âÖ[ confi ][ fnoci ] ‚ü¶ chc (convert (D ‚ü® es ‚ü©)) ‚üß·µ£

  module Preservation
    (confi : NConfig ‚Üí 2Config)
    (fnoci : 2Config ‚Üí NConfig)
    where
    open Data.List using (length)
    open import Data.Product using () renaming (_,_ to _and_)
    open import Util.AuxProofs using (if-idemp; if-idemp')
    open Eq.‚â°-Reasoning

    -- open Data.Nat using (_+_)
    open import Data.Nat.Properties using (‚â§-refl) --; m‚à∏n‚â§m; m‚à∏n‚â¢0‚áín<m; 0‚à∏n‚â°0; n‚à∏n‚â°0; m‚â§n‚áím‚à∏n‚â°0)

    flub : ‚àÄ {n m}
      ‚Üí n ‚â° suc m
      ‚Üí m < n
    flub refl = s‚â§s ‚â§-refl

    blar : ‚àÄ {n m}
      ‚Üí n ‚â° suc m
      ‚Üí 0 < n
    blar refl = s‚â§s z‚â§n

    -- preservation-‚äÜ : ‚àÄ {D} {e‚ÇÅ e‚ÇÇ es} {l r}
    --   ‚Üí ConfSpec D confi
    --   ‚Üí D ‚ü® e‚ÇÅ , e‚ÇÇ ‚à∑ es ‚ü©‚áù (D ‚àô 0) ‚ü® val e‚ÇÅ , inc-dim (chc ((D ‚àô 0) ‚ü® l , r ‚ü©)) ‚ü©
    --   ‚Üí ‚ü¶ D ‚ü® e‚ÇÅ ‚à∑ e‚ÇÇ ‚à∑ es ‚ü© ‚üß‚Çô ‚äÜ[ confi ] ‚ü¶ chc ((D ‚àô 0) ‚ü® val e‚ÇÅ , inc-dim (chc ((D ‚àô 0) ‚ü® l , r ‚ü©)) ‚ü©) ‚üß·µ£
    -- preservation-‚äÜ conv x c = {!!}
    -- preservation-‚äÜ D e‚ÇÅ e‚ÇÇ es convi c with c D in cD‚â°x | total D e‚ÇÇ es
    -- ... | zero | .((D ‚àô 0) ‚ü® val e‚ÇÇ , val e‚ÇÇ ‚ü©) and base rewrite select-n convi c cD‚â°x = refl
    -- ... | zero | .((D ‚àô 0) ‚ü® val e‚ÇÇ , inc-dim (chc ((D ‚àô 0) ‚ü® _ , _ ‚ü©)) ‚ü©) and step snd rewrite select-n convi c cD‚â°x = refl
    -- ... | suc x | .((D ‚àô 0) ‚ü® val e‚ÇÇ , val e‚ÇÇ ‚ü©) and base rewrite deselect-<n convi c (blar cD‚â°x) =
    --   begin
    --     e‚ÇÇ
    --   ‚â°‚ü® {!!} ‚ü©
    --     ‚ü¶ ‚ü¶ (D ‚àô 1) ‚ü® val e‚ÇÇ , val e‚ÇÇ ‚ü© ‚üß‚ÇÇ (confi c) ‚üß·µ£ (confi c)
    --   ‚àé
    -- preservation-‚äÜ D e‚ÇÅ e‚ÇÇ (e‚ÇÉ ‚à∑ es) convi c
    --   | suc x | .(D ‚àô 0) ‚ü® .(val e‚ÇÇ) , chc (.(D ‚àô 1) ‚ü® l , r ‚ü© ) ‚ü© and step snd rewrite deselect-<n convi c (blar cD‚â°x) =
    --     begin
    --       find-or-last x (e‚ÇÇ ‚à∑ e‚ÇÉ ‚à∑ es)
    --     ‚â°‚ü® {!!} ‚ü©
    --       ‚ü¶ ‚ü¶ (D ‚àô 1) ‚ü® val e‚ÇÇ , chc ((D ‚àô 2) ‚ü® inc-dim l , inc-dim r ‚ü©) ‚ü© ‚üß‚ÇÇ (confi c) ‚üß·µ£ (confi c)
    --     ‚àé
    --     where
    --       ind = preserves snd

      -- begin
      --   e‚ÇÅ
      -- ‚â°‚ü® {!!} ‚ü©
      --   ‚ü¶ chc (convert e) ‚üß·µ£ (confi c)
      -- ‚â°‚ü®‚ü©
      --   ‚ü¶ chc (convert e) ‚üß·µ£ (confi c)
      -- ‚àé
    -- preservation-‚äÜ D _ _ [] c = ?
    --   Eq.cong
    --     (Œª eq ‚Üí ‚ü¶ eq ‚üß·µ£ (confi c))
    --     (Eq.sym
    --       (if-idemp (confi c (D ‚àô 0))))
    -- preservation-‚äÜ (l ‚à∑ r ‚à∑ rs) c = {!!}

    -- preservation-‚äá : ‚àÄ (es : List‚Å∫ Carrier)
    --   ‚Üí ‚ü¶ chc (convert (D ‚ü® es ‚ü©)) ‚üß·µ£ ‚äÜ[ fnoci ] ‚ü¶ D ‚ü® es ‚ü© ‚üß‚Çô
    -- preservation-‚äá (_ ‚à∑ []) c =
    --   Eq.cong
    --     (Œª eq ‚Üí ‚ü¶ eq ‚üß·µ£ c)
    --       (if-idemp (c (D ‚àô 0)))
    -- preservation-‚äá (l ‚à∑ r ‚à∑ rs) c = {!!}

    preservation : ‚àÄ {D} {e es} {l r}
      ‚Üí ConfSpec D confi
      ‚Üí FnocSpec D fnoci
      ‚Üí D ‚ü® e , es ‚ü©‚áù (D ‚àô 0) ‚ü® l , r ‚ü©
      ‚Üí ‚ü¶ D ‚ü® e ‚à∑ es ‚ü© ‚üß‚Çô ‚âÖ[ confi ][ fnoci ] ‚ü¶ chc ((D ‚àô 0) ‚ü® l , r ‚ü©) ‚üß·µ£
    preservation _ _ (base {D} {e}) =
      -- no matter how we configure our expression (or its translation),
      -- the result will always be e. this means, configurations are
      -- irrelevant here. hence, any translations of configurations may
      -- be used. hence, config and fnoci are fine.
      irrelevant-index-‚âÖ e l-const r-const confi fnoci
      where
        l-const : ‚àÄ c ‚Üí ‚ü¶ D ‚ü® e ‚à∑ [] ‚ü© ‚üß‚Çô c ‚âà e
        l-const c = refl --‚âà-refl

        r-const : ‚àÄ c ‚Üí ‚ü¶ chc (convert (D ‚ü® e ‚à∑ [] ‚ü©)) ‚üß·µ£ c ‚âà e
        r-const c = Eq.cong (Œª eq ‚Üí ‚ü¶ eq ‚üß·µ£ c) (if-idemp (c (D ‚àô 0)))
    proj‚ÇÅ (preservation conv vnoc (step {D} {e‚ÇÅ} {e‚ÇÇ} {es} {l} {r} ‚áùx)) c with c D in eq
    ... | zero rewrite select-n conv c eq = refl
    ... | suc x rewrite deselect-<n conv c (blar eq) =
      begin
      -- TODO: The following can never be true. So somewhere, we have a wrong assumption!
      --       We have to find it.
      --       Is it within deselect-<n?
      --       Or is the translation not preserving at all?
      --       Or are we applying the induction hypothesis wrongly?
        find-or-last x (e‚ÇÇ ‚à∑ es)
      -- ‚â°‚ü®‚ü© ‚ü¶ D ‚ü® e‚ÇÇ ‚à∑ es ‚ü© ‚üß‚Çô iff c D ‚â° x
      ‚â°‚ü® {!!} ‚ü©
        find-or-last (suc x) (e‚ÇÇ ‚à∑ es)
      ‚â°Àò‚ü® Eq.cong (Œª a ‚Üí find-or-last a (e‚ÇÇ ‚à∑ es)) eq ‚ü©
        find-or-last (c D) (e‚ÇÇ ‚à∑ es)
      ‚â°‚ü®‚ü©
        ‚ü¶ D ‚ü® e‚ÇÇ ‚à∑ es ‚ü© ‚üß‚Çô c
      ‚â°‚ü® hypot ‚ü©
        ‚ü¶ ‚ü¶ (D ‚àô 0) ‚ü® l , r ‚ü© ‚üß‚ÇÇ (confi c) ‚üß·µ£ (confi c)
      ‚â°‚ü® {!!} ‚ü©
        ‚ü¶ ‚ü¶ (D ‚àô 1) ‚ü® inc-dim l , inc-dim r ‚ü© ‚üß‚ÇÇ (confi c) ‚üß·µ£ (confi c)
      ‚àé
      where
        hypot : ‚ü¶ D ‚ü® e‚ÇÇ ‚à∑ es ‚ü© ‚üß‚Çô c ‚â° ‚ü¶ ‚ü¶ (D ‚àô 0) ‚ü® l , r ‚ü© ‚üß‚ÇÇ (confi c) ‚üß·µ£ (confi c)
        hypot = proj‚ÇÅ (preservation conv vnoc ‚áùx) c
    proj‚ÇÇ (preservation conv vnoc (step {D} {e‚ÇÅ} {e‚ÇÇ} {es} {l} {r} ‚áùx)) c = {!!}
      -- ‚âÖ[]-begin
      --   ‚ü¶ D ‚ü® e‚ÇÅ ‚à∑ e‚ÇÇ ‚à∑ es ‚ü© ‚üß‚Çô
      -- ‚âÖ[]‚ü® {!!} ‚ü©
      --   (Œª c ‚Üí ‚ü¶ ‚ü¶ (D ‚àô 0) ‚ü® val e‚ÇÅ , chc ((D ‚àô 1) ‚ü® inc-dim l , inc-dim r ‚ü©) ‚ü© ‚üß‚ÇÇ c ‚üß·µ£ c)
      -- ‚âÖ[]-‚àé

    -- preservation _ (D ‚ü® e ‚à∑ [] ‚ü©) =
    -- preservation (D ‚ü® e‚ÇÅ ‚à∑ e‚ÇÇ ‚à∑ es ‚ü©) = ? --preservation-‚äÜ D e‚ÇÅ e‚ÇÇ es {!!} and {!!}

    -- -- convert-preserves-l : ‚àÄ (e : L‚ÇÅ A) (es : List (L‚ÇÅ A)) (c : NConfig)
    -- --   ‚Üí ConfSpec D confi
    -- --   -- ‚Üí ConfSpec D (length es) confi
    -- --   ‚Üí All‚Å∫ (Œª e ‚Üí ‚ü¶ e ‚üß‚ÇÅ c ‚â° ‚ü¶ t e ‚üß‚ÇÇ (confi c)) (e ‚à∑ es)
    -- --   ‚Üí   Choice-Semantics       VL‚ÇÅ (D ‚ü® e ‚à∑ es ‚ü©) c
    -- --     ‚â° BinaryChoice-Semantics VL‚ÇÇ (convert (D ‚ü® e ‚à∑ es ‚ü©)) (confi c)
    -- convert-preserves-l : ‚àÄ (e : Carrier) (es : List Carrier) (c : NConfig)
    --   ‚Üí ConfSpec D confi
    --   ‚Üí (max : ‚Ñï)
    --   ‚Üí (i : ‚Ñï)
    --   -- ‚Üí i + length es ‚â° max
    --   ‚Üí length es ‚â§ max
    --   ‚Üí max ‚â§ i + length es
    --   -- ‚Üí max ‚à∏ length es ‚â§ i
    --   ‚Üí c D ‚â° i
    --   ‚Üí   ‚ü¶ find-or-last (i ‚à∏ (max ‚à∏ length es)) (e ‚à∑ es) ‚üß‚Çô c
    --     ‚âà ‚ü¶ unroll max D (e ‚à∑ fromList es) ‚üß‚ÇÇ (confi c)
    --     -- ‚â° BinaryChoice-Semantics VL‚ÇÇ (unroll (length es) D (e ‚à∑ fromList es)) (confi c)

    -- convert-preserves-l-base : ‚àÄ (e : Carrier) (c : NConfig)
    --   ‚Üí   ‚ü¶ D ‚ü® e ‚à∑ [] ‚ü© ‚üß‚Çô c
    --     ‚â° ‚ü¶ convert (D ‚ü® e ‚à∑ [] ‚ü©) ‚üß‚ÇÇ (confi c)
    -- convert-preserves-l-base e c =
    --   begin
    --     ‚ü¶ D ‚ü® e ‚à∑ [] ‚ü© ‚üß‚Çô c
    --   ‚â°‚ü®‚ü©
    --     ‚ü¶ e ‚üß‚Çô c
    --   ‚â°‚ü®‚ü©
    --     ‚ü¶ e ‚üß‚ÇÇ (confi c)
    --   ‚â°‚ü® Eq.cong
    --        (Œª eq ‚Üí ‚ü¶ eq ‚üß‚ÇÇ (confi c))
    --        (Eq.sym
    --          (if-idemp ((confi c) (D ‚àô 0)))) ‚ü©
    --     ‚ü¶ if ((confi c) (D ‚àô 0)) then e else e ‚üß‚ÇÇ (confi c)
    --   ‚â°‚ü®‚ü©
    --     ‚ü¶ convert (D ‚ü® e ‚à∑ [] ‚ü©) ‚üß‚ÇÇ (confi c)
    --   ‚àé

    -- convert-preserves-l-base' : ‚àÄ (e : Carrier) (c : NConfig)
    --   ‚Üí (max : ‚Ñï)
    --   ‚Üí   ‚ü¶ D ‚ü® e ‚à∑ [] ‚ü© ‚üß‚Çô c
    --     ‚â° ‚ü¶ unroll max D (e ‚à∑ []) ‚üß‚ÇÇ (confi c)
    -- convert-preserves-l-base' e c max =
    --   begin
    --     ‚ü¶ D ‚ü® e ‚à∑ [] ‚ü© ‚üß‚Çô c
    --   ‚â°‚ü®‚ü©
    --     e
    --   ‚â°Àò‚ü® if-idemp ((confi c) (D ‚àô max)) ‚ü©
    --     (if ((confi c) (D ‚àô max)) then e else e)
    --   ‚â°‚ü®‚ü©
    --     ‚ü¶ unroll max D (e ‚à∑ []) ‚üß‚ÇÇ (confi c)
    --   ‚àé

    -- convert-preserves-l-step : ‚àÄ (l r : Carrier) (es : List Carrier) (c : NConfig)
    --    ‚Üí (conv : ConfSpec D confi)
    --    -- ‚Üí ConfSpec D (suc (length es)) confi
    --    ‚Üí (max : ‚Ñï)
    --    -- ‚Üí length (r ‚à∑ es) ‚â§ max
    --    ‚Üí (i : ‚Ñï)
    --    -- ‚Üí max ‚â§ i + length (r ‚à∑ es)
    --    ‚Üí (n‚â§max : length (r ‚à∑ es) ‚â§ max)
    --    ‚Üí (max‚â§i+n : max ‚â§ i + length (r ‚à∑ es))
    --    ‚Üí (cD‚â°i : c D ‚â° i)
    --    -- ‚Üí   Choice-Semantics VL‚ÇÅ (D ‚ü® l ‚à∑ r ‚à∑ es ‚ü©) c
    --    ‚Üí   ‚ü¶ find-or-last (i ‚à∏ (max ‚à∏ length (r ‚à∑ es))) (l ‚à∑ r ‚à∑ es) ‚üß‚Çô c
    --      -- ‚â° BinaryChoice-Semantics VL‚ÇÇ (convert (D ‚ü® l ‚à∑ r ‚à∑ es ‚ü©)) (confi c)
    --      ‚â° ‚ü¶ unroll max D (l ‚à∑ fromList (r ‚à∑ es)) ‚üß‚ÇÇ (confi c)
    -- convert-preserves-l-step l r es c conv (suc max) zero (s‚â§s n‚â§max) (s‚â§s max‚â§i+n) cD‚â°i = ?
    --   -- begin
    --   --   (find-or-last (zero ‚à∏ (max ‚à∏ n)) (l ‚à∑ r ‚à∑ es))
    --   -- ‚â°‚ü® 0‚à∏n‚â°0 (max ‚à∏ n) ‚ü©
    --   --   l
    --   -- ‚â°Àò‚ü® select-n conv c max‚à∏n‚â°cD ‚ü©
    --   --   (if (confi c) (D ‚àô (max ‚à∏ n)) then l else tail)
    --   -- ‚àé
    --   where n = length es
    --         tail = unroll (suc max) D (r ‚à∑ fromList es)

    --         max‚à∏n‚â°0 : max ‚à∏ n ‚â° 0
    --         max‚à∏n‚â°0 = m‚â§n‚áím‚à∏n‚â°0 max‚â§i+n

    --         max‚à∏n‚â°cD : max ‚à∏ n ‚â° c D
    --         max‚à∏n‚â°cD = Eq.trans max‚à∏n‚â°0 (Eq.sym cD‚â°i)
    -- convert-preserves-l-step l r es c conv (suc max) (suc i) (s‚â§s n‚â§max) (s‚â§s max‚â§i+n) cD‚â°i with max ‚à∏ (length es) in eq
    -- ... | zero = ?
    --   -- begin
    --   --   ‚ü¶ find-or-last i (r ‚à∑ es) ‚üß‚Çô c
    --   -- ‚â°‚ü® Eq.cong
    --   --      (Œª x ‚Üí ‚ü¶ find-or-last x (r ‚à∑ es) ‚üß‚Çô c)
    --   --      lh ‚ü©
    --   --   -- ‚ü¶ find-or-last (i ‚à∏ (max ‚à∏ length es)) (r ‚à∑ es) ‚üß‚Çô c
    --   --   ‚ü¶ find-or-last (suc i ‚à∏ (suc max ‚à∏ n)) (r ‚à∑ es) ‚üß‚Çô c
    --   -- -- ‚â°‚ü® {!!} ‚ü©
    --   -- ‚â°‚ü® convert-preserves-l r es c conv (r‚â°tr ‚à∑ es‚â°tes) (suc max) (suc i) n‚â§1+m 1+m‚â§1+i+n cD‚â°i ‚ü©
    --   -- -- ‚â°‚ü® convert-preserves-l r es c conv (r‚â°tr ‚à∑ es‚â°tes) (suc max) (suc i) ? cD‚â°i ‚ü©
    --   --   ‚ü¶ unroll (suc max) D (r ‚à∑ fromList es) ‚üß‚ÇÇ (confi c)
    --   -- ‚â°‚ü®‚ü©
    --   --   ‚ü¶ tail ‚üß‚ÇÇ (confi c)
    --   -- -- ‚â°‚ü® Eq.sym (mkChoice-preserves tail (confi c)) ‚ü©
    --   --   -- ‚ü¶ mkChoice tail ‚üß‚ÇÇ (confi c)
    --   -- ‚â°‚ü® Eq.cong
    --   --      (Œª x ‚Üí ‚ü¶ if x then l else tail ‚üß‚ÇÇ (confi c))
    --   --      (Eq.sym (deselect-<n conv c 0<cD)) ‚ü©
    --   --   ‚ü¶ if (confi c) (D ‚àô zero) then l else tail ‚üß‚ÇÇ (confi c)
    --   -- ‚àé
    --   where tail = unroll (suc max) D (r ‚à∑ fromList es)
    --         n    = length es

    --         0<cD : zero < c D
    --         0<cD rewrite cD‚â°i = s‚â§s z‚â§n

    --         max‚à∏n‚â°0 : max ‚à∏ n ‚â° 0
    --         max‚à∏n‚â°0 = eq

    --         m‚â§n : max ‚â§ n
    --         m‚â§n = {!!} -- follows from max‚à∏n‚â°0

    --         m‚â°n : max ‚â° n
    --         m‚â°n = {!!} -- from m‚â§n and n‚â§max

    --         [1+m]‚à∏n‚â°1 : suc max ‚à∏ n ‚â° 1
    --         [1+m]‚à∏n‚â°1 rewrite m‚â°n = {!!} -- follows from 1 + x - x = x

    --         lh : i ‚â° suc i ‚à∏ (suc max ‚à∏ n)
    --         lh rewrite [1+m]‚à∏n‚â°1 = refl

    --         n‚â§1+m : n ‚â§ suc max
    --         n‚â§1+m rewrite m‚â°n = {!!} -- follows from x ‚â§ 1 + x

    --         1+m‚â§1+i+n : suc max ‚â§ suc (i + n)
    --         1+m‚â§1+i+n rewrite m‚â°n = s‚â§s {!!} -- follows from x ‚â§ y + x
    -- ... | suc d = ? -- maybe split on i here?
    --   -- begin
    --   --   ‚ü¶ find-or-last (i ‚à∏ d) (l ‚à∑ r ‚à∑ es) ‚üß‚Çô c
    --   -- ‚â°‚ü® {!!} ‚ü©
    --   --   ‚ü¶ if (confi c) (D ‚àô suc d) then l else tail ‚üß‚ÇÇ (confi c)
    --   -- ‚àé
    --   where tail = unroll (suc max) D (r ‚à∑ fromList es)
    --         n    = length es

    --         m‚à∏n‚â°1+d : max ‚à∏ n ‚â° suc d
    --         m‚à∏n‚â°1+d = eq

    --         n<m : n < max
    --         n<m = {!!} -- follows from m‚à∏n‚â°1+d

    --         m‚à∏n‚â§i : max ‚à∏ n ‚â§ i
    --         m‚à∏n‚â§i = {!!} -- I think, we cannot prove this.

    --         0<m‚à∏n : 0 < max ‚à∏ n
    --         0<m‚à∏n = {!!} -- follows from m‚à∏n‚â°1+d

    --         1+d<cD : suc d < c D
    --         1+d<cD rewrite cD‚â°i | Eq.sym m‚à∏n‚â°1+d = s‚â§s m‚à∏n‚â§i
    --   -- begin
    --   --   -- Choice-Semantics VL‚ÇÅ (D ‚ü® l ‚à∑ r ‚à∑ es ‚ü©) c
    --   -- -- ‚â°‚ü®‚ü©
    --   --   -- ‚ü¶ find-or-last (c D) (l ‚à∑ r ‚à∑ es) ‚üß‚ÇÅ c
    --   -- -- ‚â°‚ü® Eq.cong
    --   --      -- (Œª x ‚Üí ‚ü¶ find-or-last x (l ‚à∑ r ‚à∑ es) ‚üß‚ÇÅ c)
    --   --      -- cD‚â°i ‚ü©
    --   --   ‚ü¶ find-or-last (suc i ‚à∏ (max ‚à∏ n)) (l ‚à∑ r ‚à∑ es) ‚üß‚ÇÅ c
    --   -- -- ‚â°‚ü®‚ü©
    --   --   -- ‚ü¶ find-or-last i (r ‚à∑ es) ‚üß‚ÇÅ c
    --   -- ‚â°‚ü® {!!} ‚ü© -- {!convert-preserves-l r es c conv (r‚â°tr ‚à∑ hypot-es) max ? (suc i) cD‚â°i!} ‚ü©
    --   -- --   BinaryChoice-Semantics VL‚ÇÇ (unroll max D (r ‚à∑ fromList es)) (confi c)
    --   -- -- ‚â°‚ü®‚ü©
    --   -- --   BinaryChoice-Semantics VL‚ÇÇ tail (confi c)
    --   -- -- ‚â°‚ü® Eq.sym (mkChoice-preserves tail (confi c)) ‚ü©
    --   --   ‚ü¶ mkChoice tail ‚üß‚ÇÇ (confi c)
    --   -- ‚â°‚ü® Eq.cong
    --   --      (Œª x ‚Üí ‚ü¶ if x then t l else mkChoice tail ‚üß‚ÇÇ (confi c))
    --   --      (Eq.sym (deselect-<n conv c {!!})) ‚ü©
    --   --   ‚ü¶ if (confi c) (D ‚àô (max ‚à∏ n)) then t l else mkChoice tail ‚üß‚ÇÇ (confi c)
    --   -- ‚àé
    --   -- where n = length es
    --   --       tail = unroll (suc max) D (r ‚à∑ fromList es)
    --   -- begin
    --   --   ‚ü¶ find-or-last (zero ‚à∏ (max ‚à∏ n)) (l ‚à∑ r ‚à∑ es) ‚üß‚ÇÅ c
    --   -- ‚â°‚ü® Eq.cong
    --   --      (Œª x ‚Üí ‚ü¶ find-or-last x (l ‚à∑ r ‚à∑ es) ‚üß‚ÇÅ c)
    --   --      (0‚à∏n‚â°0 (max ‚à∏ n)) ‚ü©
    --   --   ‚ü¶ l ‚üß‚ÇÅ c
    --   -- ‚â°‚ü® l‚â°tl ‚ü©
    --   --   ‚ü¶ t l ‚üß‚ÇÇ (confi c)
    --   -- ‚â°‚ü® Eq.cong
    --   --      (Œª x ‚Üí ‚ü¶ if x then t l else tail ‚üß‚ÇÇ (confi c))
    --   --      (Eq.sym (select-n conv c max‚à∏n‚â°cD)) ‚ü©
    --   --   ‚ü¶ if (confi c) (D ‚àô (max ‚à∏ n)) then t l else tail ‚üß‚ÇÇ (confi c)
    --   -- ‚àé
    --   -- where n = suc (length es)
    --   --       tail = mkChoice (unroll max D (r ‚à∑ fromList es))

    --   --       max‚à∏n‚â°0 : max ‚à∏ n ‚â° 0
    --   --       max‚à∏n‚â°0 = m‚â§n‚áím‚à∏n‚â°0 max‚â§n

    --   --       max‚à∏n‚â°cD : max ‚à∏ n ‚â° c D
    --   --       max‚à∏n‚â°cD = Eq.trans max‚à∏n‚â°0 (Eq.sym cD‚â°i)
    --   --       -- pick : suc n ‚à∏ c D ‚â° suc n
    --   --       -- pick rewrite cD‚â°i = refl
    -- -- convert-preserves-l-step l r es c conv (l‚â°tl ‚à∑ r‚â°tr ‚à∑ es‚â°tes) zero (suc i) n‚â§max z‚â§n cD‚â°i =
    -- --   begin
    -- --     ‚ü¶ find-or-last i (r ‚à∑ es) ‚üß‚ÇÅ c
    -- --   ‚â°‚ü® {!!} ‚ü©
    -- --   -- ‚â°‚ü® convert-preserves-l r es c conv (r‚â°tr ‚à∑ hypot-es) max (suc i) asd cD‚â°i ‚ü©
    -- --     BinaryChoice-Semantics VL‚ÇÇ (unroll zero D (r ‚à∑ fromList es)) (confi c)
    -- --   ‚â°‚ü®‚ü©
    -- --     BinaryChoice-Semantics VL‚ÇÇ tail (confi c)
    -- --   ‚â°‚ü® Eq.sym (mkChoice-preserves tail (confi c)) ‚ü©
    -- --     ‚ü¶ mkChoice tail ‚üß‚ÇÇ (confi c)
    -- --   ‚â°‚ü® Eq.cong
    -- --        (Œª x ‚Üí ‚ü¶ if x then t l else mkChoice tail ‚üß‚ÇÇ (confi c))
    -- --        (Eq.sym (deselect-<n conv c {! doable!})) ‚ü©
    -- --     ‚ü¶ if (confi c) (D ‚àô zero) then t l else mkChoice tail ‚üß‚ÇÇ (confi c)
    -- --   ‚àé
    -- --   where tail = unroll zero D (r ‚à∑ fromList es)
    -- -- convert-preserves-l-step l r es c conv (l‚â°tl ‚à∑ r‚â°tr ‚à∑ es‚â°tes) (suc max) (suc i) max‚à∏n‚â§i cD‚â°i = {!!}
    -- -- convert-preserves-l-step l r es c conv (l‚â°tl ‚à∑ r‚â°tr ‚à∑ hypot-es) max (suc i) max‚â§1+i+n cD‚â°i with max ‚à∏ length (r ‚à∑ es) in eq
    -- -- ... | zero =
    -- --   begin
    -- --     ‚ü¶ find-or-last i (r ‚à∑ es) ‚üß‚ÇÅ c
    -- --   ‚â°‚ü® {!!} ‚ü©
    -- --     ‚ü¶ find-or-last (suc i ‚à∏ (max ‚à∏ length es)) (r ‚à∑ es) ‚üß‚ÇÅ c
    -- --   ‚â°‚ü® convert-preserves-l r es c conv (r‚â°tr ‚à∑ hypot-es) max (suc i) asd cD‚â°i ‚ü©
    -- --     BinaryChoice-Semantics VL‚ÇÇ (unroll max D (r ‚à∑ fromList es)) (confi c)
    -- --   ‚â°‚ü®‚ü©
    -- --     BinaryChoice-Semantics VL‚ÇÇ tail (confi c)
    -- --   ‚â°‚ü® Eq.sym (mkChoice-preserves tail (confi c)) ‚ü©
    -- --     ‚ü¶ mkChoice tail ‚üß‚ÇÇ (confi c)
    -- --   ‚â°‚ü® Eq.cong
    -- --        (Œª x ‚Üí ‚ü¶ if x then t l else mkChoice tail ‚üß‚ÇÇ (confi c))
    -- --        (Eq.sym (deselect-<n conv c {! doable!})) ‚ü©
    -- --     ‚ü¶ if (confi c) (D ‚àô zero) then t l else mkChoice tail ‚üß‚ÇÇ (confi c)
    -- --   ‚àé
    -- --   where tail = unroll max D (r ‚à∑ fromList es)
    -- --         asd : max ‚à∏ length es ‚â§ suc i
    -- --         asd = {!!}

    -- -- ... | suc x = {!!}
    --   -- begin
    --   --   -- Choice-Semantics VL‚ÇÅ (D ‚ü® l ‚à∑ r ‚à∑ es ‚ü©) c
    --   -- -- ‚â°‚ü®‚ü©
    --   --   -- ‚ü¶ find-or-last (c D) (l ‚à∑ r ‚à∑ es) ‚üß‚ÇÅ c
    --   -- -- ‚â°‚ü® Eq.cong
    --   --      -- (Œª x ‚Üí ‚ü¶ find-or-last x (l ‚à∑ r ‚à∑ es) ‚üß‚ÇÅ c)
    --   --      -- cD‚â°i ‚ü©
    --   --   ‚ü¶ find-or-last ((suc i) ‚à∏ (max ‚à∏ n)) (l ‚à∑ r ‚à∑ es) ‚üß‚ÇÅ c
    --   -- -- ‚â°‚ü®‚ü©
    --   --   -- ‚ü¶ find-or-last i (r ‚à∑ es) ‚üß‚ÇÅ c
    --   -- ‚â°‚ü® {!!} ‚ü© -- {!convert-preserves-l r es c conv (r‚â°tr ‚à∑ hypot-es) max ? (suc i) cD‚â°i!} ‚ü©
    --   --   BinaryChoice-Semantics VL‚ÇÇ (unroll max D (r ‚à∑ fromList es)) (confi c)
    --   -- ‚â°‚ü®‚ü©
    --   --   BinaryChoice-Semantics VL‚ÇÇ tail (confi c)
    --   -- ‚â°‚ü® Eq.sym (mkChoice-preserves tail (confi c)) ‚ü©
    --   --   ‚ü¶ mkChoice tail ‚üß‚ÇÇ (confi c)
    --   -- ‚â°‚ü® Eq.cong
    --   --      (Œª x ‚Üí ‚ü¶ if x then t l else mkChoice tail ‚üß‚ÇÇ (confi c))
    --   --      (Eq.sym (deselect-<n conv c {!!})) ‚ü©
    --   --   ‚ü¶ if (confi c) (D ‚àô (max ‚à∏ n)) then t l else mkChoice tail ‚üß‚ÇÇ (confi c)
    --   -- ‚àé
    --   -- where n = length (r ‚à∑ es)
    --   --       tail = unroll max D (r ‚à∑ fromList es)

    --   --       -- TODO: Move to aux proofs
    --   --       asdf : ‚àÄ {n m} ‚Üí suc (n ‚à∏ m) ‚â§ suc n
    --   --       asdf {zero} {zero} = s‚â§s z‚â§n
    --   --       asdf {zero} {suc _} = s‚â§s z‚â§n
    --   --       asdf {suc n} {zero} = ‚â§-refl
    --   --       asdf {suc n} {suc m} = s‚â§s (m‚à∏n‚â§m (suc n) (suc m))

    --         -- pick : max ‚à∏ n < c D
    --         -- pick rewrite cD‚â°i = s‚â§s {!!}

    -- convert-preserves-l e [] c _ max _ _ _ _ = convert-preserves-l-base' e c max
    -- convert-preserves-l l (r ‚à∑ es) c conv max i asd eq cD‚â°i = convert-preserves-l-step l r es c conv max i asd eq cD‚â°i

    -- -- convert-preserves-l :
    -- --     ConfSpec D confi
    -- --   ‚Üí (alts : List‚Å∫ (L‚ÇÅ A))
    -- --   ‚Üí (c : NConfig)
    -- --   ‚Üí All‚Å∫ (Œª e ‚Üí ‚ü¶ e ‚üß‚ÇÅ c ‚â° ‚ü¶ t e ‚üß‚ÇÇ (confi c)) alts
    -- --   ‚Üí   Choice-Semantics       VL‚ÇÅ (D ‚ü® alts ‚ü©) c
    -- --     ‚â° BinaryChoice-Semantics VL‚ÇÇ (unroll D alts zero) (confi c)
    -- -- convert-preserves-l conv (e ‚à∑ []) c (e‚â°tx ‚à∑ []) =
    -- --   begin
    -- --     Choice-Semantics VL‚ÇÅ (D ‚ü® e ‚à∑ [] ‚ü©) c
    -- --   ‚â°‚ü®‚ü©
    -- --     ‚ü¶ e ‚üß‚ÇÅ c
    -- --   ‚â°‚ü® e‚â°tx ‚ü©
    -- --     ‚ü¶ t e ‚üß‚ÇÇ (confi c)
    -- --   ‚â°‚ü® Eq.cong
    -- --        (Œª eq ‚Üí ‚ü¶ eq ‚üß‚ÇÇ (confi c))
    -- --        (Eq.sym
    -- --          (if-idemp ((confi c) (D ‚àô 0)))) ‚ü©
    -- --     ‚ü¶ if ((confi c) (D ‚àô 0)) then (t e) else (t e) ‚üß‚ÇÇ (confi c)
    -- --   ‚â°‚ü®‚ü©
    -- --     BinaryChoice-Semantics VL‚ÇÇ (convert (D ‚ü® e ‚à∑ [] ‚ü©)) (confi c)
    -- --   ‚àé
    -- -- convert-preserves-l conv (l ‚à∑ r ‚à∑ es) c (l‚â°tl ‚à∑ r‚â°tr ‚à∑ hypot-es) with c D in eq
    -- -- ... | zero  =
    -- --   begin
    -- --     ‚ü¶ l ‚üß‚ÇÅ c
    -- --   ‚â°‚ü® l‚â°tl ‚ü©
    -- --     ‚ü¶ t l ‚üß‚ÇÇ (confi c)
    -- --   ‚â°‚ü®‚ü©
    -- --     ‚ü¶ if true then t l else mkChoice (unroll D (r ‚à∑ es) 1) ‚üß‚ÇÇ (confi c)
    -- --   ‚â°‚ü® Eq.cong
    -- --        (Œª x ‚Üí ‚ü¶ if x then t l else mkChoice (unroll D (r ‚à∑ es) 1) ‚üß‚ÇÇ (confi c))
    -- --        (Eq.sym (select-n conv c 0 (Eq.sym eq))) ‚ü©
    -- --     ‚ü¶ if (confi c) (D ‚àô 0) then t l else mkChoice (unroll D (r ‚à∑ es) 1) ‚üß‚ÇÇ (confi c)
    -- --   ‚â°‚ü®‚ü©
    -- --     BinaryChoice-Semantics VL‚ÇÇ (convert (D ‚ü® l ‚à∑ r ‚à∑ es ‚ü©)) (confi c)
    -- --   ‚àé
    -- -- ... | suc n =
    -- --   begin
    -- --     ‚ü¶ find-or-last n (r ‚à∑ es) ‚üß‚ÇÅ c
    -- --   -- ‚â°‚ü® {!!} ‚ü©
    -- --     -- ‚ü¶ ‚üß‚ÇÇ
    -- --   -- ‚â°‚ü®‚ü©
    -- --     -- BinaryChoice-Semantics VL‚ÇÇ (unroll D (r ‚à∑ es) zero) (confi c)
    -- --   ‚â°‚ü® {!!} ‚ü©
    -- --     BinaryChoice-Semantics VL‚ÇÇ (unroll D (r ‚à∑ es) 1) (confi c)
    -- --   ‚â°‚ü® Eq.sym (mkChoice-preserves (unroll D (r ‚à∑ es) 1) (confi c)) ‚ü©
    -- --     ‚ü¶ mkChoice (unroll D (r ‚à∑ es) 1) ‚üß‚ÇÇ (confi c)
    -- --   ‚â°‚ü®‚ü©
    -- --     ‚ü¶ if false then t l else mkChoice (unroll D (r ‚à∑ es) 1) ‚üß‚ÇÇ (confi c)
    -- --   ‚â°‚ü® Eq.cong
    -- --        (Œª x ‚Üí ‚ü¶ if x then t l else mkChoice (unroll D (r ‚à∑ es) 1) ‚üß‚ÇÇ (confi c))
    -- --        (Eq.sym (deselect-<n conv c 0 {!!})) ‚ü©
    -- --     ‚ü¶ if (confi c) (D ‚àô 0) then t l else mkChoice (unroll D (r ‚à∑ es) 1) ‚üß‚ÇÇ (confi c)
    -- --   ‚â°‚ü®‚ü©
    -- --     BinaryChoice-Semantics VL‚ÇÇ (convert (D ‚ü® l ‚à∑ r ‚à∑ es ‚ü©)) (confi c)
    -- --   ‚àé

    -- convert-preserves : ‚àÄ (alts : List‚Å∫ Carrier) ‚Üí
    --       ‚ü¶ D ‚ü® alts ‚ü© ‚üß‚Çô
    --     ‚âÖ ‚ü¶ convert (D ‚ü® alts ‚ü©) ‚üß‚ÇÇ
    -- convert-preserves = {!!}

    -- L‚ÇÇ-has-choices-syntactically : BinaryChoice I ‚àà‚Çõ L‚ÇÇ
    -- L‚ÇÇ-has-choices-syntactically = make L‚ÇÇ-has-choices

    -- mkChoice : BinaryChoice I L‚ÇÇ A ‚Üí L‚ÇÇ A
    -- mkChoice = cons L‚ÇÇ-has-choices-syntactically

    -- mkChoice-preserves : ‚àÄ (c : BinaryChoice I L‚ÇÇ A) ‚Üí ‚ü¶ mkChoice c ‚üß‚ÇÇ ‚âó BinaryChoice-Semantics VL‚ÇÇ c
    -- mkChoice-preserves = preservation L‚ÇÇ-has-choices
