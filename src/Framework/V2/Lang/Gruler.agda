module Framework.V2.Lang.Gruler where

open import Framework.V2.Definitions

open import Data.Bool using (Bool)
open import Data.Maybe using (Maybe; just; nothing)
open import Data.Nat using (‚Ñï)

open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_; refl)

open import Framework.V2.Constructs.Choices
open import Framework.V2.Constructs.GrulerArtifacts
open import Framework.V2.Variants using (GrulerVariant)

open Framework.V2.Constructs.Choices.Choice‚ÇÇ using (_‚ü®_,_‚ü©)

private
  variable
    A : ùî∏

  BinaryChoice = VLChoice‚ÇÇ.Syntax
  BinaryChoice-Semantics = VLChoice‚ÇÇ.Semantics

data Gruler : ùîº where
  GAsset  : Leaf A                       ‚Üí Gruler A
  GPComp  : ParallelComposition (Gruler A) ‚Üí Gruler A
  GChoice : BinaryChoice ‚Ñï Gruler A      ‚Üí Gruler A

-- I have no idea how we could prove this terminating but let's just avoid that headache.
{-# TERMINATING #-}
‚ü¶_‚üß·µç : ùîº-Semantics GrulerVariant ‚Ñï Bool Gruler

GrulerVL : VariabilityLanguage GrulerVariant ‚Ñï Bool
GrulerVL = record
  { expression-set = Gruler
  ; semantics   = ‚ü¶_‚üß·µç
  }

‚ü¶ GAsset A  ‚üß·µç = VLLeaf.Semantics VLLeaf.Leaf‚àà‚ÇõGrulerVariant GrulerVL A
‚ü¶ GPComp PC ‚üß·µç = VLParallelComposition.Semantics VLParallelComposition.ParallelComposition‚àà‚ÇõGrulerVariant GrulerVL PC
‚ü¶ GChoice C ‚üß·µç = BinaryChoice-Semantics GrulerVL C

gruler-has-leaf : VLLeaf.Syntax ‚àà‚Çõ Gruler
gruler-has-leaf = record
  { cons = GAsset
  ; snoc = snoc'
  ; id-l = Œª _ ‚Üí refl
  }
  where snoc' : Gruler A ‚Üí Maybe (Leaf A)
        snoc' (GAsset A)  = just A
        snoc' _ = nothing

gruler-has-choice : BinaryChoice ‚Ñï ‚àà‚Çõ Gruler
gruler-has-choice = record
  { cons = GChoice
  ; snoc = snoc'
  ; id-l = Œª _ ‚Üí refl
  }
  where snoc' : Gruler A ‚Üí Maybe (BinaryChoice ‚Ñï Gruler A)
        snoc' (GChoice C) = just C
        snoc' _ = nothing

gruler-models-choice : VLChoice‚ÇÇ.Construct GrulerVariant ‚Ñï ‚ü¶‚àà‚üß GrulerVL
make gruler-models-choice = gruler-has-choice
preservation gruler-models-choice _ _ = refl

gruler-choice-preserves : ‚àÄ {D l r c}
  ‚Üí ‚ü¶ GChoice {A} (D ‚ü® l , r ‚ü©) ‚üß·µç c ‚â° BinaryChoice-Semantics GrulerVL (D ‚ü® l , r ‚ü©) c
gruler-choice-preserves = refl
