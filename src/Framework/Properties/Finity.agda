open import Framework.Definitions using (ùïç)
module Framework.Properties.Finity (V : ùïç) where

open import Data.Product using (_,_)
open import Function using (_‚àò_; Surjective; Congruent)

open import Relation.Binary using (IsEquivalence)
open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_)

open import Framework.VariabilityLanguage
open import Framework.Relation.Index V using (_‚àã_‚ä¢_‚â£‚Å±_; ‚â£‚Å±-IsEquivalence; ‚â£‚Å±-congruent; ‚â£‚Å±-setoid)
open import Framework.Properties.Soundness V
open import Framework.Relation.Expression V
open import Data.EqIndexedSet
open import Util.Enumerable

HasEnumerableNonEmptySemantics : VariabilityLanguage V ‚Üí Set‚ÇÅ
HasEnumerableNonEmptySemantics L = ‚àÄ {A} e ‚Üí EnumerableAndNonEmpty (‚â£‚Å±-setoid {A} L e)

-- TODO: Move the following to the variability package?
soundness-from-enumerability : ‚àÄ {L : VariabilityLanguage V}
  ‚Üí HasEnumerableNonEmptySemantics L
    --------------------------------
  ‚Üí Sound L
soundness-from-enumerability {L} L-has-finite-semantics {A} e =
      size fin
    , ‚ü¶ e ‚üß ‚àò enumerate-configuration
    , re-index
        {_‚âà·µÉ_ = _‚â°_}
        enumerate-configuration
        ‚ü¶ e ‚üß
        (enumerate-is-surjective fin)
        (Eq._‚â°_.refl)
        (IsEquivalence.sym (‚â£‚Å±-IsEquivalence L e))
        (‚â£‚Å±-congruent L e)
      where ‚ü¶_‚üß = Semantics L
            fin = L-has-finite-semantics e
            enumerate-configuration = enumerate fin
