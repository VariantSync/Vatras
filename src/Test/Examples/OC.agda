{-# OPTIONS --sized-types #-}

module Test.Examples.OC where

open import Data.List using (List; []; _‚à∑_; [_])
open import Data.String using (String)
open import Size using (Size; ‚Üë_; ‚àû)

open import Framework.Annotation.Name using (Option)
open import Framework.Definitions using (ùî∏)
open import Lang.OC

open import Test.Example

OCExample : Set
OCExample = Example (WFOC ‚àû String)

singleton : ‚àÄ {i : Size} {A : ùî∏} ‚Üí A ‚Üí OC i A ‚Üí OC (‚Üë i) A
singleton a e = Artifact a [ e ]

optex-unary : OCExample
optex-unary = "unary" ‚âî (Root "r" [ opt "O" (oc-leaf "lol") ])

optex-lock : OCExample
optex-lock = "lock" ‚âî (Root "void f() {" (
    oc-leaf          "int bobedi = 3;"
  ‚à∑ "Lock" ‚ù≤ oc-leaf "lock();" ‚ù≥
  ‚à∑ oc-leaf          "magic(bobedi);"
  ‚à∑ "Lock" ‚ù≤ oc-leaf "unlock();" ‚ù≥
  ‚à∑ []))

optex-sandwich : OCExample
optex-sandwich = "sandwich" ‚âî (Root "Buns" (
    "Tomato?" ‚ù≤ oc-leaf "Tomato" ‚ù≥
  ‚à∑ "Salad?"  ‚ù≤ oc-leaf "Salad"  ‚ù≥
  ‚à∑ "Cheese?" ‚ù≤ oc-leaf "Cheese" ‚ù≥
  ‚à∑ oc-leaf "Mayonnaise" -- we always put mayo on the sandwich
  ‚à∑ []))

optex-deep : OCExample
optex-deep = "deep" ‚âî
  (Root "A"
    (singleton "B"
      (singleton "C"
        ("O" ‚ù≤ oc-leaf "hi" ‚ù≥)) ‚à∑ []))

optex-all : List OCExample
optex-all = optex-unary ‚à∑ optex-lock ‚à∑ optex-sandwich ‚à∑ optex-deep ‚à∑ []

