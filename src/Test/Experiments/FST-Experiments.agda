{-# OPTIONS --allow-unsolved-metas #-}
{-# OPTIONS --sized-types #-}

open import Framework.Definitions
module Test.Experiments.FST-Experiments where

open import Data.Bool using (true; false)
open import Data.List using (List; _‚à∑_; []; map; [_])
open import Data.Product using (proj‚ÇÅ; proj‚ÇÇ; _,_; _√ó_)
open import Function using (id)

open import Relation.Binary using (DecidableEquality)
open import Relation.Nullary.Decidable using (yes; no; does; _because_; _√ó-dec_)

open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_; refl)

open import Util.Named
open import Test.Example
open import Test.Experiment
open import Show.Lines
open import Util.ShowHelpers
open import Data.String using (String; _<+>_; _++_) renaming (_‚âü_ to _‚âüÀ¢_)

open import Lang.FST as FSTModule using (Conf)

module _ {A : ùî∏} (_‚âü_ : DecidableEquality A) where
  open FSTModule.Defs {A}
  open FSTModule.Defs.Impose _‚âü_
  module FSTShow = FSTModule.Defs.Impose.Show

  exp : ‚àÄ {N}
    ‚Üí (N ‚Üí String)
    ‚Üí (A ‚Üí String)
    ‚Üí List (Conf N)
    ‚Üí Experiment (SPL N)
  getName (exp _ _ _) = "Configure FST example"
  get (exp show-N show-A configs) (example-name ‚âî forest) =
    let open FSTShow _‚âü_ show-N show-A
    in
    do
    > "Expression e has features"
    indent 2 do
      lines (map show-Feature forest)

    foreach [ c ‚àà configs ] do
      let cstr = show-fun show-N show-bool c (names forest)
      linebreak
      > "‚ü¶ e ‚üß" <+> cstr <+> "="
      indent 2 do
        show-FSF (forget-uniqueness (‚ü¶ forest ‚üß c))

pick-all : ‚àÄ {N} ‚Üí Conf N
pick-all _ = true

pick-only : ‚àÄ {N} ‚Üí DecidableEquality N ‚Üí N ‚Üí Conf N
pick-only _==_ n n' = does (n == n')

module Java where
  ASTNode = String

  class = "class" <+>_
  method = "method" <+>_
  return : String ‚Üí ASTNode
  return e = "return" <+> e ++ ";"

  _‚âü-ast_ : DecidableEquality ASTNode
  _‚âü-ast_ = _‚âüÀ¢_

  open FSTModule.Defs {ASTNode}
  open FSTModule.Defs.Impose _‚âü-ast_

  module Calculator where
    fname-Add = "Add"
    fname-Sub = "Sub"
    fname-Log = "Log"

    cls = class "Calculator"

    add = method "add(int,int)"
    add-ret = return "x + y"

    sub = method "sub(int,int)"
    sub-ret = return "x - y"

    log = "log(x + \", \" + y);"

    ---- Features

    open import Data.Unit using (tt)
    open import Data.List.Relation.Unary.AllPairs using ([]; _‚à∑_)
    open import Data.List.Relation.Unary.All using ([]; _‚à∑_)

    feature-Add : Feature ASTNode
    feature-Add = fname-Add :: (cls Ôºé add Ôºé add-ret Ôºé [] , ([] ‚à∑ []) , ((unq ([] ‚à∑ [] , (unq (([] ‚à∑ []) , ((unq ([] , [])) ‚à∑ []))) ‚à∑ [])) ‚à∑ []))

    feature-Sub : Feature ASTNode
    feature-Sub = fname-Sub :: (cls Ôºé sub Ôºé sub-ret Ôºé [] , ([] ‚à∑ []) , ((unq ([] ‚à∑ [] , (unq (([] ‚à∑ []) , ((unq ([] , [])) ‚à∑ []))) ‚à∑ [])) ‚à∑ []))

    feature-Log : Feature ASTNode
    feature-Log = fname-Log :: cls Ôºé
      branches (
        (add Ôºé log Ôºé [])
      ‚à∑ (sub Ôºé log Ôºé [])
      ‚à∑ []) , ([] ‚à∑ []) , ((unq (((tt ‚à∑ []) ‚à∑ ([] ‚à∑ [])) , ((unq (([] ‚à∑ []) , ((unq ([] , [])) ‚à∑ []))) ‚à∑ ((unq (([] ‚à∑ []) , ((unq ([] , [])) ‚à∑ []))) ‚à∑ [])))) ‚à∑ [])

    ---- Example SPLs

    ex-Add-Sub : Example (SPL ASTNode)
    ex-Add-Sub = "add-sub" ‚âî feature-Add ‚à∑ feature-Sub ‚à∑ []

    ex-Sub-Add : Example (SPL ASTNode)
    ex-Sub-Add = "sub-add" ‚âî feature-Sub ‚à∑ feature-Add ‚à∑ []

    ex-Add-Sub-Log : Example (SPL ASTNode)
    ex-Add-Sub-Log = "add-sub" ‚âî feature-Add ‚à∑ feature-Sub ‚à∑ feature-Log ‚à∑ []

    ex-all : List (Example (SPL ASTNode))
    ex-all = ex-Add-Sub ‚à∑ ex-Sub-Add ‚à∑ ex-Add-Sub-Log ‚à∑ []

    ---- Experiments

    toy-calculator-experiment =
      let eq = _‚âü-ast_ in
      exp eq id id (pick-all ‚à∑ pick-only eq fname-Add ‚à∑ [])
