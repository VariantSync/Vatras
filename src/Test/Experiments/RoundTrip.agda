module Test.Experiments.RoundTrip where

open import Data.Bool using (Bool; true; false)
import Data.Fin as Fin
open import Data.List using (List; _‚à∑_; [])
open import Data.List.NonEmpty using (_‚à∑_)
open import Data.Nat using (_+_)
open import Data.Product using (_,_; proj‚ÇÅ; proj‚ÇÇ; map‚ÇÇ)
open import Data.String as String using (String; _++_; unlines; _==_)
open import Effect.Applicative using (RawApplicative)

open import Size using (Size; ‚àû)
open import Function using (id; _‚àò_)
open import Level using (0‚Ñì)

import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; refl)

open import Framework.Compiler using (LanguageCompiler)
open import Framework.Definitions using (‚ÑÇ; ùî∏)
open import Framework.Variants using (Rose; show-rose)
open import Framework.VariabilityLanguage using (VariabilityLanguage; Expression)
open import Util.AuxProofs using (decidableEquality-√ó)
open import Util.Nat.AtLeast using (‚Ñï‚â•)
import Util.String as String

open import Lang.All
open CCC using (CCC; _‚ü®_‚ü©; _-<_>-)
open NCC using (NCC)
open import Translation.LanguageMap
import Translation.Lang.CCC-to-NCC
module CCC-to-NCC = Translation.Lang.CCC-to-NCC.Exact
import Translation.Lang.NCC-to-2CC
open Translation.Lang.NCC-to-2CC.2Ary using () renaming (NCC‚Üí2CC to NCC-2‚Üí2CC)
open CCC.Encode using () renaming (encoder to CCC-Rose-encoder)

open import Show.Lines
open import Util.Named
open import Show.Eval

open import Test.Experiment
open import Test.Example
open import Test.Examples.OC

Feature = String
Artifact : ùî∏
Artifact = String , String._‚âü_

open CCC-to-NCC using (‚åà_‚åâ; numberOfAlternatives‚â§‚åà_‚åâ)

CCC‚ÜíNCC-Exact : (e : CCC Feature ‚àû Artifact) ‚Üí NCC ‚åà e ‚åâ Feature ‚àû Artifact
CCC‚ÜíNCC-Exact e = CCC-to-NCC.translate ‚åà e ‚åâ e (numberOfAlternatives‚â§‚åà_‚åâ e)


translate : {E‚ÇÅ : Set‚ÇÅ} ‚Üí {E‚ÇÇ : E‚ÇÅ ‚Üí Set‚ÇÅ} ‚Üí (e : E‚ÇÅ) ‚Üí String ‚Üí ((e : E‚ÇÅ) ‚Üí E‚ÇÇ e) ‚Üí (E‚ÇÇ e ‚Üí Lines) ‚Üí Lines' (E‚ÇÇ e)
translate e E‚ÇÇ-name translator show = return-level e' do
  linebreak
  [ Center ]> "‚îÇ"
  [ Center ]> "          ‚îÇ translate"
  [ Center ]> "‚Üì"
  linebreak
  [ Center ]> E‚ÇÇ-name
  overwrite-alignment-with Center
    (boxed (6 + width pretty-e') "" pretty-e')
  [ Center ]> "proven to have the same semantics as the previous expression"
  where
  e' = translator e
  pretty-e' = show e'

compile : ‚àÄ {VL‚ÇÅ VL‚ÇÇ : VariabilityLanguage Variant}
  ‚Üí Expression VL‚ÇÅ Artifact
  ‚Üí String
  ‚Üí LanguageCompiler VL‚ÇÅ VL‚ÇÇ
  ‚Üí (Expression VL‚ÇÇ Artifact ‚Üí Lines)
  ‚Üí Lines' (Expression VL‚ÇÇ Artifact)
compile e VL‚ÇÇ-name compiler show = translate e VL‚ÇÇ-name (LanguageCompiler.compile compiler) show

round-trip : Experiment (CCC Feature ‚àû (String , String._‚âü_))
getName round-trip = "Translate CCC in one round-trip into equally expressive variability languages"
get     round-trip ex@(name ‚âî ccc) = do
  [ Center ]> "CCC, original expression"
  let pretty-ccc = CCC.pretty id ccc
  overwrite-alignment-with Center
    (boxed (6 + width pretty-ccc) "" pretty-ccc)

  void-level do
    ncc         ‚Üê translate ccc         "NCC"         CCC‚ÜíNCC-Exact                                              (NCC.Pretty.pretty id)
    ncc2        ‚Üê compile   ncc         "NCC"         (shrinkTo2Compiler ‚åà ccc ‚åâ)                                (NCC.Pretty.pretty (String.diagonal-‚Ñï ‚àò map‚ÇÇ Fin.to‚Ñï))
    2cc         ‚Üê compile   ncc2        "2CC"         NCC-2‚Üí2CC                                                  (2CC.Pretty.pretty (String.diagonal-‚Ñï ‚àò map‚ÇÇ Fin.to‚Ñï))
    adt         ‚Üê compile   2cc         "ADT"         2CC‚ÜíADT                                                    (ADT.pretty (show-rose id) (String.diagonal-‚Ñï ‚àò map‚ÇÇ Fin.to‚Ñï))
    variantList ‚Üê compile   adt         "VariantList" (ADT‚ÜíVariantList (decidableEquality-√ó String._‚âü_ Fin._‚âü_)) (VariantList.pretty (Rose ‚àû) (show-rose id))
    do            compile   variantList "CCC"         (VariantList‚ÜíCCC "default feature" CCC-Rose-encoder)       (CCC.pretty id)
  linebreak


ex-trivial : Example (CCC Feature ‚àû Artifact)
ex-trivial = "trivial" ‚âî "D" ‚ü® "l" -< [] >- ‚à∑ "r" -< [] >- ‚à∑ [] ‚ü©

ex-sandwich : Example (CCC Feature ‚àû Artifact)
ex-sandwich = "Sandwich Recipe" ‚âî
  "Bread"
    -< "Salad?"
         ‚ü® "salad" -< [] >-
         ‚à∑ "Œµ" -< [] >-
         ‚à∑ []
         ‚ü©
    ‚à∑  "cheese" -< [] >-
    ‚à∑  "Patty?"
         ‚ü® "meat" -< [] >-
         ‚à∑ "tofu" -< [] >-
         ‚à∑ []
         ‚ü©
    ‚à∑  "Sauce?"
         ‚ü® "Œµ" -< [] >-
         ‚à∑ "mayo" -< [] >-
         ‚à∑ "ketchup" -< [] >-
         ‚à∑ "mayo+ketchup" -< [] >-
         ‚à∑ []
         ‚ü©
    ‚à∑ []
    >-

examples : List (Example (CCC Feature ‚àû Artifact))
examples = ex-trivial ‚à∑ ex-sandwich ‚à∑ []
